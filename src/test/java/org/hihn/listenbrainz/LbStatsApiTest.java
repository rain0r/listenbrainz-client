/*
 * ListenBrainz Swagger - OpenAPI 3.0
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.hihn.listenbrainz;

import org.hihn.listenbrainz.ApiException;
import org.hihn.listenbrainz.AllowedStatisticsRange;
import org.hihn.listenbrainz.ArtistMapForUser;
import org.hihn.listenbrainz.DailyActivityForUser;
import org.hihn.listenbrainz.ListenersForArtist;
import org.hihn.listenbrainz.ListenersForReleaseGroup;
import org.hihn.listenbrainz.ListeningActivityForUser;
import org.hihn.listenbrainz.SitewideArtistMap;
import org.hihn.listenbrainz.SitewideListeningActivity;
import org.hihn.listenbrainz.SitewideTopArtists;
import org.hihn.listenbrainz.SitewideTopRecordings;
import org.hihn.listenbrainz.SitewideTopReleaseGroups;
import org.hihn.listenbrainz.SitewideTopReleases;
import org.hihn.listenbrainz.TopArtistsForUser;
import org.hihn.listenbrainz.TopRecordingsForUser;
import org.hihn.listenbrainz.TopReleaseGroupsForUser;
import org.hihn.listenbrainz.TopReleasesForUser;
import java.util.UUID;
import org.hihn.listenbrainz.YearInMusicForUser;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LbStatsApi
 */
@Disabled
public class LbStatsApiTest {

    private final LbStatsApi api = new LbStatsApi();

    /**
     * Get the artist map for user &#39;user_name&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void artistMapForUserTest() throws ApiException {
        String userName = null;
        AllowedStatisticsRange range = null;
        Boolean forceRecalculate = null;
        ArtistMapForUser response = api.artistMapForUser(userName)
                .range(range)
                .forceRecalculate(forceRecalculate)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the daily activity for user &#39;user_name&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dailyActivityForUserTest() throws ApiException {
        String userName = null;
        AllowedStatisticsRange range = null;
        DailyActivityForUser response = api.dailyActivityForUser(userName)
                .range(range)
                .execute();
        // TODO: test validations
    }

    /**
     * Get top listeners for artist &#39;artist_mbid&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listenersForArtistTest() throws ApiException {
        UUID artistMbid = null;
        AllowedStatisticsRange range = null;
        ListenersForArtist response = api.listenersForArtist(artistMbid)
                .range(range)
                .execute();
        // TODO: test validations
    }

    /**
     * Get top listeners for release group &#39;release_group_mbid&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listenersForReleaseGroupTest() throws ApiException {
        UUID releaseGroupMbid = null;
        AllowedStatisticsRange range = null;
        ListenersForReleaseGroup response = api.listenersForReleaseGroup(releaseGroupMbid)
                .range(range)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the listening activity for user &#39;user_name&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listeningActivityForUserTest() throws ApiException {
        String userName = null;
        AllowedStatisticsRange range = null;
        ListeningActivityForUser response = api.listeningActivityForUser(userName)
                .range(range)
                .execute();
        // TODO: test validations
    }

    /**
     * Get sitewide top recordings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitewideArtistMapTest() throws ApiException {
        AllowedStatisticsRange range = null;
        Boolean forceRecalculate = null;
        SitewideArtistMap response = api.sitewideArtistMap()
                .range(range)
                .forceRecalculate(forceRecalculate)
                .execute();
        // TODO: test validations
    }

    /**
     * Get sitewide top recordings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitewideListeningActivityTest() throws ApiException {
        AllowedStatisticsRange range = null;
        SitewideListeningActivity response = api.sitewideListeningActivity()
                .range(range)
                .execute();
        // TODO: test validations
    }

    /**
     * Get sitewide top artists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitewideTopArtistsTest() throws ApiException {
        Integer count = null;
        Integer offset = null;
        AllowedStatisticsRange range = null;
        SitewideTopArtists response = api.sitewideTopArtists()
                .count(count)
                .offset(offset)
                .range(range)
                .execute();
        // TODO: test validations
    }

    /**
     * Get sitewide top recordings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitewideTopRecordingsTest() throws ApiException {
        Integer count = null;
        Integer offset = null;
        AllowedStatisticsRange range = null;
        SitewideTopRecordings response = api.sitewideTopRecordings()
                .count(count)
                .offset(offset)
                .range(range)
                .execute();
        // TODO: test validations
    }

    /**
     * Get sitewide top release groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitewideTopReleaseGroupsTest() throws ApiException {
        Integer count = null;
        Integer offset = null;
        AllowedStatisticsRange range = null;
        SitewideTopReleaseGroups response = api.sitewideTopReleaseGroups()
                .count(count)
                .offset(offset)
                .range(range)
                .execute();
        // TODO: test validations
    }

    /**
     * Get sitewide top releases.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitewideTopReleasesTest() throws ApiException {
        Integer count = null;
        Integer offset = null;
        AllowedStatisticsRange range = null;
        SitewideTopReleases response = api.sitewideTopReleases()
                .count(count)
                .offset(offset)
                .range(range)
                .execute();
        // TODO: test validations
    }

    /**
     * Get top artists for user &#39;user_name&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topArtistsForUserTest() throws ApiException {
        String userName = null;
        Integer count = null;
        Integer offset = null;
        AllowedStatisticsRange range = null;
        TopArtistsForUser response = api.topArtistsForUser(userName)
                .count(count)
                .offset(offset)
                .range(range)
                .execute();
        // TODO: test validations
    }

    /**
     * Get top recordings for user &#39;user_name&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topRecordingsForUserTest() throws ApiException {
        String userName = null;
        Integer count = null;
        Integer offset = null;
        AllowedStatisticsRange range = null;
        TopRecordingsForUser response = api.topRecordingsForUser(userName)
                .count(count)
                .offset(offset)
                .range(range)
                .execute();
        // TODO: test validations
    }

    /**
     * Get top release groups for user &#39;user_name&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topReleaseGroupsForUserTest() throws ApiException {
        String userName = null;
        Integer count = null;
        Integer offset = null;
        AllowedStatisticsRange range = null;
        TopReleaseGroupsForUser response = api.topReleaseGroupsForUser(userName)
                .count(count)
                .offset(offset)
                .range(range)
                .execute();
        // TODO: test validations
    }

    /**
     * Get top releases for user &#39;user_name&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topReleasesForUserTest() throws ApiException {
        String userName = null;
        Integer count = null;
        Integer offset = null;
        AllowedStatisticsRange range = null;
        TopReleasesForUser response = api.topReleasesForUser(userName)
                .count(count)
                .offset(offset)
                .range(range)
                .execute();
        // TODO: test validations
    }

    /**
     * Get sitewide top recordings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void yearInMusicForUserTest() throws ApiException {
        String userName = null;
        Integer year = null;
        YearInMusicForUser response = api.yearInMusicForUser(userName, year)
                .execute();
        // TODO: test validations
    }

}
