/*
 * ListenBrainz Swagger - OpenAPI 3.0
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.hihn.listenbrainz;

import org.hihn.listenbrainz.ApiException;
import org.hihn.listenbrainz.FeedbackResponse;
import org.hihn.listenbrainz.GetPins;
import org.hihn.listenbrainz.GetPinsCurrent200Response;
import org.hihn.listenbrainz.Pin200Response;
import org.hihn.listenbrainz.PinRequest;
import org.hihn.listenbrainz.RecordingFeedbackRequest;
import java.util.UUID;
import org.hihn.listenbrainz.UpdatePinRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LbRecordingsApi
 */
@Disabled
public class LbRecordingsApiTest {

    private final LbRecordingsApi api = new LbRecordingsApi();

    /**
     * Get feedback given by user &#39;user_name&#39;. The format for the JSON returned is defined in our Feedback JSON Documentation.  If the optional argument score is not given, this endpoint will return all the feedback submitted by the user. Otherwise filters the feedback to be returned by score.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFeedbackTest() throws ApiException {
        String userName = null;
        Integer score = null;
        Integer count = null;
        Integer offset = null;
        String metadata = null;
        FeedbackResponse response = api.getFeedback(userName)
                .score(score)
                .count(count)
                .offset(offset)
                .metadata(metadata)
                .execute();
        // TODO: test validations
    }

    /**
     * Get feedback given by user user_name for the list of recordings supplied.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFeedbackForRecordingsTest() throws ApiException {
        String userName = null;
        List<UUID> recordingMsids = null;
        List<UUID> recordingMbids = null;
        FeedbackResponse response = api.getFeedbackForRecordings(userName)
                .recordingMsids(recordingMsids)
                .recordingMbids(recordingMbids)
                .execute();
        // TODO: test validations
    }

    /**
     * Get feedback for recording with given recording_mbid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFeedbackMbidTest() throws ApiException {
        UUID recordingMbid = null;
        Integer score = null;
        Integer count = null;
        Integer offset = null;
        FeedbackResponse response = api.getFeedbackMbid(recordingMbid)
                .score(score)
                .count(count)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Get feedback for recording with given recording_msid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFeedbackMsidTest() throws ApiException {
        String recordingMsid = null;
        Integer score = null;
        Integer count = null;
        Integer offset = null;
        FeedbackResponse response = api.getFeedbackMsid(recordingMsid)
                .score(score)
                .count(count)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a list of all recordings ever pinned by a user with given user_name in descending order of the time they were originally pinned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPinsTest() throws ApiException {
        String userName = null;
        Integer count = null;
        Integer offset = null;
        GetPins response = api.getPins(userName)
                .count(count)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the currently pinned recording by a user with given user_name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPinsCurrentTest() throws ApiException {
        String userName = null;
        GetPinsCurrent200Response response = api.getPinsCurrent(userName)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a list containing the active pinned recordings for all users in a user&#39;s user_name following list. The returned pinned recordings are sorted in descending order of the time they were pinned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPinsFollowingTest() throws ApiException {
        String userName = null;
        Integer count = null;
        Integer offset = null;
        GetPins response = api.getPinsFollowing(userName)
                .count(count)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Pin a recording for user. A user token (found on https://listenbrainz.org/settings/) must be provided in the Authorization header! Each request should contain only one pinned recording item in the payload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pinTest() throws ApiException {
        PinRequest pinRequest = null;
        Pin200Response response = api.pin(pinRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Deletes the pinned recording with given row_id from the server. A user token (found on https://listenbrainz.org/settings/) must be provided in the Authorization header!
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pinDeleteTest() throws ApiException {
        Integer rowId = null;
        api.pinDelete(rowId)
                .execute();
        // TODO: test validations
    }

    /**
     * Submit recording feedback (love/hate) to the server. A user token (found on https://listenbrainz.org/settings/ ) must be provided in the Authorization header! Each request should contain only one feedback in the payload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recordingFeedbackTest() throws ApiException {
        RecordingFeedbackRequest recordingFeedbackRequest = null;
        api.recordingFeedback(recordingFeedbackRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Unpins the currently active pinned recording for the user. A user token (found on https://listenbrainz.org/settings/) must be provided in the Authorization header!
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unpinTest() throws ApiException {
        api.unpin()
                .execute();
        // TODO: test validations
    }

    /**
     * Updates the blurb content of a pinned recording for the user. A user token (found on https://listenbrainz.org/settings/) must be provided in the Authorization header! Each request should contain only one pinned recording item in the payload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePinTest() throws ApiException {
        Integer rowId = null;
        UpdatePinRequest updatePinRequest = null;
        api.updatePin(rowId, updatePinRequest)
                .execute();
        // TODO: test validations
    }

}
