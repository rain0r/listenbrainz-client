/*
 * ListenBrainz Swagger - OpenAPI 3.0
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.hihn.listenbrainz;

import org.hihn.listenbrainz.ApiException;
import org.hihn.listenbrainz.DeleteListen;
import org.hihn.listenbrainz.LatestImport;
import org.hihn.listenbrainz.LbRadioRecordingsForArtistValueInner;
import org.hihn.listenbrainz.LbRadioTagsInner;
import org.hihn.listenbrainz.ListenCountForUser;
import org.hihn.listenbrainz.ListensForUser;
import org.hihn.listenbrainz.Mode;
import org.hihn.listenbrainz.Operator;
import org.hihn.listenbrainz.PlayingNowForUser;
import org.hihn.listenbrainz.Playlists;
import org.hihn.listenbrainz.SearchUsers;
import org.hihn.listenbrainz.ServicesForUser;
import org.hihn.listenbrainz.SimilarUsersForUser;
import org.hihn.listenbrainz.SimilarityOfUserForUser;
import org.hihn.listenbrainz.SubmitListens;
import java.util.UUID;
import org.hihn.listenbrainz.ValidateToken;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LbCoreApi
 */
@Disabled
public class LbCoreApiTest {

    private final LbCoreApi api = new LbCoreApi();

    /**
     * Delete a particular listen from a user&#39;s listen history.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteListenTest() throws ApiException {
        DeleteListen deleteListen = null;
        api.deleteListen(deleteListen)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the timestamp of the newest listen submitted by a user in previous imports to ListenBrainz.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void latestImportTest() throws ApiException {
        String userName = null;
        LatestImport response = api.latestImport(userName)
                .execute();
        // TODO: test validations
    }

    /**
     * Get recordings for use in LB radio with the given seed artist. The endpoint returns a dict of all the similar artists, including the seed artist. For each artists, there will be a list of dicts that contain recording_mbid, similar_artist_mbid and total_listen_count.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lbRadioRecordingsForArtistTest() throws ApiException {
        UUID seedArtistMbid = null;
        Mode mode = null;
        Integer maxSimilarArtists = null;
        Integer maxRecordingsPerArtist = null;
        Integer popBegin = null;
        Integer popEnd = null;
        Map<String, List<LbRadioRecordingsForArtistValueInner>> response = api.lbRadioRecordingsForArtist(seedArtistMbid, mode, maxSimilarArtists, maxRecordingsPerArtist, popBegin, popEnd)
                .execute();
        // TODO: test validations
    }

    /**
     * Get recordings for use in LB radio with the specified tags that match the requested criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lbRadioTagsTest() throws ApiException {
        String tag = null;
        Integer popBegin = null;
        Integer popEnd = null;
        Integer count = null;
        Operator operator = null;
        List<LbRadioTagsInner> response = api.lbRadioTags(tag, popBegin, popEnd, count)
                .operator(operator)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the number of listens for a user &#39;user_name&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listenCountForUserTest() throws ApiException {
        String userName = null;
        ListenCountForUser response = api.listenCountForUser(userName)
                .execute();
        // TODO: test validations
    }

    /**
     * Get listens for user &#39;user_name&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listensForUserTest() throws ApiException {
        String userName = null;
        Integer maxTs = null;
        Integer minTs = null;
        Integer count = null;
        ListensForUser response = api.listensForUser(userName)
                .maxTs(maxTs)
                .minTs(minTs)
                .count(count)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the listen being played right now for user &#39;user_name&#39;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playingNowForUserTest() throws ApiException {
        String userName = null;
        PlayingNowForUser response = api.playingNowForUser(userName)
                .execute();
        // TODO: test validations
    }

    /**
     * Fetch recommendation playlist metadata in JSPF format without recordings for &#39;playlist_user_name&#39;. This endpoint only lists playlists that are to be shown on the listenbrainz.org recommendations pages.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recommendationPlaylistsForUserTest() throws ApiException {
        String playlistUserName = null;
        Playlists response = api.recommendationPlaylistsForUser(playlistUserName)
                .execute();
        // TODO: test validations
    }

    /**
     * Search for a playlist by name for a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchPlaylistForUserTest() throws ApiException {
        String playlistUserName = null;
        String query = null;
        Integer count = null;
        Integer offset = null;
        Playlists response = api.searchPlaylistForUser(playlistUserName, query)
                .count(count)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Search a ListenBrainz-registered user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchUsersTest() throws ApiException {
        String searchTerm = null;
        SearchUsers response = api.searchUsers(searchTerm)
                .execute();
        // TODO: test validations
    }

    /**
     * Get list of services which are connected to a given user&#39;s account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesForUserTest() throws ApiException {
        String userName = null;
        ServicesForUser response = api.servicesForUser(userName)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the listen being played right now for user &#39;user_name&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void similarUsersForUserTest() throws ApiException {
        String userName = null;
        SimilarUsersForUser response = api.similarUsersForUser(userName)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the similarity of &#39;user_name&#39; and &#39;other_user_name&#39;, based on their listening history.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void similarityOfUserForUserTest() throws ApiException {
        String userName = null;
        String otherUserName = null;
        SimilarityOfUserForUser response = api.similarityOfUserForUser(userName, otherUserName)
                .execute();
        // TODO: test validations
    }

    /**
     * Submit listens to the server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitListensTest() throws ApiException {
        SubmitListens submitListens = null;
        api.submitListens(submitListens)
                .execute();
        // TODO: test validations
    }

    /**
     * Check whether a User Token is a valid entry in the database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateTokenTest() throws ApiException {
        ValidateToken response = api.validateToken()
                .execute();
        // TODO: test validations
    }

}
