/*
 * ListenBrainz Swagger - OpenAPI 3.0
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.hihn.listenbrainz;

import org.hihn.listenbrainz.ApiException;
import org.hihn.listenbrainz.CreatePlaylist200Response;
import org.hihn.listenbrainz.CreatePlaylistRequest;
import org.hihn.listenbrainz.ItemDeleteRequest;
import org.hihn.listenbrainz.MoveItemRequest;
import org.hihn.listenbrainz.Playlist;
import org.hihn.listenbrainz.Playlists;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LbPlaylistsApi
 */
@Disabled
public class LbPlaylistsApiTest {

    private final LbPlaylistsApi api = new LbPlaylistsApi();

    /**
     * Append recordings to an existing playlist by posting a playlist with one of more recordings in it. The playlist must be in JSPF format with MusicBrainz extensions, which is defined here: https://musicbrainz.org/doc/jspf .  If the offset is provided in the URL, then the recordings will be added at that offset, otherwise they will be added at the end of the playlist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appendRecordingsTest() throws ApiException {
        UUID playlistMbid = null;
        Integer offset = null;
        Playlist playlist = null;
        api.appendRecordings(playlistMbid, offset, playlist)
                .execute();
        // TODO: test validations
    }

    /**
     * Copy a playlist - the new playlist will be given the name “Copy of &lt;playlist_name&gt;”. POST body data does not need to contain anything.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void copyPlaylistTest() throws ApiException {
        UUID playlistMbid = null;
        api.copyPlaylist(playlistMbid)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a playlist
     *
     * Create a playlist. The playlist must be in JSPF format with MusicBrainz extensions, which is defined here: https://musicbrainz.org/doc/jspf . To create an empty playlist, you can send an empty playlist with only the title field filled out. If you would like to create a playlist populated with recordings, each of the track items in the playlist must have an identifier element that contains the MusicBrainz recording that includes the recording MBID.  When creating a playlist, only the playlist title and the track identifier elements will be used - all other elements in the posted JSPF wil be ignored.  If a created_for field is found and the user is not an approved playlist bot, then a 403 forbidden will be raised.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPlaylistTest() throws ApiException {
        CreatePlaylistRequest createPlaylistRequest = null;
        CreatePlaylist200Response response = api.createPlaylist(createPlaylistRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a playlist.
     *
     * POST body data does not need to contain anything.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePlaylistTest() throws ApiException {
        UUID playlistMbid = null;
        api.deletePlaylist(playlistMbid)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a playlist. The playlist must be in JSPF format with MusicBrainz extensions, which is defined here: https://musicbrainz.org/doc/jspf . To create an empty playlist, you can send an empty playlist with only the title field filled out. If you would like to create a playlist populated with recordings, each of the track items in the playlist must have an identifier element that contains the MusicBrainz recording that includes the recording MBID.  When creating a playlist, only the playlist title and the track identifier elements will be used - all other elements in the posted JSPF wil be ignored.  If a created_for field is found and the user is not an approved playlist bot, then a 403 forbidden will be raised.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editPlaylistTest() throws ApiException {
        UUID playlistMbid = null;
        CreatePlaylistRequest createPlaylistRequest = null;
        api.editPlaylist(playlistMbid, createPlaylistRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Fetch the given playlist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchPlaylistTest() throws ApiException {
        UUID playlistMbid = null;
        Boolean fetchMetadata = null;
        CreatePlaylistRequest response = api.fetchPlaylist(playlistMbid)
                .fetchMetadata(fetchMetadata)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an item in a playlist.
     *
     * To delete an item in a playlist, the POST data needs to specify the recording MBID and current index of the track to delete, and how many tracks from that position should be moved deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void itemDeleteTest() throws ApiException {
        UUID playlistMbid = null;
        ItemDeleteRequest itemDeleteRequest = null;
        api.itemDelete(playlistMbid, itemDeleteRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * To move an item in a playlist, the POST data needs to specify the recording MBID and current index of the track to move (from), where to move it to (to) and how many tracks from that position should be moved (count).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void moveItemTest() throws ApiException {
        UUID playlistMbid = null;
        MoveItemRequest moveItemRequest = null;
        api.moveItem(playlistMbid, moveItemRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Fetch playlist metadata in JSPF format without recordings that have been created for the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playlistsCreatedForUserTest() throws ApiException {
        String playlistUserName = null;
        Integer count = null;
        Integer offset = null;
        Playlists response = api.playlistsCreatedForUser(playlistUserName)
                .count(count)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Fetch playlist metadata in JSPF format without recordings for the given user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playlistsForUserTest() throws ApiException {
        String playlistUserName = null;
        Integer count = null;
        Integer offset = null;
        Playlists response = api.playlistsForUser(playlistUserName)
                .count(count)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Fetch playlist metadata in JSPF format without recordings for which a user is a collaborator. If a playlist is private, it will only be returned if the caller is authorized to edit that playlist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playlistsForUserCollaboratorTest() throws ApiException {
        String playlistUserName = null;
        Integer count = null;
        Integer offset = null;
        Playlists response = api.playlistsForUserCollaborator(playlistUserName)
                .count(count)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Search for playlists by name or description. The search query must be at least 3 characters long.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchPlaylistsTest() throws ApiException {
        String query = null;
        Playlists response = api.searchPlaylists(query)
                .execute();
        // TODO: test validations
    }

}
