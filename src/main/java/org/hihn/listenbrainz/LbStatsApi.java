/*
 * ListenBrainz Swagger - OpenAPI 3.0
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.hihn.listenbrainz;

import org.hihn.listenbrainz.ApiCallback;
import org.hihn.listenbrainz.ApiClient;
import org.hihn.listenbrainz.ApiException;
import org.hihn.listenbrainz.ApiResponse;
import org.hihn.listenbrainz.Configuration;
import org.hihn.listenbrainz.Pair;
import org.hihn.listenbrainz.ProgressRequestBody;
import org.hihn.listenbrainz.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.hihn.listenbrainz.AllowedStatisticsRange;
import org.hihn.listenbrainz.ArtistMapForUser;
import org.hihn.listenbrainz.DailyActivityForUser;
import org.hihn.listenbrainz.ListenersForArtist;
import org.hihn.listenbrainz.ListenersForReleaseGroup;
import org.hihn.listenbrainz.ListeningActivityForUser;
import org.hihn.listenbrainz.SitewideArtistMap;
import org.hihn.listenbrainz.SitewideListeningActivity;
import org.hihn.listenbrainz.SitewideTopArtists;
import org.hihn.listenbrainz.SitewideTopRecordings;
import org.hihn.listenbrainz.SitewideTopReleaseGroups;
import org.hihn.listenbrainz.SitewideTopReleases;
import org.hihn.listenbrainz.TopArtistsForUser;
import org.hihn.listenbrainz.TopRecordingsForUser;
import org.hihn.listenbrainz.TopReleaseGroupsForUser;
import org.hihn.listenbrainz.TopReleasesForUser;
import java.util.UUID;
import org.hihn.listenbrainz.YearInMusicForUser;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LbStatsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LbStatsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LbStatsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call artistMapForUserCall(String userName, AllowedStatisticsRange range, Boolean forceRecalculate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/stats/user/{user_name}/artist-map"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range", range));
        }

        if (forceRecalculate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force_recalculate", forceRecalculate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artistMapForUserValidateBeforeCall(String userName, AllowedStatisticsRange range, Boolean forceRecalculate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling artistMapForUser(Async)");
        }

        return artistMapForUserCall(userName, range, forceRecalculate, _callback);

    }


    private ApiResponse<ArtistMapForUser> artistMapForUserWithHttpInfo(String userName, AllowedStatisticsRange range, Boolean forceRecalculate) throws ApiException {
        okhttp3.Call localVarCall = artistMapForUserValidateBeforeCall(userName, range, forceRecalculate, null);
        Type localVarReturnType = new TypeToken<ArtistMapForUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call artistMapForUserAsync(String userName, AllowedStatisticsRange range, Boolean forceRecalculate, final ApiCallback<ArtistMapForUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = artistMapForUserValidateBeforeCall(userName, range, forceRecalculate, _callback);
        Type localVarReturnType = new TypeToken<ArtistMapForUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIartistMapForUserRequest {
        private final String userName;
        private AllowedStatisticsRange range;
        private Boolean forceRecalculate;

        private APIartistMapForUserRequest(String userName) {
            this.userName = userName;
        }

        /**
         * Set range
         * @param range  (optional)
         * @return APIartistMapForUserRequest
         */
        public APIartistMapForUserRequest range(AllowedStatisticsRange range) {
            this.range = range;
            return this;
        }

        /**
         * Set forceRecalculate
         * @param forceRecalculate Optional, recalculate the data instead of returning the cached result. (optional, default to false)
         * @return APIartistMapForUserRequest
         */
        public APIartistMapForUserRequest forceRecalculate(Boolean forceRecalculate) {
            this.forceRecalculate = forceRecalculate;
            return this;
        }

        /**
         * Build call for artistMapForUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return artistMapForUserCall(userName, range, forceRecalculate, _callback);
        }

        /**
         * Execute artistMapForUser request
         * @return ArtistMapForUser
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public ArtistMapForUser execute() throws ApiException {
            ApiResponse<ArtistMapForUser> localVarResp = artistMapForUserWithHttpInfo(userName, range, forceRecalculate);
            return localVarResp.getData();
        }

        /**
         * Execute artistMapForUser request with HTTP info returned
         * @return ApiResponse&lt;ArtistMapForUser&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ArtistMapForUser> executeWithHttpInfo() throws ApiException {
            return artistMapForUserWithHttpInfo(userName, range, forceRecalculate);
        }

        /**
         * Execute artistMapForUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ArtistMapForUser> _callback) throws ApiException {
            return artistMapForUserAsync(userName, range, forceRecalculate, _callback);
        }
    }

    /**
     * Get the artist map for user &#39;user_name&#39;.
     * 
     * @param userName  (required)
     * @return APIartistMapForUserRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIartistMapForUserRequest artistMapForUser(String userName) {
        return new APIartistMapForUserRequest(userName);
    }
    private okhttp3.Call dailyActivityForUserCall(String userName, AllowedStatisticsRange range, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/stats/user/{user_name}/daily-activity"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range", range));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dailyActivityForUserValidateBeforeCall(String userName, AllowedStatisticsRange range, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling dailyActivityForUser(Async)");
        }

        return dailyActivityForUserCall(userName, range, _callback);

    }


    private ApiResponse<DailyActivityForUser> dailyActivityForUserWithHttpInfo(String userName, AllowedStatisticsRange range) throws ApiException {
        okhttp3.Call localVarCall = dailyActivityForUserValidateBeforeCall(userName, range, null);
        Type localVarReturnType = new TypeToken<DailyActivityForUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call dailyActivityForUserAsync(String userName, AllowedStatisticsRange range, final ApiCallback<DailyActivityForUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = dailyActivityForUserValidateBeforeCall(userName, range, _callback);
        Type localVarReturnType = new TypeToken<DailyActivityForUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdailyActivityForUserRequest {
        private final String userName;
        private AllowedStatisticsRange range;

        private APIdailyActivityForUserRequest(String userName) {
            this.userName = userName;
        }

        /**
         * Set range
         * @param range  (optional)
         * @return APIdailyActivityForUserRequest
         */
        public APIdailyActivityForUserRequest range(AllowedStatisticsRange range) {
            this.range = range;
            return this;
        }

        /**
         * Build call for dailyActivityForUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return dailyActivityForUserCall(userName, range, _callback);
        }

        /**
         * Execute dailyActivityForUser request
         * @return DailyActivityForUser
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public DailyActivityForUser execute() throws ApiException {
            ApiResponse<DailyActivityForUser> localVarResp = dailyActivityForUserWithHttpInfo(userName, range);
            return localVarResp.getData();
        }

        /**
         * Execute dailyActivityForUser request with HTTP info returned
         * @return ApiResponse&lt;DailyActivityForUser&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DailyActivityForUser> executeWithHttpInfo() throws ApiException {
            return dailyActivityForUserWithHttpInfo(userName, range);
        }

        /**
         * Execute dailyActivityForUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DailyActivityForUser> _callback) throws ApiException {
            return dailyActivityForUserAsync(userName, range, _callback);
        }
    }

    /**
     * Get the daily activity for user &#39;user_name&#39;.
     * 
     * @param userName  (required)
     * @return APIdailyActivityForUserRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIdailyActivityForUserRequest dailyActivityForUser(String userName) {
        return new APIdailyActivityForUserRequest(userName);
    }
    private okhttp3.Call listenersForArtistCall(UUID artistMbid, AllowedStatisticsRange range, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/stats/artist/{artist_mbid}/listeners"
            .replace("{" + "artist_mbid" + "}", localVarApiClient.escapeString(artistMbid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range", range));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listenersForArtistValidateBeforeCall(UUID artistMbid, AllowedStatisticsRange range, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'artistMbid' is set
        if (artistMbid == null) {
            throw new ApiException("Missing the required parameter 'artistMbid' when calling listenersForArtist(Async)");
        }

        return listenersForArtistCall(artistMbid, range, _callback);

    }


    private ApiResponse<ListenersForArtist> listenersForArtistWithHttpInfo(UUID artistMbid, AllowedStatisticsRange range) throws ApiException {
        okhttp3.Call localVarCall = listenersForArtistValidateBeforeCall(artistMbid, range, null);
        Type localVarReturnType = new TypeToken<ListenersForArtist>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listenersForArtistAsync(UUID artistMbid, AllowedStatisticsRange range, final ApiCallback<ListenersForArtist> _callback) throws ApiException {

        okhttp3.Call localVarCall = listenersForArtistValidateBeforeCall(artistMbid, range, _callback);
        Type localVarReturnType = new TypeToken<ListenersForArtist>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistenersForArtistRequest {
        private final UUID artistMbid;
        private AllowedStatisticsRange range;

        private APIlistenersForArtistRequest(UUID artistMbid) {
            this.artistMbid = artistMbid;
        }

        /**
         * Set range
         * @param range  (optional)
         * @return APIlistenersForArtistRequest
         */
        public APIlistenersForArtistRequest range(AllowedStatisticsRange range) {
            this.range = range;
            return this;
        }

        /**
         * Build call for listenersForArtist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the artist haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listenersForArtistCall(artistMbid, range, _callback);
        }

        /**
         * Execute listenersForArtist request
         * @return ListenersForArtist
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the artist haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
         </table>
         */
        public ListenersForArtist execute() throws ApiException {
            ApiResponse<ListenersForArtist> localVarResp = listenersForArtistWithHttpInfo(artistMbid, range);
            return localVarResp.getData();
        }

        /**
         * Execute listenersForArtist request with HTTP info returned
         * @return ApiResponse&lt;ListenersForArtist&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the artist haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListenersForArtist> executeWithHttpInfo() throws ApiException {
            return listenersForArtistWithHttpInfo(artistMbid, range);
        }

        /**
         * Execute listenersForArtist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the artist haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListenersForArtist> _callback) throws ApiException {
            return listenersForArtistAsync(artistMbid, range, _callback);
        }
    }

    /**
     * Get top listeners for artist &#39;artist_mbid&#39;.
     * 
     * @param artistMbid  (required)
     * @return APIlistenersForArtistRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Statistics for the artist haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIlistenersForArtistRequest listenersForArtist(UUID artistMbid) {
        return new APIlistenersForArtistRequest(artistMbid);
    }
    private okhttp3.Call listenersForReleaseGroupCall(UUID releaseGroupMbid, AllowedStatisticsRange range, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/stats/release-group/{release_group_mbid}/listeners"
            .replace("{" + "release_group_mbid" + "}", localVarApiClient.escapeString(releaseGroupMbid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range", range));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listenersForReleaseGroupValidateBeforeCall(UUID releaseGroupMbid, AllowedStatisticsRange range, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'releaseGroupMbid' is set
        if (releaseGroupMbid == null) {
            throw new ApiException("Missing the required parameter 'releaseGroupMbid' when calling listenersForReleaseGroup(Async)");
        }

        return listenersForReleaseGroupCall(releaseGroupMbid, range, _callback);

    }


    private ApiResponse<ListenersForReleaseGroup> listenersForReleaseGroupWithHttpInfo(UUID releaseGroupMbid, AllowedStatisticsRange range) throws ApiException {
        okhttp3.Call localVarCall = listenersForReleaseGroupValidateBeforeCall(releaseGroupMbid, range, null);
        Type localVarReturnType = new TypeToken<ListenersForReleaseGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listenersForReleaseGroupAsync(UUID releaseGroupMbid, AllowedStatisticsRange range, final ApiCallback<ListenersForReleaseGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = listenersForReleaseGroupValidateBeforeCall(releaseGroupMbid, range, _callback);
        Type localVarReturnType = new TypeToken<ListenersForReleaseGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistenersForReleaseGroupRequest {
        private final UUID releaseGroupMbid;
        private AllowedStatisticsRange range;

        private APIlistenersForReleaseGroupRequest(UUID releaseGroupMbid) {
            this.releaseGroupMbid = releaseGroupMbid;
        }

        /**
         * Set range
         * @param range  (optional)
         * @return APIlistenersForReleaseGroupRequest
         */
        public APIlistenersForReleaseGroupRequest range(AllowedStatisticsRange range) {
            this.range = range;
            return this;
        }

        /**
         * Build call for listenersForReleaseGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the artist haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listenersForReleaseGroupCall(releaseGroupMbid, range, _callback);
        }

        /**
         * Execute listenersForReleaseGroup request
         * @return ListenersForReleaseGroup
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the artist haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
         </table>
         */
        public ListenersForReleaseGroup execute() throws ApiException {
            ApiResponse<ListenersForReleaseGroup> localVarResp = listenersForReleaseGroupWithHttpInfo(releaseGroupMbid, range);
            return localVarResp.getData();
        }

        /**
         * Execute listenersForReleaseGroup request with HTTP info returned
         * @return ApiResponse&lt;ListenersForReleaseGroup&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the artist haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListenersForReleaseGroup> executeWithHttpInfo() throws ApiException {
            return listenersForReleaseGroupWithHttpInfo(releaseGroupMbid, range);
        }

        /**
         * Execute listenersForReleaseGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the artist haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListenersForReleaseGroup> _callback) throws ApiException {
            return listenersForReleaseGroupAsync(releaseGroupMbid, range, _callback);
        }
    }

    /**
     * Get top listeners for release group &#39;release_group_mbid&#39;.
     * 
     * @param releaseGroupMbid  (required)
     * @return APIlistenersForReleaseGroupRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Statistics for the artist haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIlistenersForReleaseGroupRequest listenersForReleaseGroup(UUID releaseGroupMbid) {
        return new APIlistenersForReleaseGroupRequest(releaseGroupMbid);
    }
    private okhttp3.Call listeningActivityForUserCall(String userName, AllowedStatisticsRange range, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/stats/user/{user_name}/listening-activity"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range", range));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listeningActivityForUserValidateBeforeCall(String userName, AllowedStatisticsRange range, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling listeningActivityForUser(Async)");
        }

        return listeningActivityForUserCall(userName, range, _callback);

    }


    private ApiResponse<ListeningActivityForUser> listeningActivityForUserWithHttpInfo(String userName, AllowedStatisticsRange range) throws ApiException {
        okhttp3.Call localVarCall = listeningActivityForUserValidateBeforeCall(userName, range, null);
        Type localVarReturnType = new TypeToken<ListeningActivityForUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listeningActivityForUserAsync(String userName, AllowedStatisticsRange range, final ApiCallback<ListeningActivityForUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = listeningActivityForUserValidateBeforeCall(userName, range, _callback);
        Type localVarReturnType = new TypeToken<ListeningActivityForUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlisteningActivityForUserRequest {
        private final String userName;
        private AllowedStatisticsRange range;

        private APIlisteningActivityForUserRequest(String userName) {
            this.userName = userName;
        }

        /**
         * Set range
         * @param range  (optional)
         * @return APIlisteningActivityForUserRequest
         */
        public APIlisteningActivityForUserRequest range(AllowedStatisticsRange range) {
            this.range = range;
            return this;
        }

        /**
         * Build call for listeningActivityForUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listeningActivityForUserCall(userName, range, _callback);
        }

        /**
         * Execute listeningActivityForUser request
         * @return ListeningActivityForUser
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public ListeningActivityForUser execute() throws ApiException {
            ApiResponse<ListeningActivityForUser> localVarResp = listeningActivityForUserWithHttpInfo(userName, range);
            return localVarResp.getData();
        }

        /**
         * Execute listeningActivityForUser request with HTTP info returned
         * @return ApiResponse&lt;ListeningActivityForUser&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListeningActivityForUser> executeWithHttpInfo() throws ApiException {
            return listeningActivityForUserWithHttpInfo(userName, range);
        }

        /**
         * Execute listeningActivityForUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListeningActivityForUser> _callback) throws ApiException {
            return listeningActivityForUserAsync(userName, range, _callback);
        }
    }

    /**
     * Get the listening activity for user &#39;user_name&#39;.
     * 
     * @param userName  (required)
     * @return APIlisteningActivityForUserRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIlisteningActivityForUserRequest listeningActivityForUser(String userName) {
        return new APIlisteningActivityForUserRequest(userName);
    }
    private okhttp3.Call sitewideArtistMapCall(AllowedStatisticsRange range, Boolean forceRecalculate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/stats/sitewide/artist-map";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range", range));
        }

        if (forceRecalculate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force_recalculate", forceRecalculate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitewideArtistMapValidateBeforeCall(AllowedStatisticsRange range, Boolean forceRecalculate, final ApiCallback _callback) throws ApiException {
        return sitewideArtistMapCall(range, forceRecalculate, _callback);

    }


    private ApiResponse<SitewideArtistMap> sitewideArtistMapWithHttpInfo(AllowedStatisticsRange range, Boolean forceRecalculate) throws ApiException {
        okhttp3.Call localVarCall = sitewideArtistMapValidateBeforeCall(range, forceRecalculate, null);
        Type localVarReturnType = new TypeToken<SitewideArtistMap>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sitewideArtistMapAsync(AllowedStatisticsRange range, Boolean forceRecalculate, final ApiCallback<SitewideArtistMap> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitewideArtistMapValidateBeforeCall(range, forceRecalculate, _callback);
        Type localVarReturnType = new TypeToken<SitewideArtistMap>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsitewideArtistMapRequest {
        private AllowedStatisticsRange range;
        private Boolean forceRecalculate;

        private APIsitewideArtistMapRequest() {
        }

        /**
         * Set range
         * @param range  (optional)
         * @return APIsitewideArtistMapRequest
         */
        public APIsitewideArtistMapRequest range(AllowedStatisticsRange range) {
            this.range = range;
            return this;
        }

        /**
         * Set forceRecalculate
         * @param forceRecalculate Optional, recalculate the data instead of returning the cached result. (optional, default to false)
         * @return APIsitewideArtistMapRequest
         */
        public APIsitewideArtistMapRequest forceRecalculate(Boolean forceRecalculate) {
            this.forceRecalculate = forceRecalculate;
            return this;
        }

        /**
         * Build call for sitewideArtistMap
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return sitewideArtistMapCall(range, forceRecalculate, _callback);
        }

        /**
         * Execute sitewideArtistMap request
         * @return SitewideArtistMap
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
         </table>
         */
        public SitewideArtistMap execute() throws ApiException {
            ApiResponse<SitewideArtistMap> localVarResp = sitewideArtistMapWithHttpInfo(range, forceRecalculate);
            return localVarResp.getData();
        }

        /**
         * Execute sitewideArtistMap request with HTTP info returned
         * @return ApiResponse&lt;SitewideArtistMap&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SitewideArtistMap> executeWithHttpInfo() throws ApiException {
            return sitewideArtistMapWithHttpInfo(range, forceRecalculate);
        }

        /**
         * Execute sitewideArtistMap request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SitewideArtistMap> _callback) throws ApiException {
            return sitewideArtistMapAsync(range, forceRecalculate, _callback);
        }
    }

    /**
     * Get sitewide top recordings.
     * 
     * @return APIsitewideArtistMapRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Statistics haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     </table>
     */
    public APIsitewideArtistMapRequest sitewideArtistMap() {
        return new APIsitewideArtistMapRequest();
    }
    private okhttp3.Call sitewideListeningActivityCall(AllowedStatisticsRange range, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/stats/sitewide/listening-activity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range", range));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitewideListeningActivityValidateBeforeCall(AllowedStatisticsRange range, final ApiCallback _callback) throws ApiException {
        return sitewideListeningActivityCall(range, _callback);

    }


    private ApiResponse<SitewideListeningActivity> sitewideListeningActivityWithHttpInfo(AllowedStatisticsRange range) throws ApiException {
        okhttp3.Call localVarCall = sitewideListeningActivityValidateBeforeCall(range, null);
        Type localVarReturnType = new TypeToken<SitewideListeningActivity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sitewideListeningActivityAsync(AllowedStatisticsRange range, final ApiCallback<SitewideListeningActivity> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitewideListeningActivityValidateBeforeCall(range, _callback);
        Type localVarReturnType = new TypeToken<SitewideListeningActivity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsitewideListeningActivityRequest {
        private AllowedStatisticsRange range;

        private APIsitewideListeningActivityRequest() {
        }

        /**
         * Set range
         * @param range  (optional)
         * @return APIsitewideListeningActivityRequest
         */
        public APIsitewideListeningActivityRequest range(AllowedStatisticsRange range) {
            this.range = range;
            return this;
        }

        /**
         * Build call for sitewideListeningActivity
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return sitewideListeningActivityCall(range, _callback);
        }

        /**
         * Execute sitewideListeningActivity request
         * @return SitewideListeningActivity
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
         </table>
         */
        public SitewideListeningActivity execute() throws ApiException {
            ApiResponse<SitewideListeningActivity> localVarResp = sitewideListeningActivityWithHttpInfo(range);
            return localVarResp.getData();
        }

        /**
         * Execute sitewideListeningActivity request with HTTP info returned
         * @return ApiResponse&lt;SitewideListeningActivity&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SitewideListeningActivity> executeWithHttpInfo() throws ApiException {
            return sitewideListeningActivityWithHttpInfo(range);
        }

        /**
         * Execute sitewideListeningActivity request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SitewideListeningActivity> _callback) throws ApiException {
            return sitewideListeningActivityAsync(range, _callback);
        }
    }

    /**
     * Get sitewide top recordings.
     * 
     * @return APIsitewideListeningActivityRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Statistics haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     </table>
     */
    public APIsitewideListeningActivityRequest sitewideListeningActivity() {
        return new APIsitewideListeningActivityRequest();
    }
    private okhttp3.Call sitewideTopArtistsCall(Integer count, Integer offset, AllowedStatisticsRange range, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/stats/sitewide/artists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range", range));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitewideTopArtistsValidateBeforeCall(Integer count, Integer offset, AllowedStatisticsRange range, final ApiCallback _callback) throws ApiException {
        return sitewideTopArtistsCall(count, offset, range, _callback);

    }


    private ApiResponse<SitewideTopArtists> sitewideTopArtistsWithHttpInfo(Integer count, Integer offset, AllowedStatisticsRange range) throws ApiException {
        okhttp3.Call localVarCall = sitewideTopArtistsValidateBeforeCall(count, offset, range, null);
        Type localVarReturnType = new TypeToken<SitewideTopArtists>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sitewideTopArtistsAsync(Integer count, Integer offset, AllowedStatisticsRange range, final ApiCallback<SitewideTopArtists> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitewideTopArtistsValidateBeforeCall(count, offset, range, _callback);
        Type localVarReturnType = new TypeToken<SitewideTopArtists>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsitewideTopArtistsRequest {
        private Integer count;
        private Integer offset;
        private AllowedStatisticsRange range;

        private APIsitewideTopArtistsRequest() {
        }

        /**
         * Set count
         * @param count  (optional, default to 25)
         * @return APIsitewideTopArtistsRequest
         */
        public APIsitewideTopArtistsRequest count(Integer count) {
            this.count = count;
            return this;
        }

        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return APIsitewideTopArtistsRequest
         */
        public APIsitewideTopArtistsRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Set range
         * @param range  (optional)
         * @return APIsitewideTopArtistsRequest
         */
        public APIsitewideTopArtistsRequest range(AllowedStatisticsRange range) {
            this.range = range;
            return this;
        }

        /**
         * Build call for sitewideTopArtists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the artist haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return sitewideTopArtistsCall(count, offset, range, _callback);
        }

        /**
         * Execute sitewideTopArtists request
         * @return SitewideTopArtists
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the artist haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
         </table>
         */
        public SitewideTopArtists execute() throws ApiException {
            ApiResponse<SitewideTopArtists> localVarResp = sitewideTopArtistsWithHttpInfo(count, offset, range);
            return localVarResp.getData();
        }

        /**
         * Execute sitewideTopArtists request with HTTP info returned
         * @return ApiResponse&lt;SitewideTopArtists&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the artist haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SitewideTopArtists> executeWithHttpInfo() throws ApiException {
            return sitewideTopArtistsWithHttpInfo(count, offset, range);
        }

        /**
         * Execute sitewideTopArtists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the artist haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SitewideTopArtists> _callback) throws ApiException {
            return sitewideTopArtistsAsync(count, offset, range, _callback);
        }
    }

    /**
     * Get sitewide top artists.
     * 
     * @return APIsitewideTopArtistsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Statistics for the artist haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIsitewideTopArtistsRequest sitewideTopArtists() {
        return new APIsitewideTopArtistsRequest();
    }
    private okhttp3.Call sitewideTopRecordingsCall(Integer count, Integer offset, AllowedStatisticsRange range, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/stats/sitewide/recordings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range", range));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitewideTopRecordingsValidateBeforeCall(Integer count, Integer offset, AllowedStatisticsRange range, final ApiCallback _callback) throws ApiException {
        return sitewideTopRecordingsCall(count, offset, range, _callback);

    }


    private ApiResponse<SitewideTopRecordings> sitewideTopRecordingsWithHttpInfo(Integer count, Integer offset, AllowedStatisticsRange range) throws ApiException {
        okhttp3.Call localVarCall = sitewideTopRecordingsValidateBeforeCall(count, offset, range, null);
        Type localVarReturnType = new TypeToken<SitewideTopRecordings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sitewideTopRecordingsAsync(Integer count, Integer offset, AllowedStatisticsRange range, final ApiCallback<SitewideTopRecordings> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitewideTopRecordingsValidateBeforeCall(count, offset, range, _callback);
        Type localVarReturnType = new TypeToken<SitewideTopRecordings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsitewideTopRecordingsRequest {
        private Integer count;
        private Integer offset;
        private AllowedStatisticsRange range;

        private APIsitewideTopRecordingsRequest() {
        }

        /**
         * Set count
         * @param count  (optional, default to 25)
         * @return APIsitewideTopRecordingsRequest
         */
        public APIsitewideTopRecordingsRequest count(Integer count) {
            this.count = count;
            return this;
        }

        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return APIsitewideTopRecordingsRequest
         */
        public APIsitewideTopRecordingsRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Set range
         * @param range  (optional)
         * @return APIsitewideTopRecordingsRequest
         */
        public APIsitewideTopRecordingsRequest range(AllowedStatisticsRange range) {
            this.range = range;
            return this;
        }

        /**
         * Build call for sitewideTopRecordings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return sitewideTopRecordingsCall(count, offset, range, _callback);
        }

        /**
         * Execute sitewideTopRecordings request
         * @return SitewideTopRecordings
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
         </table>
         */
        public SitewideTopRecordings execute() throws ApiException {
            ApiResponse<SitewideTopRecordings> localVarResp = sitewideTopRecordingsWithHttpInfo(count, offset, range);
            return localVarResp.getData();
        }

        /**
         * Execute sitewideTopRecordings request with HTTP info returned
         * @return ApiResponse&lt;SitewideTopRecordings&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SitewideTopRecordings> executeWithHttpInfo() throws ApiException {
            return sitewideTopRecordingsWithHttpInfo(count, offset, range);
        }

        /**
         * Execute sitewideTopRecordings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SitewideTopRecordings> _callback) throws ApiException {
            return sitewideTopRecordingsAsync(count, offset, range, _callback);
        }
    }

    /**
     * Get sitewide top recordings.
     * 
     * @return APIsitewideTopRecordingsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Statistics haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     </table>
     */
    public APIsitewideTopRecordingsRequest sitewideTopRecordings() {
        return new APIsitewideTopRecordingsRequest();
    }
    private okhttp3.Call sitewideTopReleaseGroupsCall(Integer count, Integer offset, AllowedStatisticsRange range, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/stats/sitewide/release-groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range", range));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitewideTopReleaseGroupsValidateBeforeCall(Integer count, Integer offset, AllowedStatisticsRange range, final ApiCallback _callback) throws ApiException {
        return sitewideTopReleaseGroupsCall(count, offset, range, _callback);

    }


    private ApiResponse<SitewideTopReleaseGroups> sitewideTopReleaseGroupsWithHttpInfo(Integer count, Integer offset, AllowedStatisticsRange range) throws ApiException {
        okhttp3.Call localVarCall = sitewideTopReleaseGroupsValidateBeforeCall(count, offset, range, null);
        Type localVarReturnType = new TypeToken<SitewideTopReleaseGroups>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sitewideTopReleaseGroupsAsync(Integer count, Integer offset, AllowedStatisticsRange range, final ApiCallback<SitewideTopReleaseGroups> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitewideTopReleaseGroupsValidateBeforeCall(count, offset, range, _callback);
        Type localVarReturnType = new TypeToken<SitewideTopReleaseGroups>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsitewideTopReleaseGroupsRequest {
        private Integer count;
        private Integer offset;
        private AllowedStatisticsRange range;

        private APIsitewideTopReleaseGroupsRequest() {
        }

        /**
         * Set count
         * @param count  (optional, default to 25)
         * @return APIsitewideTopReleaseGroupsRequest
         */
        public APIsitewideTopReleaseGroupsRequest count(Integer count) {
            this.count = count;
            return this;
        }

        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return APIsitewideTopReleaseGroupsRequest
         */
        public APIsitewideTopReleaseGroupsRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Set range
         * @param range  (optional)
         * @return APIsitewideTopReleaseGroupsRequest
         */
        public APIsitewideTopReleaseGroupsRequest range(AllowedStatisticsRange range) {
            this.range = range;
            return this;
        }

        /**
         * Build call for sitewideTopReleaseGroups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return sitewideTopReleaseGroupsCall(count, offset, range, _callback);
        }

        /**
         * Execute sitewideTopReleaseGroups request
         * @return SitewideTopReleaseGroups
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
         </table>
         */
        public SitewideTopReleaseGroups execute() throws ApiException {
            ApiResponse<SitewideTopReleaseGroups> localVarResp = sitewideTopReleaseGroupsWithHttpInfo(count, offset, range);
            return localVarResp.getData();
        }

        /**
         * Execute sitewideTopReleaseGroups request with HTTP info returned
         * @return ApiResponse&lt;SitewideTopReleaseGroups&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SitewideTopReleaseGroups> executeWithHttpInfo() throws ApiException {
            return sitewideTopReleaseGroupsWithHttpInfo(count, offset, range);
        }

        /**
         * Execute sitewideTopReleaseGroups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SitewideTopReleaseGroups> _callback) throws ApiException {
            return sitewideTopReleaseGroupsAsync(count, offset, range, _callback);
        }
    }

    /**
     * Get sitewide top release groups.
     * 
     * @return APIsitewideTopReleaseGroupsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Statistics haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     </table>
     */
    public APIsitewideTopReleaseGroupsRequest sitewideTopReleaseGroups() {
        return new APIsitewideTopReleaseGroupsRequest();
    }
    private okhttp3.Call sitewideTopReleasesCall(Integer count, Integer offset, AllowedStatisticsRange range, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/stats/sitewide/releases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range", range));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitewideTopReleasesValidateBeforeCall(Integer count, Integer offset, AllowedStatisticsRange range, final ApiCallback _callback) throws ApiException {
        return sitewideTopReleasesCall(count, offset, range, _callback);

    }


    private ApiResponse<SitewideTopReleases> sitewideTopReleasesWithHttpInfo(Integer count, Integer offset, AllowedStatisticsRange range) throws ApiException {
        okhttp3.Call localVarCall = sitewideTopReleasesValidateBeforeCall(count, offset, range, null);
        Type localVarReturnType = new TypeToken<SitewideTopReleases>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sitewideTopReleasesAsync(Integer count, Integer offset, AllowedStatisticsRange range, final ApiCallback<SitewideTopReleases> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitewideTopReleasesValidateBeforeCall(count, offset, range, _callback);
        Type localVarReturnType = new TypeToken<SitewideTopReleases>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsitewideTopReleasesRequest {
        private Integer count;
        private Integer offset;
        private AllowedStatisticsRange range;

        private APIsitewideTopReleasesRequest() {
        }

        /**
         * Set count
         * @param count  (optional, default to 25)
         * @return APIsitewideTopReleasesRequest
         */
        public APIsitewideTopReleasesRequest count(Integer count) {
            this.count = count;
            return this;
        }

        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return APIsitewideTopReleasesRequest
         */
        public APIsitewideTopReleasesRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Set range
         * @param range  (optional)
         * @return APIsitewideTopReleasesRequest
         */
        public APIsitewideTopReleasesRequest range(AllowedStatisticsRange range) {
            this.range = range;
            return this;
        }

        /**
         * Build call for sitewideTopReleases
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the artist haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return sitewideTopReleasesCall(count, offset, range, _callback);
        }

        /**
         * Execute sitewideTopReleases request
         * @return SitewideTopReleases
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the artist haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
         </table>
         */
        public SitewideTopReleases execute() throws ApiException {
            ApiResponse<SitewideTopReleases> localVarResp = sitewideTopReleasesWithHttpInfo(count, offset, range);
            return localVarResp.getData();
        }

        /**
         * Execute sitewideTopReleases request with HTTP info returned
         * @return ApiResponse&lt;SitewideTopReleases&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the artist haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SitewideTopReleases> executeWithHttpInfo() throws ApiException {
            return sitewideTopReleasesWithHttpInfo(count, offset, range);
        }

        /**
         * Execute sitewideTopReleases request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the artist haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SitewideTopReleases> _callback) throws ApiException {
            return sitewideTopReleasesAsync(count, offset, range, _callback);
        }
    }

    /**
     * Get sitewide top releases.
     * 
     * @return APIsitewideTopReleasesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Statistics for the artist haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIsitewideTopReleasesRequest sitewideTopReleases() {
        return new APIsitewideTopReleasesRequest();
    }
    private okhttp3.Call topArtistsForUserCall(String userName, Integer count, Integer offset, AllowedStatisticsRange range, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/stats/user/{user_name}/artists"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range", range));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topArtistsForUserValidateBeforeCall(String userName, Integer count, Integer offset, AllowedStatisticsRange range, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling topArtistsForUser(Async)");
        }

        return topArtistsForUserCall(userName, count, offset, range, _callback);

    }


    private ApiResponse<TopArtistsForUser> topArtistsForUserWithHttpInfo(String userName, Integer count, Integer offset, AllowedStatisticsRange range) throws ApiException {
        okhttp3.Call localVarCall = topArtistsForUserValidateBeforeCall(userName, count, offset, range, null);
        Type localVarReturnType = new TypeToken<TopArtistsForUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call topArtistsForUserAsync(String userName, Integer count, Integer offset, AllowedStatisticsRange range, final ApiCallback<TopArtistsForUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = topArtistsForUserValidateBeforeCall(userName, count, offset, range, _callback);
        Type localVarReturnType = new TypeToken<TopArtistsForUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItopArtistsForUserRequest {
        private final String userName;
        private Integer count;
        private Integer offset;
        private AllowedStatisticsRange range;

        private APItopArtistsForUserRequest(String userName) {
            this.userName = userName;
        }

        /**
         * Set count
         * @param count  (optional, default to 25)
         * @return APItopArtistsForUserRequest
         */
        public APItopArtistsForUserRequest count(Integer count) {
            this.count = count;
            return this;
        }

        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return APItopArtistsForUserRequest
         */
        public APItopArtistsForUserRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Set range
         * @param range  (optional)
         * @return APItopArtistsForUserRequest
         */
        public APItopArtistsForUserRequest range(AllowedStatisticsRange range) {
            this.range = range;
            return this;
        }

        /**
         * Build call for topArtistsForUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return topArtistsForUserCall(userName, count, offset, range, _callback);
        }

        /**
         * Execute topArtistsForUser request
         * @return TopArtistsForUser
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public TopArtistsForUser execute() throws ApiException {
            ApiResponse<TopArtistsForUser> localVarResp = topArtistsForUserWithHttpInfo(userName, count, offset, range);
            return localVarResp.getData();
        }

        /**
         * Execute topArtistsForUser request with HTTP info returned
         * @return ApiResponse&lt;TopArtistsForUser&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TopArtistsForUser> executeWithHttpInfo() throws ApiException {
            return topArtistsForUserWithHttpInfo(userName, count, offset, range);
        }

        /**
         * Execute topArtistsForUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TopArtistsForUser> _callback) throws ApiException {
            return topArtistsForUserAsync(userName, count, offset, range, _callback);
        }
    }

    /**
     * Get top artists for user &#39;user_name&#39;.
     * 
     * @param userName  (required)
     * @return APItopArtistsForUserRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public APItopArtistsForUserRequest topArtistsForUser(String userName) {
        return new APItopArtistsForUserRequest(userName);
    }
    private okhttp3.Call topRecordingsForUserCall(String userName, Integer count, Integer offset, AllowedStatisticsRange range, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/stats/user/{user_name}/recordings"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range", range));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topRecordingsForUserValidateBeforeCall(String userName, Integer count, Integer offset, AllowedStatisticsRange range, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling topRecordingsForUser(Async)");
        }

        return topRecordingsForUserCall(userName, count, offset, range, _callback);

    }


    private ApiResponse<TopRecordingsForUser> topRecordingsForUserWithHttpInfo(String userName, Integer count, Integer offset, AllowedStatisticsRange range) throws ApiException {
        okhttp3.Call localVarCall = topRecordingsForUserValidateBeforeCall(userName, count, offset, range, null);
        Type localVarReturnType = new TypeToken<TopRecordingsForUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call topRecordingsForUserAsync(String userName, Integer count, Integer offset, AllowedStatisticsRange range, final ApiCallback<TopRecordingsForUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = topRecordingsForUserValidateBeforeCall(userName, count, offset, range, _callback);
        Type localVarReturnType = new TypeToken<TopRecordingsForUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItopRecordingsForUserRequest {
        private final String userName;
        private Integer count;
        private Integer offset;
        private AllowedStatisticsRange range;

        private APItopRecordingsForUserRequest(String userName) {
            this.userName = userName;
        }

        /**
         * Set count
         * @param count  (optional, default to 25)
         * @return APItopRecordingsForUserRequest
         */
        public APItopRecordingsForUserRequest count(Integer count) {
            this.count = count;
            return this;
        }

        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return APItopRecordingsForUserRequest
         */
        public APItopRecordingsForUserRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Set range
         * @param range  (optional)
         * @return APItopRecordingsForUserRequest
         */
        public APItopRecordingsForUserRequest range(AllowedStatisticsRange range) {
            this.range = range;
            return this;
        }

        /**
         * Build call for topRecordingsForUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return topRecordingsForUserCall(userName, count, offset, range, _callback);
        }

        /**
         * Execute topRecordingsForUser request
         * @return TopRecordingsForUser
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public TopRecordingsForUser execute() throws ApiException {
            ApiResponse<TopRecordingsForUser> localVarResp = topRecordingsForUserWithHttpInfo(userName, count, offset, range);
            return localVarResp.getData();
        }

        /**
         * Execute topRecordingsForUser request with HTTP info returned
         * @return ApiResponse&lt;TopRecordingsForUser&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TopRecordingsForUser> executeWithHttpInfo() throws ApiException {
            return topRecordingsForUserWithHttpInfo(userName, count, offset, range);
        }

        /**
         * Execute topRecordingsForUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TopRecordingsForUser> _callback) throws ApiException {
            return topRecordingsForUserAsync(userName, count, offset, range, _callback);
        }
    }

    /**
     * Get top recordings for user &#39;user_name&#39;.
     * 
     * @param userName  (required)
     * @return APItopRecordingsForUserRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public APItopRecordingsForUserRequest topRecordingsForUser(String userName) {
        return new APItopRecordingsForUserRequest(userName);
    }
    private okhttp3.Call topReleaseGroupsForUserCall(String userName, Integer count, Integer offset, AllowedStatisticsRange range, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/stats/user/{user_name}/release-groups"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range", range));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topReleaseGroupsForUserValidateBeforeCall(String userName, Integer count, Integer offset, AllowedStatisticsRange range, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling topReleaseGroupsForUser(Async)");
        }

        return topReleaseGroupsForUserCall(userName, count, offset, range, _callback);

    }


    private ApiResponse<TopReleaseGroupsForUser> topReleaseGroupsForUserWithHttpInfo(String userName, Integer count, Integer offset, AllowedStatisticsRange range) throws ApiException {
        okhttp3.Call localVarCall = topReleaseGroupsForUserValidateBeforeCall(userName, count, offset, range, null);
        Type localVarReturnType = new TypeToken<TopReleaseGroupsForUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call topReleaseGroupsForUserAsync(String userName, Integer count, Integer offset, AllowedStatisticsRange range, final ApiCallback<TopReleaseGroupsForUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = topReleaseGroupsForUserValidateBeforeCall(userName, count, offset, range, _callback);
        Type localVarReturnType = new TypeToken<TopReleaseGroupsForUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItopReleaseGroupsForUserRequest {
        private final String userName;
        private Integer count;
        private Integer offset;
        private AllowedStatisticsRange range;

        private APItopReleaseGroupsForUserRequest(String userName) {
            this.userName = userName;
        }

        /**
         * Set count
         * @param count  (optional, default to 25)
         * @return APItopReleaseGroupsForUserRequest
         */
        public APItopReleaseGroupsForUserRequest count(Integer count) {
            this.count = count;
            return this;
        }

        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return APItopReleaseGroupsForUserRequest
         */
        public APItopReleaseGroupsForUserRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Set range
         * @param range  (optional)
         * @return APItopReleaseGroupsForUserRequest
         */
        public APItopReleaseGroupsForUserRequest range(AllowedStatisticsRange range) {
            this.range = range;
            return this;
        }

        /**
         * Build call for topReleaseGroupsForUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return topReleaseGroupsForUserCall(userName, count, offset, range, _callback);
        }

        /**
         * Execute topReleaseGroupsForUser request
         * @return TopReleaseGroupsForUser
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
         </table>
         */
        public TopReleaseGroupsForUser execute() throws ApiException {
            ApiResponse<TopReleaseGroupsForUser> localVarResp = topReleaseGroupsForUserWithHttpInfo(userName, count, offset, range);
            return localVarResp.getData();
        }

        /**
         * Execute topReleaseGroupsForUser request with HTTP info returned
         * @return ApiResponse&lt;TopReleaseGroupsForUser&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TopReleaseGroupsForUser> executeWithHttpInfo() throws ApiException {
            return topReleaseGroupsForUserWithHttpInfo(userName, count, offset, range);
        }

        /**
         * Execute topReleaseGroupsForUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TopReleaseGroupsForUser> _callback) throws ApiException {
            return topReleaseGroupsForUserAsync(userName, count, offset, range, _callback);
        }
    }

    /**
     * Get top release groups for user &#39;user_name&#39;.
     * 
     * @param userName  (required)
     * @return APItopReleaseGroupsForUserRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public APItopReleaseGroupsForUserRequest topReleaseGroupsForUser(String userName) {
        return new APItopReleaseGroupsForUserRequest(userName);
    }
    private okhttp3.Call topReleasesForUserCall(String userName, Integer count, Integer offset, AllowedStatisticsRange range, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/stats/user/{user_name}/releases"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range", range));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topReleasesForUserValidateBeforeCall(String userName, Integer count, Integer offset, AllowedStatisticsRange range, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling topReleasesForUser(Async)");
        }

        return topReleasesForUserCall(userName, count, offset, range, _callback);

    }


    private ApiResponse<TopReleasesForUser> topReleasesForUserWithHttpInfo(String userName, Integer count, Integer offset, AllowedStatisticsRange range) throws ApiException {
        okhttp3.Call localVarCall = topReleasesForUserValidateBeforeCall(userName, count, offset, range, null);
        Type localVarReturnType = new TypeToken<TopReleasesForUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call topReleasesForUserAsync(String userName, Integer count, Integer offset, AllowedStatisticsRange range, final ApiCallback<TopReleasesForUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = topReleasesForUserValidateBeforeCall(userName, count, offset, range, _callback);
        Type localVarReturnType = new TypeToken<TopReleasesForUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItopReleasesForUserRequest {
        private final String userName;
        private Integer count;
        private Integer offset;
        private AllowedStatisticsRange range;

        private APItopReleasesForUserRequest(String userName) {
            this.userName = userName;
        }

        /**
         * Set count
         * @param count  (optional, default to 25)
         * @return APItopReleasesForUserRequest
         */
        public APItopReleasesForUserRequest count(Integer count) {
            this.count = count;
            return this;
        }

        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return APItopReleasesForUserRequest
         */
        public APItopReleasesForUserRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Set range
         * @param range  (optional)
         * @return APItopReleasesForUserRequest
         */
        public APItopReleasesForUserRequest range(AllowedStatisticsRange range) {
            this.range = range;
            return this;
        }

        /**
         * Build call for topReleasesForUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, you have data! </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return topReleasesForUserCall(userName, count, offset, range, _callback);
        }

        /**
         * Execute topReleasesForUser request
         * @return TopReleasesForUser
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, you have data! </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public TopReleasesForUser execute() throws ApiException {
            ApiResponse<TopReleasesForUser> localVarResp = topReleasesForUserWithHttpInfo(userName, count, offset, range);
            return localVarResp.getData();
        }

        /**
         * Execute topReleasesForUser request with HTTP info returned
         * @return ApiResponse&lt;TopReleasesForUser&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, you have data! </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TopReleasesForUser> executeWithHttpInfo() throws ApiException {
            return topReleasesForUserWithHttpInfo(userName, count, offset, range);
        }

        /**
         * Execute topReleasesForUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, you have data! </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TopReleasesForUser> _callback) throws ApiException {
            return topReleasesForUserAsync(userName, count, offset, range, _callback);
        }
    }

    /**
     * Get top releases for user &#39;user_name&#39;.
     * 
     * @param userName  (required)
     * @return APItopReleasesForUserRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful query, you have data! </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Statistics for the user haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public APItopReleasesForUserRequest topReleasesForUser(String userName) {
        return new APItopReleasesForUserRequest(userName);
    }
    private okhttp3.Call yearInMusicForUserCall(String userName, Integer year, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/stats/user/{user_name}/year-in-music/{year}"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()))
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call yearInMusicForUserValidateBeforeCall(String userName, Integer year, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling yearInMusicForUser(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling yearInMusicForUser(Async)");
        }

        return yearInMusicForUserCall(userName, year, _callback);

    }


    private ApiResponse<YearInMusicForUser> yearInMusicForUserWithHttpInfo(String userName, Integer year) throws ApiException {
        okhttp3.Call localVarCall = yearInMusicForUserValidateBeforeCall(userName, year, null);
        Type localVarReturnType = new TypeToken<YearInMusicForUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call yearInMusicForUserAsync(String userName, Integer year, final ApiCallback<YearInMusicForUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = yearInMusicForUserValidateBeforeCall(userName, year, _callback);
        Type localVarReturnType = new TypeToken<YearInMusicForUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIyearInMusicForUserRequest {
        private final String userName;
        private final Integer year;

        private APIyearInMusicForUserRequest(String userName, Integer year) {
            this.userName = userName;
            this.year = year;
        }

        /**
         * Build call for yearInMusicForUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, you have data! </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return yearInMusicForUserCall(userName, year, _callback);
        }

        /**
         * Execute yearInMusicForUser request
         * @return YearInMusicForUser
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, you have data! </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
         </table>
         */
        public YearInMusicForUser execute() throws ApiException {
            ApiResponse<YearInMusicForUser> localVarResp = yearInMusicForUserWithHttpInfo(userName, year);
            return localVarResp.getData();
        }

        /**
         * Execute yearInMusicForUser request with HTTP info returned
         * @return ApiResponse&lt;YearInMusicForUser&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, you have data! </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<YearInMusicForUser> executeWithHttpInfo() throws ApiException {
            return yearInMusicForUserWithHttpInfo(userName, year);
        }

        /**
         * Execute yearInMusicForUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, you have data! </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Statistics haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<YearInMusicForUser> _callback) throws ApiException {
            return yearInMusicForUserAsync(userName, year, _callback);
        }
    }

    /**
     * Get sitewide top recordings.
     * 
     * @param userName  (required)
     * @param year  (required)
     * @return APIyearInMusicForUserRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful query, you have data! </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Statistics haven&#39;t been calculated, empty response will be returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
     </table>
     */
    public APIyearInMusicForUserRequest yearInMusicForUser(String userName, Integer year) {
        return new APIyearInMusicForUserRequest(userName, year);
    }
}
