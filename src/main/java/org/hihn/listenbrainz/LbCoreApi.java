/*
 * ListenBrainz Swagger - OpenAPI 3.0
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.hihn.listenbrainz;

import org.hihn.listenbrainz.ApiCallback;
import org.hihn.listenbrainz.ApiClient;
import org.hihn.listenbrainz.ApiException;
import org.hihn.listenbrainz.ApiResponse;
import org.hihn.listenbrainz.Configuration;
import org.hihn.listenbrainz.Pair;
import org.hihn.listenbrainz.ProgressRequestBody;
import org.hihn.listenbrainz.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.hihn.listenbrainz.DeleteListen;
import org.hihn.listenbrainz.LatestImport;
import org.hihn.listenbrainz.LbRadioRecordingsForArtistValueInner;
import org.hihn.listenbrainz.LbRadioTagsInner;
import org.hihn.listenbrainz.ListenCountForUser;
import org.hihn.listenbrainz.ListensForUser;
import org.hihn.listenbrainz.Mode;
import org.hihn.listenbrainz.Operator;
import org.hihn.listenbrainz.PlayingNowForUser;
import org.hihn.listenbrainz.Playlists;
import org.hihn.listenbrainz.SearchUsers;
import org.hihn.listenbrainz.ServicesForUser;
import org.hihn.listenbrainz.SimilarUsersForUser;
import org.hihn.listenbrainz.SimilarityOfUserForUser;
import org.hihn.listenbrainz.SubmitListens;
import java.util.UUID;
import org.hihn.listenbrainz.ValidateToken;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LbCoreApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LbCoreApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LbCoreApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteListenCall(DeleteListen deleteListen, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteListen;

        // create path and map variables
        String localVarPath = "/1/delete-listen";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteListenValidateBeforeCall(DeleteListen deleteListen, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteListen' is set
        if (deleteListen == null) {
            throw new ApiException("Missing the required parameter 'deleteListen' when calling deleteListen(Async)");
        }

        return deleteListenCall(deleteListen, _callback);

    }


    private ApiResponse<Void> deleteListenWithHttpInfo(DeleteListen deleteListen) throws ApiException {
        okhttp3.Call localVarCall = deleteListenValidateBeforeCall(deleteListen, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteListenAsync(DeleteListen deleteListen, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteListenValidateBeforeCall(deleteListen, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteListenRequest {
        private final DeleteListen deleteListen;

        private APIdeleteListenRequest(DeleteListen deleteListen) {
            this.deleteListen = deleteListen;
        }

        /**
         * Build call for deleteListen
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Listen deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteListenCall(deleteListen, _callback);
        }

        /**
         * Execute deleteListen request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Listen deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteListenWithHttpInfo(deleteListen);
        }

        /**
         * Execute deleteListen request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Listen deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteListenWithHttpInfo(deleteListen);
        }

        /**
         * Execute deleteListen request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Listen deleted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteListenAsync(deleteListen, _callback);
        }
    }

    /**
     * Delete a particular listen from a user&#39;s listen history.
     * 
     * @param deleteListen  (required)
     * @return APIdeleteListenRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listen deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteListenRequest deleteListen(DeleteListen deleteListen) {
        return new APIdeleteListenRequest(deleteListen);
    }
    private okhttp3.Call latestImportCall(String userName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/latest-import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_name", userName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call latestImportValidateBeforeCall(String userName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling latestImport(Async)");
        }

        return latestImportCall(userName, _callback);

    }


    private ApiResponse<LatestImport> latestImportWithHttpInfo(String userName) throws ApiException {
        okhttp3.Call localVarCall = latestImportValidateBeforeCall(userName, null);
        Type localVarReturnType = new TypeToken<LatestImport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call latestImportAsync(String userName, final ApiCallback<LatestImport> _callback) throws ApiException {

        okhttp3.Call localVarCall = latestImportValidateBeforeCall(userName, _callback);
        Type localVarReturnType = new TypeToken<LatestImport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlatestImportRequest {
        private final String userName;

        private APIlatestImportRequest(String userName) {
            this.userName = userName;
        }

        /**
         * Build call for latestImport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return latestImportCall(userName, _callback);
        }

        /**
         * Execute latestImport request
         * @return LatestImport
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
         </table>
         */
        public LatestImport execute() throws ApiException {
            ApiResponse<LatestImport> localVarResp = latestImportWithHttpInfo(userName);
            return localVarResp.getData();
        }

        /**
         * Execute latestImport request with HTTP info returned
         * @return ApiResponse&lt;LatestImport&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LatestImport> executeWithHttpInfo() throws ApiException {
            return latestImportWithHttpInfo(userName);
        }

        /**
         * Execute latestImport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LatestImport> _callback) throws ApiException {
            return latestImportAsync(userName, _callback);
        }
    }

    /**
     * Get the timestamp of the newest listen submitted by a user in previous imports to ListenBrainz.
     * 
     * @param userName The MusicBrainz ID of the user whose data is needed. (required)
     * @return APIlatestImportRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
     </table>
     */
    public APIlatestImportRequest latestImport(String userName) {
        return new APIlatestImportRequest(userName);
    }
    private okhttp3.Call lbRadioRecordingsForArtistCall(UUID seedArtistMbid, Mode mode, Integer maxSimilarArtists, Integer maxRecordingsPerArtist, Integer popBegin, Integer popEnd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/lb-radio/artist/{seed_artist_mbid}"
            .replace("{" + "seed_artist_mbid" + "}", localVarApiClient.escapeString(seedArtistMbid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        if (maxSimilarArtists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_similar_artists", maxSimilarArtists));
        }

        if (maxRecordingsPerArtist != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_recordings_per_artist", maxRecordingsPerArtist));
        }

        if (popBegin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pop_begin", popBegin));
        }

        if (popEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pop_end", popEnd));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lbRadioRecordingsForArtistValidateBeforeCall(UUID seedArtistMbid, Mode mode, Integer maxSimilarArtists, Integer maxRecordingsPerArtist, Integer popBegin, Integer popEnd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'seedArtistMbid' is set
        if (seedArtistMbid == null) {
            throw new ApiException("Missing the required parameter 'seedArtistMbid' when calling lbRadioRecordingsForArtist(Async)");
        }

        // verify the required parameter 'mode' is set
        if (mode == null) {
            throw new ApiException("Missing the required parameter 'mode' when calling lbRadioRecordingsForArtist(Async)");
        }

        // verify the required parameter 'maxSimilarArtists' is set
        if (maxSimilarArtists == null) {
            throw new ApiException("Missing the required parameter 'maxSimilarArtists' when calling lbRadioRecordingsForArtist(Async)");
        }

        // verify the required parameter 'maxRecordingsPerArtist' is set
        if (maxRecordingsPerArtist == null) {
            throw new ApiException("Missing the required parameter 'maxRecordingsPerArtist' when calling lbRadioRecordingsForArtist(Async)");
        }

        // verify the required parameter 'popBegin' is set
        if (popBegin == null) {
            throw new ApiException("Missing the required parameter 'popBegin' when calling lbRadioRecordingsForArtist(Async)");
        }

        // verify the required parameter 'popEnd' is set
        if (popEnd == null) {
            throw new ApiException("Missing the required parameter 'popEnd' when calling lbRadioRecordingsForArtist(Async)");
        }

        return lbRadioRecordingsForArtistCall(seedArtistMbid, mode, maxSimilarArtists, maxRecordingsPerArtist, popBegin, popEnd, _callback);

    }


    private ApiResponse<Map<String, List<LbRadioRecordingsForArtistValueInner>>> lbRadioRecordingsForArtistWithHttpInfo(UUID seedArtistMbid, Mode mode, Integer maxSimilarArtists, Integer maxRecordingsPerArtist, Integer popBegin, Integer popEnd) throws ApiException {
        okhttp3.Call localVarCall = lbRadioRecordingsForArtistValidateBeforeCall(seedArtistMbid, mode, maxSimilarArtists, maxRecordingsPerArtist, popBegin, popEnd, null);
        Type localVarReturnType = new TypeToken<Map<String, List<LbRadioRecordingsForArtistValueInner>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call lbRadioRecordingsForArtistAsync(UUID seedArtistMbid, Mode mode, Integer maxSimilarArtists, Integer maxRecordingsPerArtist, Integer popBegin, Integer popEnd, final ApiCallback<Map<String, List<LbRadioRecordingsForArtistValueInner>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lbRadioRecordingsForArtistValidateBeforeCall(seedArtistMbid, mode, maxSimilarArtists, maxRecordingsPerArtist, popBegin, popEnd, _callback);
        Type localVarReturnType = new TypeToken<Map<String, List<LbRadioRecordingsForArtistValueInner>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlbRadioRecordingsForArtistRequest {
        private final UUID seedArtistMbid;
        private final Mode mode;
        private final Integer maxSimilarArtists;
        private final Integer maxRecordingsPerArtist;
        private final Integer popBegin;
        private final Integer popEnd;

        private APIlbRadioRecordingsForArtistRequest(UUID seedArtistMbid, Mode mode, Integer maxSimilarArtists, Integer maxRecordingsPerArtist, Integer popBegin, Integer popEnd) {
            this.seedArtistMbid = seedArtistMbid;
            this.mode = mode;
            this.maxSimilarArtists = maxSimilarArtists;
            this.maxRecordingsPerArtist = maxRecordingsPerArtist;
            this.popBegin = popBegin;
            this.popEnd = popEnd;
        }

        /**
         * Build call for lbRadioRecordingsForArtist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing param in request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return lbRadioRecordingsForArtistCall(seedArtistMbid, mode, maxSimilarArtists, maxRecordingsPerArtist, popBegin, popEnd, _callback);
        }

        /**
         * Execute lbRadioRecordingsForArtist request
         * @return Map&lt;String, List&lt;LbRadioRecordingsForArtistValueInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing param in request. </td><td>  -  </td></tr>
         </table>
         */
        public Map<String, List<LbRadioRecordingsForArtistValueInner>> execute() throws ApiException {
            ApiResponse<Map<String, List<LbRadioRecordingsForArtistValueInner>>> localVarResp = lbRadioRecordingsForArtistWithHttpInfo(seedArtistMbid, mode, maxSimilarArtists, maxRecordingsPerArtist, popBegin, popEnd);
            return localVarResp.getData();
        }

        /**
         * Execute lbRadioRecordingsForArtist request with HTTP info returned
         * @return ApiResponse&lt;Map&lt;String, List&lt;LbRadioRecordingsForArtistValueInner&gt;&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing param in request. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Map<String, List<LbRadioRecordingsForArtistValueInner>>> executeWithHttpInfo() throws ApiException {
            return lbRadioRecordingsForArtistWithHttpInfo(seedArtistMbid, mode, maxSimilarArtists, maxRecordingsPerArtist, popBegin, popEnd);
        }

        /**
         * Execute lbRadioRecordingsForArtist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing param in request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Map<String, List<LbRadioRecordingsForArtistValueInner>>> _callback) throws ApiException {
            return lbRadioRecordingsForArtistAsync(seedArtistMbid, mode, maxSimilarArtists, maxRecordingsPerArtist, popBegin, popEnd, _callback);
        }
    }

    /**
     * Get recordings for use in LB radio with the given seed artist. The endpoint returns a dict of all the similar artists, including the seed artist. For each artists, there will be a list of dicts that contain recording_mbid, similar_artist_mbid and total_listen_count.
     * 
     * @param seedArtistMbid  (required)
     * @param mode The mode that LB radio should use. Must be easy, medium or hard. (required)
     * @param maxSimilarArtists The maximum number of similar artists to return recordings for. (required)
     * @param maxRecordingsPerArtist The maximum number of recordings to return for each artist. If there are aren’t enough recordings, all available recordings will be returned. (required)
     * @param popBegin Popularity range percentage lower bound. A popularity range is given to narrow down the recordings into a smaller target group. The most popular recording(s) on LB have a pop percent of 100. The least popular recordings have a score of 0. This range is not coupled to the specified mode, but the mode would often determine the popularity range, so that less popular recordings can be returned on the medium and harder modes. (required)
     * @param popEnd Popularity range percentage upper bound. (required)
     * @return APIlbRadioRecordingsForArtistRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid or missing param in request. </td><td>  -  </td></tr>
     </table>
     */
    public APIlbRadioRecordingsForArtistRequest lbRadioRecordingsForArtist(UUID seedArtistMbid, Mode mode, Integer maxSimilarArtists, Integer maxRecordingsPerArtist, Integer popBegin, Integer popEnd) {
        return new APIlbRadioRecordingsForArtistRequest(seedArtistMbid, mode, maxSimilarArtists, maxRecordingsPerArtist, popBegin, popEnd);
    }
    private okhttp3.Call lbRadioTagsCall(String tag, Integer popBegin, Integer popEnd, Integer count, Operator operator, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/lb-radio/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (operator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operator", operator));
        }

        if (popBegin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pop_begin", popBegin));
        }

        if (popEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pop_end", popEnd));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lbRadioTagsValidateBeforeCall(String tag, Integer popBegin, Integer popEnd, Integer count, Operator operator, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling lbRadioTags(Async)");
        }

        // verify the required parameter 'popBegin' is set
        if (popBegin == null) {
            throw new ApiException("Missing the required parameter 'popBegin' when calling lbRadioTags(Async)");
        }

        // verify the required parameter 'popEnd' is set
        if (popEnd == null) {
            throw new ApiException("Missing the required parameter 'popEnd' when calling lbRadioTags(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling lbRadioTags(Async)");
        }

        return lbRadioTagsCall(tag, popBegin, popEnd, count, operator, _callback);

    }


    private ApiResponse<List<LbRadioTagsInner>> lbRadioTagsWithHttpInfo(String tag, Integer popBegin, Integer popEnd, Integer count, Operator operator) throws ApiException {
        okhttp3.Call localVarCall = lbRadioTagsValidateBeforeCall(tag, popBegin, popEnd, count, operator, null);
        Type localVarReturnType = new TypeToken<List<LbRadioTagsInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call lbRadioTagsAsync(String tag, Integer popBegin, Integer popEnd, Integer count, Operator operator, final ApiCallback<List<LbRadioTagsInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lbRadioTagsValidateBeforeCall(tag, popBegin, popEnd, count, operator, _callback);
        Type localVarReturnType = new TypeToken<List<LbRadioTagsInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlbRadioTagsRequest {
        private final String tag;
        private final Integer popBegin;
        private final Integer popEnd;
        private final Integer count;
        private Operator operator;

        private APIlbRadioTagsRequest(String tag, Integer popBegin, Integer popEnd, Integer count) {
            this.tag = tag;
            this.popBegin = popBegin;
            this.popEnd = popEnd;
            this.count = count;
        }

        /**
         * Set operator
         * @param operator Specify AND to retrieve recordings that have all the tags, otherwise specify OR to retrieve recordings that have any one of the tags. (optional)
         * @return APIlbRadioTagsRequest
         */
        public APIlbRadioTagsRequest operator(Operator operator) {
            this.operator = operator;
            return this;
        }

        /**
         * Build call for lbRadioTags
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing param in request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return lbRadioTagsCall(tag, popBegin, popEnd, count, operator, _callback);
        }

        /**
         * Execute lbRadioTags request
         * @return List&lt;LbRadioTagsInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing param in request. </td><td>  -  </td></tr>
         </table>
         */
        public List<LbRadioTagsInner> execute() throws ApiException {
            ApiResponse<List<LbRadioTagsInner>> localVarResp = lbRadioTagsWithHttpInfo(tag, popBegin, popEnd, count, operator);
            return localVarResp.getData();
        }

        /**
         * Execute lbRadioTags request with HTTP info returned
         * @return ApiResponse&lt;List&lt;LbRadioTagsInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing param in request. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<LbRadioTagsInner>> executeWithHttpInfo() throws ApiException {
            return lbRadioTagsWithHttpInfo(tag, popBegin, popEnd, count, operator);
        }

        /**
         * Execute lbRadioTags request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid or missing param in request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<LbRadioTagsInner>> _callback) throws ApiException {
            return lbRadioTagsAsync(tag, popBegin, popEnd, count, operator, _callback);
        }
    }

    /**
     * Get recordings for use in LB radio with the specified tags that match the requested criteria.
     * 
     * @param tag The MusicBrainz tag to fetch recordings for, this parameter can be specified multiple times. if more than one tag is specified, the operator param should also be specified. (required)
     * @param popBegin Popularity range percentage lower bound. A popularity range is given to narrow down the recordings into a smaller target group. The most popular recording(s) on LB have a pop percent of 100. The least popular recordings have a score of 0. This range is not coupled to the specified mode, but the mode would often determine the popularity range, so that less popular recordings can be returned on the medium and harder modes. (required)
     * @param popEnd Popularity range percentage upper bound. (required)
     * @param count Optional, number of listens to return. (required)
     * @return APIlbRadioTagsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid or missing param in request. </td><td>  -  </td></tr>
     </table>
     */
    public APIlbRadioTagsRequest lbRadioTags(String tag, Integer popBegin, Integer popEnd, Integer count) {
        return new APIlbRadioTagsRequest(tag, popBegin, popEnd, count);
    }
    private okhttp3.Call listenCountForUserCall(String userName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/user/{user_name}/listen-count"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listenCountForUserValidateBeforeCall(String userName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling listenCountForUser(Async)");
        }

        return listenCountForUserCall(userName, _callback);

    }


    private ApiResponse<ListenCountForUser> listenCountForUserWithHttpInfo(String userName) throws ApiException {
        okhttp3.Call localVarCall = listenCountForUserValidateBeforeCall(userName, null);
        Type localVarReturnType = new TypeToken<ListenCountForUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listenCountForUserAsync(String userName, final ApiCallback<ListenCountForUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = listenCountForUserValidateBeforeCall(userName, _callback);
        Type localVarReturnType = new TypeToken<ListenCountForUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistenCountForUserRequest {
        private final String userName;

        private APIlistenCountForUserRequest(String userName) {
            this.userName = userName;
        }

        /**
         * Build call for listenCountForUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have listen counts! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listenCountForUserCall(userName, _callback);
        }

        /**
         * Execute listenCountForUser request
         * @return ListenCountForUser
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have listen counts! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ListenCountForUser execute() throws ApiException {
            ApiResponse<ListenCountForUser> localVarResp = listenCountForUserWithHttpInfo(userName);
            return localVarResp.getData();
        }

        /**
         * Execute listenCountForUser request with HTTP info returned
         * @return ApiResponse&lt;ListenCountForUser&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have listen counts! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListenCountForUser> executeWithHttpInfo() throws ApiException {
            return listenCountForUserWithHttpInfo(userName);
        }

        /**
         * Execute listenCountForUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have listen counts! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListenCountForUser> _callback) throws ApiException {
            return listenCountForUserAsync(userName, _callback);
        }
    }

    /**
     * Get the number of listens for a user &#39;user_name&#39;.
     * 
     * @param userName  (required)
     * @return APIlistenCountForUserRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have listen counts! </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIlistenCountForUserRequest listenCountForUser(String userName) {
        return new APIlistenCountForUserRequest(userName);
    }
    private okhttp3.Call listensForUserCall(String userName, Integer maxTs, Integer minTs, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/user/{user_name}/listens"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxTs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_ts", maxTs));
        }

        if (minTs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_ts", minTs));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listensForUserValidateBeforeCall(String userName, Integer maxTs, Integer minTs, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling listensForUser(Async)");
        }

        return listensForUserCall(userName, maxTs, minTs, count, _callback);

    }


    private ApiResponse<ListensForUser> listensForUserWithHttpInfo(String userName, Integer maxTs, Integer minTs, Integer count) throws ApiException {
        okhttp3.Call localVarCall = listensForUserValidateBeforeCall(userName, maxTs, minTs, count, null);
        Type localVarReturnType = new TypeToken<ListensForUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listensForUserAsync(String userName, Integer maxTs, Integer minTs, Integer count, final ApiCallback<ListensForUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = listensForUserValidateBeforeCall(userName, maxTs, minTs, count, _callback);
        Type localVarReturnType = new TypeToken<ListensForUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistensForUserRequest {
        private final String userName;
        private Integer maxTs;
        private Integer minTs;
        private Integer count;

        private APIlistensForUserRequest(String userName) {
            this.userName = userName;
        }

        /**
         * Set maxTs
         * @param maxTs If you specify a &#39;max_ts&#39; timestamp, listens with listened_at less than (but not including) this value will be returned. (optional)
         * @return APIlistensForUserRequest
         */
        public APIlistensForUserRequest maxTs(Integer maxTs) {
            this.maxTs = maxTs;
            return this;
        }

        /**
         * Set minTs
         * @param minTs If you specify a &#39;min_ts&#39; timestamp, listens with listened_at greater than (but not including) this value will be returned. (optional)
         * @return APIlistensForUserRequest
         */
        public APIlistensForUserRequest minTs(Integer minTs) {
            this.minTs = minTs;
            return this;
        }

        /**
         * Set count
         * @param count Optional, number of listens to return. (optional, default to 25)
         * @return APIlistensForUserRequest
         */
        public APIlistensForUserRequest count(Integer count) {
            this.count = count;
            return this;
        }

        /**
         * Build call for listensForUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listensForUserCall(userName, maxTs, minTs, count, _callback);
        }

        /**
         * Execute listensForUser request
         * @return ListensForUser
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ListensForUser execute() throws ApiException {
            ApiResponse<ListensForUser> localVarResp = listensForUserWithHttpInfo(userName, maxTs, minTs, count);
            return localVarResp.getData();
        }

        /**
         * Execute listensForUser request with HTTP info returned
         * @return ApiResponse&lt;ListensForUser&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListensForUser> executeWithHttpInfo() throws ApiException {
            return listensForUserWithHttpInfo(userName, maxTs, minTs, count);
        }

        /**
         * Execute listensForUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListensForUser> _callback) throws ApiException {
            return listensForUserAsync(userName, maxTs, minTs, count, _callback);
        }
    }

    /**
     * Get listens for user &#39;user_name&#39;.
     * 
     * @param userName  (required)
     * @return APIlistensForUserRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIlistensForUserRequest listensForUser(String userName) {
        return new APIlistensForUserRequest(userName);
    }
    private okhttp3.Call playingNowForUserCall(String userName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/user/{user_name}/playing-now"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playingNowForUserValidateBeforeCall(String userName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling playingNowForUser(Async)");
        }

        return playingNowForUserCall(userName, _callback);

    }


    private ApiResponse<PlayingNowForUser> playingNowForUserWithHttpInfo(String userName) throws ApiException {
        okhttp3.Call localVarCall = playingNowForUserValidateBeforeCall(userName, null);
        Type localVarReturnType = new TypeToken<PlayingNowForUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call playingNowForUserAsync(String userName, final ApiCallback<PlayingNowForUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = playingNowForUserValidateBeforeCall(userName, _callback);
        Type localVarReturnType = new TypeToken<PlayingNowForUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIplayingNowForUserRequest {
        private final String userName;

        private APIplayingNowForUserRequest(String userName) {
            this.userName = userName;
        }

        /**
         * Build call for playingNowForUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return playingNowForUserCall(userName, _callback);
        }

        /**
         * Execute playingNowForUser request
         * @return PlayingNowForUser
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public PlayingNowForUser execute() throws ApiException {
            ApiResponse<PlayingNowForUser> localVarResp = playingNowForUserWithHttpInfo(userName);
            return localVarResp.getData();
        }

        /**
         * Execute playingNowForUser request with HTTP info returned
         * @return ApiResponse&lt;PlayingNowForUser&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PlayingNowForUser> executeWithHttpInfo() throws ApiException {
            return playingNowForUserWithHttpInfo(userName);
        }

        /**
         * Execute playingNowForUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PlayingNowForUser> _callback) throws ApiException {
            return playingNowForUserAsync(userName, _callback);
        }
    }

    /**
     * Get the listen being played right now for user &#39;user_name&#39;
     * 
     * @param userName  (required)
     * @return APIplayingNowForUserRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIplayingNowForUserRequest playingNowForUser(String userName) {
        return new APIplayingNowForUserRequest(userName);
    }
    private okhttp3.Call recommendationPlaylistsForUserCall(String playlistUserName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/user/{playlist_user_name}/playlists/recommendations"
            .replace("{" + "playlist_user_name" + "}", localVarApiClient.escapeString(playlistUserName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recommendationPlaylistsForUserValidateBeforeCall(String playlistUserName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistUserName' is set
        if (playlistUserName == null) {
            throw new ApiException("Missing the required parameter 'playlistUserName' when calling recommendationPlaylistsForUser(Async)");
        }

        return recommendationPlaylistsForUserCall(playlistUserName, _callback);

    }


    private ApiResponse<Playlists> recommendationPlaylistsForUserWithHttpInfo(String playlistUserName) throws ApiException {
        okhttp3.Call localVarCall = recommendationPlaylistsForUserValidateBeforeCall(playlistUserName, null);
        Type localVarReturnType = new TypeToken<Playlists>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call recommendationPlaylistsForUserAsync(String playlistUserName, final ApiCallback<Playlists> _callback) throws ApiException {

        okhttp3.Call localVarCall = recommendationPlaylistsForUserValidateBeforeCall(playlistUserName, _callback);
        Type localVarReturnType = new TypeToken<Playlists>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIrecommendationPlaylistsForUserRequest {
        private final String playlistUserName;

        private APIrecommendationPlaylistsForUserRequest(String playlistUserName) {
            this.playlistUserName = playlistUserName;
        }

        /**
         * Build call for recommendationPlaylistsForUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return recommendationPlaylistsForUserCall(playlistUserName, _callback);
        }

        /**
         * Execute recommendationPlaylistsForUser request
         * @return Playlists
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public Playlists execute() throws ApiException {
            ApiResponse<Playlists> localVarResp = recommendationPlaylistsForUserWithHttpInfo(playlistUserName);
            return localVarResp.getData();
        }

        /**
         * Execute recommendationPlaylistsForUser request with HTTP info returned
         * @return ApiResponse&lt;Playlists&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Playlists> executeWithHttpInfo() throws ApiException {
            return recommendationPlaylistsForUserWithHttpInfo(playlistUserName);
        }

        /**
         * Execute recommendationPlaylistsForUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Playlists> _callback) throws ApiException {
            return recommendationPlaylistsForUserAsync(playlistUserName, _callback);
        }
    }

    /**
     * Fetch recommendation playlist metadata in JSPF format without recordings for &#39;playlist_user_name&#39;. This endpoint only lists playlists that are to be shown on the listenbrainz.org recommendations pages.
     * 
     * @param playlistUserName  (required)
     * @return APIrecommendationPlaylistsForUserRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIrecommendationPlaylistsForUserRequest recommendationPlaylistsForUser(String playlistUserName) {
        return new APIrecommendationPlaylistsForUserRequest(playlistUserName);
    }
    private okhttp3.Call searchPlaylistForUserCall(String playlistUserName, String query, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/user/{playlist_user_name}/playlists/search"
            .replace("{" + "playlist_user_name" + "}", localVarApiClient.escapeString(playlistUserName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchPlaylistForUserValidateBeforeCall(String playlistUserName, String query, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistUserName' is set
        if (playlistUserName == null) {
            throw new ApiException("Missing the required parameter 'playlistUserName' when calling searchPlaylistForUser(Async)");
        }

        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchPlaylistForUser(Async)");
        }

        return searchPlaylistForUserCall(playlistUserName, query, count, offset, _callback);

    }


    private ApiResponse<Playlists> searchPlaylistForUserWithHttpInfo(String playlistUserName, String query, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = searchPlaylistForUserValidateBeforeCall(playlistUserName, query, count, offset, null);
        Type localVarReturnType = new TypeToken<Playlists>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchPlaylistForUserAsync(String playlistUserName, String query, Integer count, Integer offset, final ApiCallback<Playlists> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchPlaylistForUserValidateBeforeCall(playlistUserName, query, count, offset, _callback);
        Type localVarReturnType = new TypeToken<Playlists>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsearchPlaylistForUserRequest {
        private final String playlistUserName;
        private final String query;
        private Integer count;
        private Integer offset;

        private APIsearchPlaylistForUserRequest(String playlistUserName, String query) {
            this.playlistUserName = playlistUserName;
            this.query = query;
        }

        /**
         * Set count
         * @param count The number of playlists to return (for pagination). (optional, default to 25)
         * @return APIsearchPlaylistForUserRequest
         */
        public APIsearchPlaylistForUserRequest count(Integer count) {
            this.count = count;
            return this;
        }

        /**
         * Set offset
         * @param offset The offset of into the list of playlists to return (for pagination). (optional)
         * @return APIsearchPlaylistForUserRequest
         */
        public APIsearchPlaylistForUserRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Build call for searchPlaylistForUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchPlaylistForUserCall(playlistUserName, query, count, offset, _callback);
        }

        /**
         * Execute searchPlaylistForUser request
         * @return Playlists
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public Playlists execute() throws ApiException {
            ApiResponse<Playlists> localVarResp = searchPlaylistForUserWithHttpInfo(playlistUserName, query, count, offset);
            return localVarResp.getData();
        }

        /**
         * Execute searchPlaylistForUser request with HTTP info returned
         * @return ApiResponse&lt;Playlists&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Playlists> executeWithHttpInfo() throws ApiException {
            return searchPlaylistForUserWithHttpInfo(playlistUserName, query, count, offset);
        }

        /**
         * Execute searchPlaylistForUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Playlists> _callback) throws ApiException {
            return searchPlaylistForUserAsync(playlistUserName, query, count, offset, _callback);
        }
    }

    /**
     * Search for a playlist by name for a user.
     * 
     * @param playlistUserName  (required)
     * @param query  (required)
     * @return APIsearchPlaylistForUserRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIsearchPlaylistForUserRequest searchPlaylistForUser(String playlistUserName, String query) {
        return new APIsearchPlaylistForUserRequest(playlistUserName, query);
    }
    private okhttp3.Call searchUsersCall(String searchTerm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/search/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_term", searchTerm));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchUsersValidateBeforeCall(String searchTerm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchTerm' is set
        if (searchTerm == null) {
            throw new ApiException("Missing the required parameter 'searchTerm' when calling searchUsers(Async)");
        }

        return searchUsersCall(searchTerm, _callback);

    }


    private ApiResponse<SearchUsers> searchUsersWithHttpInfo(String searchTerm) throws ApiException {
        okhttp3.Call localVarCall = searchUsersValidateBeforeCall(searchTerm, null);
        Type localVarReturnType = new TypeToken<SearchUsers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchUsersAsync(String searchTerm, final ApiCallback<SearchUsers> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchUsersValidateBeforeCall(searchTerm, _callback);
        Type localVarReturnType = new TypeToken<SearchUsers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsearchUsersRequest {
        private final String searchTerm;

        private APIsearchUsersRequest(String searchTerm) {
            this.searchTerm = searchTerm;
        }

        /**
         * Build call for searchUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchUsersCall(searchTerm, _callback);
        }

        /**
         * Execute searchUsers request
         * @return SearchUsers
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public SearchUsers execute() throws ApiException {
            ApiResponse<SearchUsers> localVarResp = searchUsersWithHttpInfo(searchTerm);
            return localVarResp.getData();
        }

        /**
         * Execute searchUsers request with HTTP info returned
         * @return ApiResponse&lt;SearchUsers&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SearchUsers> executeWithHttpInfo() throws ApiException {
            return searchUsersWithHttpInfo(searchTerm);
        }

        /**
         * Execute searchUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SearchUsers> _callback) throws ApiException {
            return searchUsersAsync(searchTerm, _callback);
        }
    }

    /**
     * Search a ListenBrainz-registered user.
     * 
     * @param searchTerm Input on which search operation is to be performed. (required)
     * @return APIsearchUsersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public APIsearchUsersRequest searchUsers(String searchTerm) {
        return new APIsearchUsersRequest(searchTerm);
    }
    private okhttp3.Call servicesForUserCall(String userName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/user/{user_name}/services"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesForUserValidateBeforeCall(String userName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling servicesForUser(Async)");
        }

        return servicesForUserCall(userName, _callback);

    }


    private ApiResponse<ServicesForUser> servicesForUserWithHttpInfo(String userName) throws ApiException {
        okhttp3.Call localVarCall = servicesForUserValidateBeforeCall(userName, null);
        Type localVarReturnType = new TypeToken<ServicesForUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call servicesForUserAsync(String userName, final ApiCallback<ServicesForUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesForUserValidateBeforeCall(userName, _callback);
        Type localVarReturnType = new TypeToken<ServicesForUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIservicesForUserRequest {
        private final String userName;

        private APIservicesForUserRequest(String userName) {
            this.userName = userName;
        }

        /**
         * Build call for servicesForUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you do not have permissions to view this user&#39;s information. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return servicesForUserCall(userName, _callback);
        }

        /**
         * Execute servicesForUser request
         * @return ServicesForUser
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you do not have permissions to view this user&#39;s information. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ServicesForUser execute() throws ApiException {
            ApiResponse<ServicesForUser> localVarResp = servicesForUserWithHttpInfo(userName);
            return localVarResp.getData();
        }

        /**
         * Execute servicesForUser request with HTTP info returned
         * @return ApiResponse&lt;ServicesForUser&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you do not have permissions to view this user&#39;s information. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ServicesForUser> executeWithHttpInfo() throws ApiException {
            return servicesForUserWithHttpInfo(userName);
        }

        /**
         * Execute servicesForUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you do not have permissions to view this user&#39;s information. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ServicesForUser> _callback) throws ApiException {
            return servicesForUserAsync(userName, _callback);
        }
    }

    /**
     * Get list of services which are connected to a given user&#39;s account.
     * 
     * @param userName  (required)
     * @return APIservicesForUserRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, you do not have permissions to view this user&#39;s information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIservicesForUserRequest servicesForUser(String userName) {
        return new APIservicesForUserRequest(userName);
    }
    private okhttp3.Call similarUsersForUserCall(String userName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/user/{user_name}/similar-users"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call similarUsersForUserValidateBeforeCall(String userName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling similarUsersForUser(Async)");
        }

        return similarUsersForUserCall(userName, _callback);

    }


    private ApiResponse<SimilarUsersForUser> similarUsersForUserWithHttpInfo(String userName) throws ApiException {
        okhttp3.Call localVarCall = similarUsersForUserValidateBeforeCall(userName, null);
        Type localVarReturnType = new TypeToken<SimilarUsersForUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call similarUsersForUserAsync(String userName, final ApiCallback<SimilarUsersForUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = similarUsersForUserValidateBeforeCall(userName, _callback);
        Type localVarReturnType = new TypeToken<SimilarUsersForUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsimilarUsersForUserRequest {
        private final String userName;

        private APIsimilarUsersForUserRequest(String userName) {
            this.userName = userName;
        }

        /**
         * Build call for similarUsersForUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return similarUsersForUserCall(userName, _callback);
        }

        /**
         * Execute similarUsersForUser request
         * @return SimilarUsersForUser
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public SimilarUsersForUser execute() throws ApiException {
            ApiResponse<SimilarUsersForUser> localVarResp = similarUsersForUserWithHttpInfo(userName);
            return localVarResp.getData();
        }

        /**
         * Execute similarUsersForUser request with HTTP info returned
         * @return ApiResponse&lt;SimilarUsersForUser&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SimilarUsersForUser> executeWithHttpInfo() throws ApiException {
            return similarUsersForUserWithHttpInfo(userName);
        }

        /**
         * Execute similarUsersForUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SimilarUsersForUser> _callback) throws ApiException {
            return similarUsersForUserAsync(userName, _callback);
        }
    }

    /**
     * Get the listen being played right now for user &#39;user_name&#39;.
     * 
     * @param userName  (required)
     * @return APIsimilarUsersForUserRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIsimilarUsersForUserRequest similarUsersForUser(String userName) {
        return new APIsimilarUsersForUserRequest(userName);
    }
    private okhttp3.Call similarityOfUserForUserCall(String userName, String otherUserName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/user/{user_name}/similar-to/{other_user_name}"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()))
            .replace("{" + "other_user_name" + "}", localVarApiClient.escapeString(otherUserName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call similarityOfUserForUserValidateBeforeCall(String userName, String otherUserName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling similarityOfUserForUser(Async)");
        }

        // verify the required parameter 'otherUserName' is set
        if (otherUserName == null) {
            throw new ApiException("Missing the required parameter 'otherUserName' when calling similarityOfUserForUser(Async)");
        }

        return similarityOfUserForUserCall(userName, otherUserName, _callback);

    }


    private ApiResponse<SimilarityOfUserForUser> similarityOfUserForUserWithHttpInfo(String userName, String otherUserName) throws ApiException {
        okhttp3.Call localVarCall = similarityOfUserForUserValidateBeforeCall(userName, otherUserName, null);
        Type localVarReturnType = new TypeToken<SimilarityOfUserForUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call similarityOfUserForUserAsync(String userName, String otherUserName, final ApiCallback<SimilarityOfUserForUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = similarityOfUserForUserValidateBeforeCall(userName, otherUserName, _callback);
        Type localVarReturnType = new TypeToken<SimilarityOfUserForUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsimilarityOfUserForUserRequest {
        private final String userName;
        private final String otherUserName;

        private APIsimilarityOfUserForUserRequest(String userName, String otherUserName) {
            this.userName = userName;
            this.otherUserName = otherUserName;
        }

        /**
         * Build call for similarityOfUserForUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return similarityOfUserForUserCall(userName, otherUserName, _callback);
        }

        /**
         * Execute similarityOfUserForUser request
         * @return SimilarityOfUserForUser
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public SimilarityOfUserForUser execute() throws ApiException {
            ApiResponse<SimilarityOfUserForUser> localVarResp = similarityOfUserForUserWithHttpInfo(userName, otherUserName);
            return localVarResp.getData();
        }

        /**
         * Execute similarityOfUserForUser request with HTTP info returned
         * @return ApiResponse&lt;SimilarityOfUserForUser&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SimilarityOfUserForUser> executeWithHttpInfo() throws ApiException {
            return similarityOfUserForUserWithHttpInfo(userName, otherUserName);
        }

        /**
         * Execute similarityOfUserForUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SimilarityOfUserForUser> _callback) throws ApiException {
            return similarityOfUserForUserAsync(userName, otherUserName, _callback);
        }
    }

    /**
     * Get the similarity of &#39;user_name&#39; and &#39;other_user_name&#39;, based on their listening history.
     * 
     * @param userName  (required)
     * @param otherUserName  (required)
     * @return APIsimilarityOfUserForUserRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIsimilarityOfUserForUserRequest similarityOfUserForUser(String userName, String otherUserName) {
        return new APIsimilarityOfUserForUserRequest(userName, otherUserName);
    }
    private okhttp3.Call submitListensCall(SubmitListens submitListens, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = submitListens;

        // create path and map variables
        String localVarPath = "/1/submit-listens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitListensValidateBeforeCall(SubmitListens submitListens, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'submitListens' is set
        if (submitListens == null) {
            throw new ApiException("Missing the required parameter 'submitListens' when calling submitListens(Async)");
        }

        return submitListensCall(submitListens, _callback);

    }


    private ApiResponse<Void> submitListensWithHttpInfo(SubmitListens submitListens) throws ApiException {
        okhttp3.Call localVarCall = submitListensValidateBeforeCall(submitListens, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call submitListensAsync(SubmitListens submitListens, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitListensValidateBeforeCall(submitListens, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIsubmitListensRequest {
        private final SubmitListens submitListens;

        private APIsubmitListensRequest(SubmitListens submitListens) {
            this.submitListens = submitListens;
        }

        /**
         * Build call for submitListens
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Listen(s) accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return submitListensCall(submitListens, _callback);
        }

        /**
         * Execute submitListens request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Listen(s) accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            submitListensWithHttpInfo(submitListens);
        }

        /**
         * Execute submitListens request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Listen(s) accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return submitListensWithHttpInfo(submitListens);
        }

        /**
         * Execute submitListens request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Listen(s) accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return submitListensAsync(submitListens, _callback);
        }
    }

    /**
     * Submit listens to the server.
     * 
     * @param submitListens  (required)
     * @return APIsubmitListensRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listen(s) accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
     </table>
     */
    public APIsubmitListensRequest submitListens(SubmitListens submitListens) {
        return new APIsubmitListensRequest(submitListens);
    }
    private okhttp3.Call validateTokenCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/validate-token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateTokenValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return validateTokenCall(_callback);

    }


    private ApiResponse<ValidateToken> validateTokenWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = validateTokenValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ValidateToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call validateTokenAsync(final ApiCallback<ValidateToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateTokenValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ValidateToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIvalidateTokenRequest {

        private APIvalidateTokenRequest() {
        }

        /**
         * Build call for validateToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The user token is valid/invalid. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> No token was sent to the endpoint. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return validateTokenCall(_callback);
        }

        /**
         * Execute validateToken request
         * @return ValidateToken
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The user token is valid/invalid. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> No token was sent to the endpoint. </td><td>  -  </td></tr>
         </table>
         */
        public ValidateToken execute() throws ApiException {
            ApiResponse<ValidateToken> localVarResp = validateTokenWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute validateToken request with HTTP info returned
         * @return ApiResponse&lt;ValidateToken&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The user token is valid/invalid. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> No token was sent to the endpoint. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ValidateToken> executeWithHttpInfo() throws ApiException {
            return validateTokenWithHttpInfo();
        }

        /**
         * Execute validateToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The user token is valid/invalid. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> No token was sent to the endpoint. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ValidateToken> _callback) throws ApiException {
            return validateTokenAsync(_callback);
        }
    }

    /**
     * Check whether a User Token is a valid entry in the database.
     * 
     * @return APIvalidateTokenRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user token is valid/invalid. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No token was sent to the endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public APIvalidateTokenRequest validateToken() {
        return new APIvalidateTokenRequest();
    }
}
