/*
 * ListenBrainz Swagger - OpenAPI 3.0
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.hihn.listenbrainz;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.hihn.listenbrainz.ColorPayloadReleasesInnerRecordingsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.hihn.listenbrainz.JSON;

/**
 * ColorPayloadReleasesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-28T21:48:15.256271+02:00[Europe/Berlin]", comments = "Generator version: 7.7.0")
public class ColorPayloadReleasesInner {
  public static final String SERIALIZED_NAME_ARTIST_NAME = "artist_name";
  @SerializedName(SERIALIZED_NAME_ARTIST_NAME)
  private String artistName;

  public static final String SERIALIZED_NAME_CAA_ID = "caa_id";
  @SerializedName(SERIALIZED_NAME_CAA_ID)
  private Integer caaId;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private List<Integer> color = new ArrayList<>();

  public static final String SERIALIZED_NAME_DIST = "dist";
  @SerializedName(SERIALIZED_NAME_DIST)
  private Integer dist;

  public static final String SERIALIZED_NAME_RECORDINGS = "recordings";
  @SerializedName(SERIALIZED_NAME_RECORDINGS)
  private List<ColorPayloadReleasesInnerRecordingsInner> recordings = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELEASE_MBID = "release_mbid";
  @SerializedName(SERIALIZED_NAME_RELEASE_MBID)
  private UUID releaseMbid;

  public static final String SERIALIZED_NAME_RELEASE_NAME = "release_name";
  @SerializedName(SERIALIZED_NAME_RELEASE_NAME)
  private String releaseName;

  public ColorPayloadReleasesInner() {
  }

  public ColorPayloadReleasesInner artistName(String artistName) {
    this.artistName = artistName;
    return this;
  }

  /**
   * Get artistName
   * @return artistName
   */
  @javax.annotation.Nullable
  public String getArtistName() {
    return artistName;
  }

  public void setArtistName(String artistName) {
    this.artistName = artistName;
  }


  public ColorPayloadReleasesInner caaId(Integer caaId) {
    this.caaId = caaId;
    return this;
  }

  /**
   * Get caaId
   * @return caaId
   */
  @javax.annotation.Nullable
  public Integer getCaaId() {
    return caaId;
  }

  public void setCaaId(Integer caaId) {
    this.caaId = caaId;
  }


  public ColorPayloadReleasesInner color(List<Integer> color) {
    this.color = color;
    return this;
  }

  public ColorPayloadReleasesInner addColorItem(Integer colorItem) {
    if (this.color == null) {
      this.color = new ArrayList<>();
    }
    this.color.add(colorItem);
    return this;
  }

  /**
   * Get color
   * @return color
   */
  @javax.annotation.Nullable
  public List<Integer> getColor() {
    return color;
  }

  public void setColor(List<Integer> color) {
    this.color = color;
  }


  public ColorPayloadReleasesInner dist(Integer dist) {
    this.dist = dist;
    return this;
  }

  /**
   * Get dist
   * @return dist
   */
  @javax.annotation.Nullable
  public Integer getDist() {
    return dist;
  }

  public void setDist(Integer dist) {
    this.dist = dist;
  }


  public ColorPayloadReleasesInner recordings(List<ColorPayloadReleasesInnerRecordingsInner> recordings) {
    this.recordings = recordings;
    return this;
  }

  public ColorPayloadReleasesInner addRecordingsItem(ColorPayloadReleasesInnerRecordingsInner recordingsItem) {
    if (this.recordings == null) {
      this.recordings = new ArrayList<>();
    }
    this.recordings.add(recordingsItem);
    return this;
  }

  /**
   * Get recordings
   * @return recordings
   */
  @javax.annotation.Nullable
  public List<ColorPayloadReleasesInnerRecordingsInner> getRecordings() {
    return recordings;
  }

  public void setRecordings(List<ColorPayloadReleasesInnerRecordingsInner> recordings) {
    this.recordings = recordings;
  }


  public ColorPayloadReleasesInner releaseMbid(UUID releaseMbid) {
    this.releaseMbid = releaseMbid;
    return this;
  }

  /**
   * Get releaseMbid
   * @return releaseMbid
   */
  @javax.annotation.Nullable
  public UUID getReleaseMbid() {
    return releaseMbid;
  }

  public void setReleaseMbid(UUID releaseMbid) {
    this.releaseMbid = releaseMbid;
  }


  public ColorPayloadReleasesInner releaseName(String releaseName) {
    this.releaseName = releaseName;
    return this;
  }

  /**
   * Get releaseName
   * @return releaseName
   */
  @javax.annotation.Nullable
  public String getReleaseName() {
    return releaseName;
  }

  public void setReleaseName(String releaseName) {
    this.releaseName = releaseName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ColorPayloadReleasesInner colorPayloadReleasesInner = (ColorPayloadReleasesInner) o;
    return Objects.equals(this.artistName, colorPayloadReleasesInner.artistName) &&
        Objects.equals(this.caaId, colorPayloadReleasesInner.caaId) &&
        Objects.equals(this.color, colorPayloadReleasesInner.color) &&
        Objects.equals(this.dist, colorPayloadReleasesInner.dist) &&
        Objects.equals(this.recordings, colorPayloadReleasesInner.recordings) &&
        Objects.equals(this.releaseMbid, colorPayloadReleasesInner.releaseMbid) &&
        Objects.equals(this.releaseName, colorPayloadReleasesInner.releaseName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artistName, caaId, color, dist, recordings, releaseMbid, releaseName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ColorPayloadReleasesInner {\n");
    sb.append("    artistName: ").append(toIndentedString(artistName)).append("\n");
    sb.append("    caaId: ").append(toIndentedString(caaId)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    dist: ").append(toIndentedString(dist)).append("\n");
    sb.append("    recordings: ").append(toIndentedString(recordings)).append("\n");
    sb.append("    releaseMbid: ").append(toIndentedString(releaseMbid)).append("\n");
    sb.append("    releaseName: ").append(toIndentedString(releaseName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("artist_name");
    openapiFields.add("caa_id");
    openapiFields.add("color");
    openapiFields.add("dist");
    openapiFields.add("recordings");
    openapiFields.add("release_mbid");
    openapiFields.add("release_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ColorPayloadReleasesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ColorPayloadReleasesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ColorPayloadReleasesInner is not found in the empty JSON string", ColorPayloadReleasesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ColorPayloadReleasesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ColorPayloadReleasesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("artist_name") != null && !jsonObj.get("artist_name").isJsonNull()) && !jsonObj.get("artist_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artist_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artist_name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull() && !jsonObj.get("color").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be an array in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      if (jsonObj.get("recordings") != null && !jsonObj.get("recordings").isJsonNull()) {
        JsonArray jsonArrayrecordings = jsonObj.getAsJsonArray("recordings");
        if (jsonArrayrecordings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recordings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recordings` to be an array in the JSON string but got `%s`", jsonObj.get("recordings").toString()));
          }

          // validate the optional field `recordings` (array)
          for (int i = 0; i < jsonArrayrecordings.size(); i++) {
            ColorPayloadReleasesInnerRecordingsInner.validateJsonElement(jsonArrayrecordings.get(i));
          };
        }
      }
      if ((jsonObj.get("release_mbid") != null && !jsonObj.get("release_mbid").isJsonNull()) && !jsonObj.get("release_mbid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release_mbid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release_mbid").toString()));
      }
      if ((jsonObj.get("release_name") != null && !jsonObj.get("release_name").isJsonNull()) && !jsonObj.get("release_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ColorPayloadReleasesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ColorPayloadReleasesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ColorPayloadReleasesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ColorPayloadReleasesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ColorPayloadReleasesInner>() {
           @Override
           public void write(JsonWriter out, ColorPayloadReleasesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ColorPayloadReleasesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ColorPayloadReleasesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ColorPayloadReleasesInner
   * @throws IOException if the JSON string is invalid with respect to ColorPayloadReleasesInner
   */
  public static ColorPayloadReleasesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ColorPayloadReleasesInner.class);
  }

  /**
   * Convert an instance of ColorPayloadReleasesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

