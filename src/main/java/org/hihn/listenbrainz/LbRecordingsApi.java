/*
 * ListenBrainz Swagger - OpenAPI 3.0
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.hihn.listenbrainz;

import org.hihn.listenbrainz.ApiCallback;
import org.hihn.listenbrainz.ApiClient;
import org.hihn.listenbrainz.ApiException;
import org.hihn.listenbrainz.ApiResponse;
import org.hihn.listenbrainz.Configuration;
import org.hihn.listenbrainz.Pair;
import org.hihn.listenbrainz.ProgressRequestBody;
import org.hihn.listenbrainz.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.hihn.listenbrainz.FeedbackResponse;
import org.hihn.listenbrainz.GetPins;
import org.hihn.listenbrainz.GetPinsCurrent200Response;
import org.hihn.listenbrainz.Pin200Response;
import org.hihn.listenbrainz.PinRequest;
import org.hihn.listenbrainz.RecordingFeedbackRequest;
import java.util.UUID;
import org.hihn.listenbrainz.UpdatePinRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LbRecordingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LbRecordingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LbRecordingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getFeedbackCall(String userName, Integer score, Integer count, Integer offset, String metadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/feedback/user/{user_name}/get-feedback"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (score != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("score", score));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (metadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metadata", metadata));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeedbackValidateBeforeCall(String userName, Integer score, Integer count, Integer offset, String metadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling getFeedback(Async)");
        }

        return getFeedbackCall(userName, score, count, offset, metadata, _callback);

    }


    private ApiResponse<FeedbackResponse> getFeedbackWithHttpInfo(String userName, Integer score, Integer count, Integer offset, String metadata) throws ApiException {
        okhttp3.Call localVarCall = getFeedbackValidateBeforeCall(userName, score, count, offset, metadata, null);
        Type localVarReturnType = new TypeToken<FeedbackResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFeedbackAsync(String userName, Integer score, Integer count, Integer offset, String metadata, final ApiCallback<FeedbackResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeedbackValidateBeforeCall(userName, score, count, offset, metadata, _callback);
        Type localVarReturnType = new TypeToken<FeedbackResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetFeedbackRequest {
        private final String userName;
        private Integer score;
        private Integer count;
        private Integer offset;
        private String metadata;

        private APIgetFeedbackRequest(String userName) {
            this.userName = userName;
        }

        /**
         * Set score
         * @param score  (optional)
         * @return APIgetFeedbackRequest
         */
        public APIgetFeedbackRequest score(Integer score) {
            this.score = score;
            return this;
        }

        /**
         * Set count
         * @param count  (optional, default to 25)
         * @return APIgetFeedbackRequest
         */
        public APIgetFeedbackRequest count(Integer count) {
            this.count = count;
            return this;
        }

        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return APIgetFeedbackRequest
         */
        public APIgetFeedbackRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Set metadata
         * @param metadata  (optional)
         * @return APIgetFeedbackRequest
         */
        public APIgetFeedbackRequest metadata(String metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Build call for getFeedback
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFeedbackCall(userName, score, count, offset, metadata, _callback);
        }

        /**
         * Execute getFeedback request
         * @return FeedbackResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
         </table>
         */
        public FeedbackResponse execute() throws ApiException {
            ApiResponse<FeedbackResponse> localVarResp = getFeedbackWithHttpInfo(userName, score, count, offset, metadata);
            return localVarResp.getData();
        }

        /**
         * Execute getFeedback request with HTTP info returned
         * @return ApiResponse&lt;FeedbackResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeedbackResponse> executeWithHttpInfo() throws ApiException {
            return getFeedbackWithHttpInfo(userName, score, count, offset, metadata);
        }

        /**
         * Execute getFeedback request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeedbackResponse> _callback) throws ApiException {
            return getFeedbackAsync(userName, score, count, offset, metadata, _callback);
        }
    }

    /**
     * Get feedback given by user &#39;user_name&#39;. The format for the JSON returned is defined in our Feedback JSON Documentation.  If the optional argument score is not given, this endpoint will return all the feedback submitted by the user. Otherwise filters the feedback to be returned by score.
     * 
     * @param userName  (required)
     * @return APIgetFeedbackRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
     </table>
     */
    public APIgetFeedbackRequest getFeedback(String userName) {
        return new APIgetFeedbackRequest(userName);
    }
    private okhttp3.Call getFeedbackForRecordingsCall(String userName, List<UUID> recordingMsids, List<UUID> recordingMbids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/feedback/user/{user_name}/get-feedback-for-recordings"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recordingMsids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "recording_msids", recordingMsids));
        }

        if (recordingMbids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "recording_mbids", recordingMbids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeedbackForRecordingsValidateBeforeCall(String userName, List<UUID> recordingMsids, List<UUID> recordingMbids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling getFeedbackForRecordings(Async)");
        }

        return getFeedbackForRecordingsCall(userName, recordingMsids, recordingMbids, _callback);

    }


    private ApiResponse<FeedbackResponse> getFeedbackForRecordingsWithHttpInfo(String userName, List<UUID> recordingMsids, List<UUID> recordingMbids) throws ApiException {
        okhttp3.Call localVarCall = getFeedbackForRecordingsValidateBeforeCall(userName, recordingMsids, recordingMbids, null);
        Type localVarReturnType = new TypeToken<FeedbackResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFeedbackForRecordingsAsync(String userName, List<UUID> recordingMsids, List<UUID> recordingMbids, final ApiCallback<FeedbackResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeedbackForRecordingsValidateBeforeCall(userName, recordingMsids, recordingMbids, _callback);
        Type localVarReturnType = new TypeToken<FeedbackResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetFeedbackForRecordingsRequest {
        private final String userName;
        private List<UUID> recordingMsids;
        private List<UUID> recordingMbids;

        private APIgetFeedbackForRecordingsRequest(String userName) {
            this.userName = userName;
        }

        /**
         * Set recordingMsids
         * @param recordingMsids Comma separated list of recording_msids for which feedback records are to be fetched. (optional)
         * @return APIgetFeedbackForRecordingsRequest
         */
        public APIgetFeedbackForRecordingsRequest recordingMsids(List<UUID> recordingMsids) {
            this.recordingMsids = recordingMsids;
            return this;
        }

        /**
         * Set recordingMbids
         * @param recordingMbids Comma separated list of recording_mbids for which feedback records are to be fetched. (optional)
         * @return APIgetFeedbackForRecordingsRequest
         */
        public APIgetFeedbackForRecordingsRequest recordingMbids(List<UUID> recordingMbids) {
            this.recordingMbids = recordingMbids;
            return this;
        }

        /**
         * Build call for getFeedbackForRecordings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFeedbackForRecordingsCall(userName, recordingMsids, recordingMbids, _callback);
        }

        /**
         * Execute getFeedbackForRecordings request
         * @return FeedbackResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
         </table>
         */
        public FeedbackResponse execute() throws ApiException {
            ApiResponse<FeedbackResponse> localVarResp = getFeedbackForRecordingsWithHttpInfo(userName, recordingMsids, recordingMbids);
            return localVarResp.getData();
        }

        /**
         * Execute getFeedbackForRecordings request with HTTP info returned
         * @return ApiResponse&lt;FeedbackResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeedbackResponse> executeWithHttpInfo() throws ApiException {
            return getFeedbackForRecordingsWithHttpInfo(userName, recordingMsids, recordingMbids);
        }

        /**
         * Execute getFeedbackForRecordings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeedbackResponse> _callback) throws ApiException {
            return getFeedbackForRecordingsAsync(userName, recordingMsids, recordingMbids, _callback);
        }
    }

    /**
     * Get feedback given by user user_name for the list of recordings supplied.
     * 
     * @param userName  (required)
     * @return APIgetFeedbackForRecordingsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
     </table>
     */
    public APIgetFeedbackForRecordingsRequest getFeedbackForRecordings(String userName) {
        return new APIgetFeedbackForRecordingsRequest(userName);
    }
    private okhttp3.Call getFeedbackMbidCall(UUID recordingMbid, Integer score, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/feedback/recording/{recording_mbid}/get-feedback-mbid"
            .replace("{" + "recording_mbid" + "}", localVarApiClient.escapeString(recordingMbid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (score != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("score", score));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeedbackMbidValidateBeforeCall(UUID recordingMbid, Integer score, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recordingMbid' is set
        if (recordingMbid == null) {
            throw new ApiException("Missing the required parameter 'recordingMbid' when calling getFeedbackMbid(Async)");
        }

        return getFeedbackMbidCall(recordingMbid, score, count, offset, _callback);

    }


    private ApiResponse<FeedbackResponse> getFeedbackMbidWithHttpInfo(UUID recordingMbid, Integer score, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getFeedbackMbidValidateBeforeCall(recordingMbid, score, count, offset, null);
        Type localVarReturnType = new TypeToken<FeedbackResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFeedbackMbidAsync(UUID recordingMbid, Integer score, Integer count, Integer offset, final ApiCallback<FeedbackResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeedbackMbidValidateBeforeCall(recordingMbid, score, count, offset, _callback);
        Type localVarReturnType = new TypeToken<FeedbackResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetFeedbackMbidRequest {
        private final UUID recordingMbid;
        private Integer score;
        private Integer count;
        private Integer offset;

        private APIgetFeedbackMbidRequest(UUID recordingMbid) {
            this.recordingMbid = recordingMbid;
        }

        /**
         * Set score
         * @param score  (optional)
         * @return APIgetFeedbackMbidRequest
         */
        public APIgetFeedbackMbidRequest score(Integer score) {
            this.score = score;
            return this;
        }

        /**
         * Set count
         * @param count  (optional, default to 25)
         * @return APIgetFeedbackMbidRequest
         */
        public APIgetFeedbackMbidRequest count(Integer count) {
            this.count = count;
            return this;
        }

        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return APIgetFeedbackMbidRequest
         */
        public APIgetFeedbackMbidRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Build call for getFeedbackMbid
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFeedbackMbidCall(recordingMbid, score, count, offset, _callback);
        }

        /**
         * Execute getFeedbackMbid request
         * @return FeedbackResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
         </table>
         */
        public FeedbackResponse execute() throws ApiException {
            ApiResponse<FeedbackResponse> localVarResp = getFeedbackMbidWithHttpInfo(recordingMbid, score, count, offset);
            return localVarResp.getData();
        }

        /**
         * Execute getFeedbackMbid request with HTTP info returned
         * @return ApiResponse&lt;FeedbackResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeedbackResponse> executeWithHttpInfo() throws ApiException {
            return getFeedbackMbidWithHttpInfo(recordingMbid, score, count, offset);
        }

        /**
         * Execute getFeedbackMbid request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeedbackResponse> _callback) throws ApiException {
            return getFeedbackMbidAsync(recordingMbid, score, count, offset, _callback);
        }
    }

    /**
     * Get feedback for recording with given recording_mbid.
     * 
     * @param recordingMbid  (required)
     * @return APIgetFeedbackMbidRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
     </table>
     */
    public APIgetFeedbackMbidRequest getFeedbackMbid(UUID recordingMbid) {
        return new APIgetFeedbackMbidRequest(recordingMbid);
    }
    private okhttp3.Call getFeedbackMsidCall(String recordingMsid, Integer score, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/feedback/user/{recording_msid}/get-feedback"
            .replace("{" + "recording_msid" + "}", localVarApiClient.escapeString(recordingMsid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (score != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("score", score));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeedbackMsidValidateBeforeCall(String recordingMsid, Integer score, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recordingMsid' is set
        if (recordingMsid == null) {
            throw new ApiException("Missing the required parameter 'recordingMsid' when calling getFeedbackMsid(Async)");
        }

        return getFeedbackMsidCall(recordingMsid, score, count, offset, _callback);

    }


    private ApiResponse<FeedbackResponse> getFeedbackMsidWithHttpInfo(String recordingMsid, Integer score, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getFeedbackMsidValidateBeforeCall(recordingMsid, score, count, offset, null);
        Type localVarReturnType = new TypeToken<FeedbackResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFeedbackMsidAsync(String recordingMsid, Integer score, Integer count, Integer offset, final ApiCallback<FeedbackResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeedbackMsidValidateBeforeCall(recordingMsid, score, count, offset, _callback);
        Type localVarReturnType = new TypeToken<FeedbackResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetFeedbackMsidRequest {
        private final String recordingMsid;
        private Integer score;
        private Integer count;
        private Integer offset;

        private APIgetFeedbackMsidRequest(String recordingMsid) {
            this.recordingMsid = recordingMsid;
        }

        /**
         * Set score
         * @param score  (optional)
         * @return APIgetFeedbackMsidRequest
         */
        public APIgetFeedbackMsidRequest score(Integer score) {
            this.score = score;
            return this;
        }

        /**
         * Set count
         * @param count  (optional, default to 25)
         * @return APIgetFeedbackMsidRequest
         */
        public APIgetFeedbackMsidRequest count(Integer count) {
            this.count = count;
            return this;
        }

        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return APIgetFeedbackMsidRequest
         */
        public APIgetFeedbackMsidRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Build call for getFeedbackMsid
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFeedbackMsidCall(recordingMsid, score, count, offset, _callback);
        }

        /**
         * Execute getFeedbackMsid request
         * @return FeedbackResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
         </table>
         */
        public FeedbackResponse execute() throws ApiException {
            ApiResponse<FeedbackResponse> localVarResp = getFeedbackMsidWithHttpInfo(recordingMsid, score, count, offset);
            return localVarResp.getData();
        }

        /**
         * Execute getFeedbackMsid request with HTTP info returned
         * @return ApiResponse&lt;FeedbackResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeedbackResponse> executeWithHttpInfo() throws ApiException {
            return getFeedbackMsidWithHttpInfo(recordingMsid, score, count, offset);
        }

        /**
         * Execute getFeedbackMsid request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeedbackResponse> _callback) throws ApiException {
            return getFeedbackMsidAsync(recordingMsid, score, count, offset, _callback);
        }
    }

    /**
     * Get feedback for recording with given recording_msid.
     * 
     * @param recordingMsid  (required)
     * @return APIgetFeedbackMsidRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
     </table>
     */
    public APIgetFeedbackMsidRequest getFeedbackMsid(String recordingMsid) {
        return new APIgetFeedbackMsidRequest(recordingMsid);
    }
    private okhttp3.Call getPinsCall(String userName, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/{user_name}/pins"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPinsValidateBeforeCall(String userName, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling getPins(Async)");
        }

        return getPinsCall(userName, count, offset, _callback);

    }


    private ApiResponse<GetPins> getPinsWithHttpInfo(String userName, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getPinsValidateBeforeCall(userName, count, offset, null);
        Type localVarReturnType = new TypeToken<GetPins>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPinsAsync(String userName, Integer count, Integer offset, final ApiCallback<GetPins> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPinsValidateBeforeCall(userName, count, offset, _callback);
        Type localVarReturnType = new TypeToken<GetPins>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPinsRequest {
        private final String userName;
        private Integer count;
        private Integer offset;

        private APIgetPinsRequest(String userName) {
            this.userName = userName;
        }

        /**
         * Set count
         * @param count  (optional, default to 25)
         * @return APIgetPinsRequest
         */
        public APIgetPinsRequest count(Integer count) {
            this.count = count;
            return this;
        }

        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return APIgetPinsRequest
         */
        public APIgetPinsRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Build call for getPins
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPinsCall(userName, count, offset, _callback);
        }

        /**
         * Execute getPins request
         * @return GetPins
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public GetPins execute() throws ApiException {
            ApiResponse<GetPins> localVarResp = getPinsWithHttpInfo(userName, count, offset);
            return localVarResp.getData();
        }

        /**
         * Execute getPins request with HTTP info returned
         * @return ApiResponse&lt;GetPins&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetPins> executeWithHttpInfo() throws ApiException {
            return getPinsWithHttpInfo(userName, count, offset);
        }

        /**
         * Execute getPins request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetPins> _callback) throws ApiException {
            return getPinsAsync(userName, count, offset, _callback);
        }
    }

    /**
     * Get a list of all recordings ever pinned by a user with given user_name in descending order of the time they were originally pinned.
     * 
     * @param userName  (required)
     * @return APIgetPinsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPinsRequest getPins(String userName) {
        return new APIgetPinsRequest(userName);
    }
    private okhttp3.Call getPinsCurrentCall(String userName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/{user_name}/pins/current"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPinsCurrentValidateBeforeCall(String userName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling getPinsCurrent(Async)");
        }

        return getPinsCurrentCall(userName, _callback);

    }


    private ApiResponse<GetPinsCurrent200Response> getPinsCurrentWithHttpInfo(String userName) throws ApiException {
        okhttp3.Call localVarCall = getPinsCurrentValidateBeforeCall(userName, null);
        Type localVarReturnType = new TypeToken<GetPinsCurrent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPinsCurrentAsync(String userName, final ApiCallback<GetPinsCurrent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPinsCurrentValidateBeforeCall(userName, _callback);
        Type localVarReturnType = new TypeToken<GetPinsCurrent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPinsCurrentRequest {
        private final String userName;

        private APIgetPinsCurrentRequest(String userName) {
            this.userName = userName;
        }

        /**
         * Build call for getPinsCurrent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPinsCurrentCall(userName, _callback);
        }

        /**
         * Execute getPinsCurrent request
         * @return GetPinsCurrent200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public GetPinsCurrent200Response execute() throws ApiException {
            ApiResponse<GetPinsCurrent200Response> localVarResp = getPinsCurrentWithHttpInfo(userName);
            return localVarResp.getData();
        }

        /**
         * Execute getPinsCurrent request with HTTP info returned
         * @return ApiResponse&lt;GetPinsCurrent200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetPinsCurrent200Response> executeWithHttpInfo() throws ApiException {
            return getPinsCurrentWithHttpInfo(userName);
        }

        /**
         * Execute getPinsCurrent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetPinsCurrent200Response> _callback) throws ApiException {
            return getPinsCurrentAsync(userName, _callback);
        }
    }

    /**
     * Get the currently pinned recording by a user with given user_name.
     * 
     * @param userName  (required)
     * @return APIgetPinsCurrentRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPinsCurrentRequest getPinsCurrent(String userName) {
        return new APIgetPinsCurrentRequest(userName);
    }
    private okhttp3.Call getPinsFollowingCall(String userName, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/{user_name}/pins/following"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPinsFollowingValidateBeforeCall(String userName, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling getPinsFollowing(Async)");
        }

        return getPinsFollowingCall(userName, count, offset, _callback);

    }


    private ApiResponse<GetPins> getPinsFollowingWithHttpInfo(String userName, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getPinsFollowingValidateBeforeCall(userName, count, offset, null);
        Type localVarReturnType = new TypeToken<GetPins>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPinsFollowingAsync(String userName, Integer count, Integer offset, final ApiCallback<GetPins> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPinsFollowingValidateBeforeCall(userName, count, offset, _callback);
        Type localVarReturnType = new TypeToken<GetPins>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPinsFollowingRequest {
        private final String userName;
        private Integer count;
        private Integer offset;

        private APIgetPinsFollowingRequest(String userName) {
            this.userName = userName;
        }

        /**
         * Set count
         * @param count  (optional, default to 25)
         * @return APIgetPinsFollowingRequest
         */
        public APIgetPinsFollowingRequest count(Integer count) {
            this.count = count;
            return this;
        }

        /**
         * Set offset
         * @param offset  (optional, default to 0)
         * @return APIgetPinsFollowingRequest
         */
        public APIgetPinsFollowingRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Build call for getPinsFollowing
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPinsFollowingCall(userName, count, offset, _callback);
        }

        /**
         * Execute getPinsFollowing request
         * @return GetPins
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public GetPins execute() throws ApiException {
            ApiResponse<GetPins> localVarResp = getPinsFollowingWithHttpInfo(userName, count, offset);
            return localVarResp.getData();
        }

        /**
         * Execute getPinsFollowing request with HTTP info returned
         * @return ApiResponse&lt;GetPins&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetPins> executeWithHttpInfo() throws ApiException {
            return getPinsFollowingWithHttpInfo(userName, count, offset);
        }

        /**
         * Execute getPinsFollowing request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetPins> _callback) throws ApiException {
            return getPinsFollowingAsync(userName, count, offset, _callback);
        }
    }

    /**
     * Get a list containing the active pinned recordings for all users in a user&#39;s user_name following list. The returned pinned recordings are sorted in descending order of the time they were pinned.
     * 
     * @param userName  (required)
     * @return APIgetPinsFollowingRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPinsFollowingRequest getPinsFollowing(String userName) {
        return new APIgetPinsFollowingRequest(userName);
    }
    private okhttp3.Call pinCall(PinRequest pinRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pinRequest;

        // create path and map variables
        String localVarPath = "/1/pin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pinValidateBeforeCall(PinRequest pinRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pinRequest' is set
        if (pinRequest == null) {
            throw new ApiException("Missing the required parameter 'pinRequest' when calling pin(Async)");
        }

        return pinCall(pinRequest, _callback);

    }


    private ApiResponse<Pin200Response> pinWithHttpInfo(PinRequest pinRequest) throws ApiException {
        okhttp3.Call localVarCall = pinValidateBeforeCall(pinRequest, null);
        Type localVarReturnType = new TypeToken<Pin200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call pinAsync(PinRequest pinRequest, final ApiCallback<Pin200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = pinValidateBeforeCall(pinRequest, _callback);
        Type localVarReturnType = new TypeToken<Pin200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIpinRequest {
        private final PinRequest pinRequest;

        private APIpinRequest(PinRequest pinRequest) {
            this.pinRequest = pinRequest;
        }

        /**
         * Build call for pin
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return pinCall(pinRequest, _callback);
        }

        /**
         * Execute pin request
         * @return Pin200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public Pin200Response execute() throws ApiException {
            ApiResponse<Pin200Response> localVarResp = pinWithHttpInfo(pinRequest);
            return localVarResp.getData();
        }

        /**
         * Execute pin request with HTTP info returned
         * @return ApiResponse&lt;Pin200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Pin200Response> executeWithHttpInfo() throws ApiException {
            return pinWithHttpInfo(pinRequest);
        }

        /**
         * Execute pin request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Pin200Response> _callback) throws ApiException {
            return pinAsync(pinRequest, _callback);
        }
    }

    /**
     * Pin a recording for user. A user token (found on https://listenbrainz.org/settings/) must be provided in the Authorization header! Each request should contain only one pinned recording item in the payload.
     * 
     * @param pinRequest  (required)
     * @return APIpinRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
     </table>
     */
    public APIpinRequest pin(PinRequest pinRequest) {
        return new APIpinRequest(pinRequest);
    }
    private okhttp3.Call pinDeleteCall(Integer rowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/pin/delete/{row_id}"
            .replace("{" + "row_id" + "}", localVarApiClient.escapeString(rowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pinDeleteValidateBeforeCall(Integer rowId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rowId' is set
        if (rowId == null) {
            throw new ApiException("Missing the required parameter 'rowId' when calling pinDelete(Async)");
        }

        return pinDeleteCall(rowId, _callback);

    }


    private ApiResponse<Void> pinDeleteWithHttpInfo(Integer rowId) throws ApiException {
        okhttp3.Call localVarCall = pinDeleteValidateBeforeCall(rowId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call pinDeleteAsync(Integer rowId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pinDeleteValidateBeforeCall(rowId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIpinDeleteRequest {
        private final Integer rowId;

        private APIpinDeleteRequest(Integer rowId) {
            this.rowId = rowId;
        }

        /**
         * Build call for pinDelete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Recording unpinned. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested row_id for the user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return pinDeleteCall(rowId, _callback);
        }

        /**
         * Execute pinDelete request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Recording unpinned. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested row_id for the user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            pinDeleteWithHttpInfo(rowId);
        }

        /**
         * Execute pinDelete request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Recording unpinned. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested row_id for the user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return pinDeleteWithHttpInfo(rowId);
        }

        /**
         * Execute pinDelete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Recording unpinned. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested row_id for the user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return pinDeleteAsync(rowId, _callback);
        }
    }

    /**
     * Deletes the pinned recording with given row_id from the server. A user token (found on https://listenbrainz.org/settings/) must be provided in the Authorization header!
     * 
     * @param rowId  (required)
     * @return APIpinDeleteRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recording unpinned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested row_id for the user was not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIpinDeleteRequest pinDelete(Integer rowId) {
        return new APIpinDeleteRequest(rowId);
    }
    private okhttp3.Call recordingFeedbackCall(RecordingFeedbackRequest recordingFeedbackRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = recordingFeedbackRequest;

        // create path and map variables
        String localVarPath = "/1/feedback/recording-feedback";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recordingFeedbackValidateBeforeCall(RecordingFeedbackRequest recordingFeedbackRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recordingFeedbackRequest' is set
        if (recordingFeedbackRequest == null) {
            throw new ApiException("Missing the required parameter 'recordingFeedbackRequest' when calling recordingFeedback(Async)");
        }

        return recordingFeedbackCall(recordingFeedbackRequest, _callback);

    }


    private ApiResponse<Void> recordingFeedbackWithHttpInfo(RecordingFeedbackRequest recordingFeedbackRequest) throws ApiException {
        okhttp3.Call localVarCall = recordingFeedbackValidateBeforeCall(recordingFeedbackRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call recordingFeedbackAsync(RecordingFeedbackRequest recordingFeedbackRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = recordingFeedbackValidateBeforeCall(recordingFeedbackRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIrecordingFeedbackRequest {
        private final RecordingFeedbackRequest recordingFeedbackRequest;

        private APIrecordingFeedbackRequest(RecordingFeedbackRequest recordingFeedbackRequest) {
            this.recordingFeedbackRequest = recordingFeedbackRequest;
        }

        /**
         * Build call for recordingFeedback
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return recordingFeedbackCall(recordingFeedbackRequest, _callback);
        }

        /**
         * Execute recordingFeedback request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            recordingFeedbackWithHttpInfo(recordingFeedbackRequest);
        }

        /**
         * Execute recordingFeedback request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return recordingFeedbackWithHttpInfo(recordingFeedbackRequest);
        }

        /**
         * Execute recordingFeedback request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return recordingFeedbackAsync(recordingFeedbackRequest, _callback);
        }
    }

    /**
     * Submit recording feedback (love/hate) to the server. A user token (found on https://listenbrainz.org/settings/ ) must be provided in the Authorization header! Each request should contain only one feedback in the payload.
     * 
     * @param recordingFeedbackRequest  (required)
     * @return APIrecordingFeedbackRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
     </table>
     */
    public APIrecordingFeedbackRequest recordingFeedback(RecordingFeedbackRequest recordingFeedbackRequest) {
        return new APIrecordingFeedbackRequest(recordingFeedbackRequest);
    }
    private okhttp3.Call unpinCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/unpin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unpinValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return unpinCall(_callback);

    }


    private ApiResponse<Void> unpinWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = unpinValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call unpinAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unpinValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIunpinRequest {

        private APIunpinRequest() {
        }

        /**
         * Build call for unpin
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Recording unpinned. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Could not find the active recording to unpin for the user. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unpinCall(_callback);
        }

        /**
         * Execute unpin request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Recording unpinned. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Could not find the active recording to unpin for the user. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            unpinWithHttpInfo();
        }

        /**
         * Execute unpin request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Recording unpinned. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Could not find the active recording to unpin for the user. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return unpinWithHttpInfo();
        }

        /**
         * Execute unpin request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Recording unpinned. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Could not find the active recording to unpin for the user. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return unpinAsync(_callback);
        }
    }

    /**
     * Unpins the currently active pinned recording for the user. A user token (found on https://listenbrainz.org/settings/) must be provided in the Authorization header!
     * 
     * @return APIunpinRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recording unpinned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find the active recording to unpin for the user. </td><td>  -  </td></tr>
     </table>
     */
    public APIunpinRequest unpin() {
        return new APIunpinRequest();
    }
    private okhttp3.Call updatePinCall(Integer rowId, UpdatePinRequest updatePinRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePinRequest;

        // create path and map variables
        String localVarPath = "/1/pin/update/{row_id}"
            .replace("{" + "row_id" + "}", localVarApiClient.escapeString(rowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePinValidateBeforeCall(Integer rowId, UpdatePinRequest updatePinRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rowId' is set
        if (rowId == null) {
            throw new ApiException("Missing the required parameter 'rowId' when calling updatePin(Async)");
        }

        // verify the required parameter 'updatePinRequest' is set
        if (updatePinRequest == null) {
            throw new ApiException("Missing the required parameter 'updatePinRequest' when calling updatePin(Async)");
        }

        return updatePinCall(rowId, updatePinRequest, _callback);

    }


    private ApiResponse<Void> updatePinWithHttpInfo(Integer rowId, UpdatePinRequest updatePinRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePinValidateBeforeCall(rowId, updatePinRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePinAsync(Integer rowId, UpdatePinRequest updatePinRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePinValidateBeforeCall(rowId, updatePinRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIupdatePinRequest {
        private final Integer rowId;
        private final UpdatePinRequest updatePinRequest;

        private APIupdatePinRequest(Integer rowId, UpdatePinRequest updatePinRequest) {
            this.rowId = rowId;
            this.updatePinRequest = updatePinRequest;
        }

        /**
         * Build call for updatePin
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updatePinCall(rowId, updatePinRequest, _callback);
        }

        /**
         * Execute updatePin request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            updatePinWithHttpInfo(rowId, updatePinRequest);
        }

        /**
         * Execute updatePin request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return updatePinWithHttpInfo(rowId, updatePinRequest);
        }

        /**
         * Execute updatePin request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return updatePinAsync(rowId, updatePinRequest, _callback);
        }
    }

    /**
     * Updates the blurb content of a pinned recording for the user. A user token (found on https://listenbrainz.org/settings/) must be provided in the Authorization header! Each request should contain only one pinned recording item in the payload.
     * 
     * @param rowId  (required)
     * @param updatePinRequest  (required)
     * @return APIupdatePinRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
     </table>
     */
    public APIupdatePinRequest updatePin(Integer rowId, UpdatePinRequest updatePinRequest) {
        return new APIupdatePinRequest(rowId, updatePinRequest);
    }
}
