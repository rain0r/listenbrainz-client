/*
 * ListenBrainz Swagger - OpenAPI 3.0
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.hihn.listenbrainz;

import org.hihn.listenbrainz.ApiCallback;
import org.hihn.listenbrainz.ApiClient;
import org.hihn.listenbrainz.ApiException;
import org.hihn.listenbrainz.ApiResponse;
import org.hihn.listenbrainz.Configuration;
import org.hihn.listenbrainz.Pair;
import org.hihn.listenbrainz.ProgressRequestBody;
import org.hihn.listenbrainz.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.hihn.listenbrainz.CreateNotificationRequest;
import org.hihn.listenbrainz.CreateReviewRequest;
import org.hihn.listenbrainz.FeedEvents;
import org.hihn.listenbrainz.FeedEventsDeleteRequest;
import org.hihn.listenbrainz.FeedEventsListensSimilar;
import org.hihn.listenbrainz.Followers;
import org.hihn.listenbrainz.Following;
import org.hihn.listenbrainz.RecommendPersonalRecordingRequest;
import org.hihn.listenbrainz.RecommendRecordingRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LbSocialApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LbSocialApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LbSocialApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNotificationCall(String userName, CreateNotificationRequest createNotificationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNotificationRequest;

        // create path and map variables
        String localVarPath = "/1/user/{user_name}/timeline-event/create/notification"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNotificationValidateBeforeCall(String userName, CreateNotificationRequest createNotificationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling createNotification(Async)");
        }

        // verify the required parameter 'createNotificationRequest' is set
        if (createNotificationRequest == null) {
            throw new ApiException("Missing the required parameter 'createNotificationRequest' when calling createNotification(Async)");
        }

        return createNotificationCall(userName, createNotificationRequest, _callback);

    }


    private ApiResponse<Void> createNotificationWithHttpInfo(String userName, CreateNotificationRequest createNotificationRequest) throws ApiException {
        okhttp3.Call localVarCall = createNotificationValidateBeforeCall(userName, createNotificationRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createNotificationAsync(String userName, CreateNotificationRequest createNotificationRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNotificationValidateBeforeCall(userName, createNotificationRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIcreateNotificationRequest {
        private final String userName;
        private final CreateNotificationRequest createNotificationRequest;

        private APIcreateNotificationRequest(String userName, CreateNotificationRequest createNotificationRequest) {
            this.userName = userName;
            this.createNotificationRequest = createNotificationRequest;
        }

        /**
         * Build call for createNotification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, message has been posted! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized, you do not have permissions to recommend recordings on the behalf of this user. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you are not an approved user. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createNotificationCall(userName, createNotificationRequest, _callback);
        }

        /**
         * Execute createNotification request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, message has been posted! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized, you do not have permissions to recommend recordings on the behalf of this user. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you are not an approved user. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            createNotificationWithHttpInfo(userName, createNotificationRequest);
        }

        /**
         * Execute createNotification request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, message has been posted! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized, you do not have permissions to recommend recordings on the behalf of this user. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you are not an approved user. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return createNotificationWithHttpInfo(userName, createNotificationRequest);
        }

        /**
         * Execute createNotification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, message has been posted! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized, you do not have permissions to recommend recordings on the behalf of this user. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you are not an approved user. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return createNotificationAsync(userName, createNotificationRequest, _callback);
        }
    }

    /**
     * Post a message with a link on a user&#39;s timeline. Only approved users are allowed to perform this action.
     * 
     * @param userName  (required)
     * @param createNotificationRequest  (required)
     * @return APIcreateNotificationRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful query, message has been posted! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, you do not have permissions to recommend recordings on the behalf of this user. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, you are not an approved user. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateNotificationRequest createNotification(String userName, CreateNotificationRequest createNotificationRequest) {
        return new APIcreateNotificationRequest(userName, createNotificationRequest);
    }
    private okhttp3.Call createReviewCall(String userName, CreateReviewRequest createReviewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createReviewRequest;

        // create path and map variables
        String localVarPath = "/1/user/{user_name}/timeline-event/create/review"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReviewValidateBeforeCall(String userName, CreateReviewRequest createReviewRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling createReview(Async)");
        }

        // verify the required parameter 'createReviewRequest' is set
        if (createReviewRequest == null) {
            throw new ApiException("Missing the required parameter 'createReviewRequest' when calling createReview(Async)");
        }

        return createReviewCall(userName, createReviewRequest, _callback);

    }


    private ApiResponse<Void> createReviewWithHttpInfo(String userName, CreateReviewRequest createReviewRequest) throws ApiException {
        okhttp3.Call localVarCall = createReviewValidateBeforeCall(userName, createReviewRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createReviewAsync(String userName, CreateReviewRequest createReviewRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReviewValidateBeforeCall(userName, createReviewRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIcreateReviewRequest {
        private final String userName;
        private final CreateReviewRequest createReviewRequest;

        private APIcreateReviewRequest(String userName, CreateReviewRequest createReviewRequest) {
            this.userName = userName;
            this.createReviewRequest = createReviewRequest;
        }

        /**
         * Build call for createReview
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, message has been posted! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you have not linked with a CritiqueBrainz account. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createReviewCall(userName, createReviewRequest, _callback);
        }

        /**
         * Execute createReview request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, message has been posted! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you have not linked with a CritiqueBrainz account. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            createReviewWithHttpInfo(userName, createReviewRequest);
        }

        /**
         * Execute createReview request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, message has been posted! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you have not linked with a CritiqueBrainz account. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return createReviewWithHttpInfo(userName, createReviewRequest);
        }

        /**
         * Execute createReview request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, message has been posted! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you have not linked with a CritiqueBrainz account. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return createReviewAsync(userName, createReviewRequest, _callback);
        }
    }

    /**
     * Creates a CritiqueBrainz review event for the user. This also creates a corresponding review in CritiqueBrainz. Users need to have linked their ListenBrainz account with CritiqueBrainz first to use this endpoint successfully.
     * 
     * @param userName  (required)
     * @param createReviewRequest  (required)
     * @return APIcreateReviewRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful query, message has been posted! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, you have not linked with a CritiqueBrainz account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateReviewRequest createReview(String userName, CreateReviewRequest createReviewRequest) {
        return new APIcreateReviewRequest(userName, createReviewRequest);
    }
    private okhttp3.Call feedEventsCall(String userName, Integer maxTs, Integer minTs, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/user/{user_name}/feed/events"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxTs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_ts", maxTs));
        }

        if (minTs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_ts", minTs));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call feedEventsValidateBeforeCall(String userName, Integer maxTs, Integer minTs, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling feedEvents(Async)");
        }

        return feedEventsCall(userName, maxTs, minTs, count, _callback);

    }


    private ApiResponse<FeedEvents> feedEventsWithHttpInfo(String userName, Integer maxTs, Integer minTs, Integer count) throws ApiException {
        okhttp3.Call localVarCall = feedEventsValidateBeforeCall(userName, maxTs, minTs, count, null);
        Type localVarReturnType = new TypeToken<FeedEvents>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call feedEventsAsync(String userName, Integer maxTs, Integer minTs, Integer count, final ApiCallback<FeedEvents> _callback) throws ApiException {

        okhttp3.Call localVarCall = feedEventsValidateBeforeCall(userName, maxTs, minTs, count, _callback);
        Type localVarReturnType = new TypeToken<FeedEvents>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIfeedEventsRequest {
        private final String userName;
        private Integer maxTs;
        private Integer minTs;
        private Integer count;

        private APIfeedEventsRequest(String userName) {
            this.userName = userName;
        }

        /**
         * Set maxTs
         * @param maxTs If you specify a &#39;max_ts&#39; timestamp, events with timestamps less than the value will be returned. (optional)
         * @return APIfeedEventsRequest
         */
        public APIfeedEventsRequest maxTs(Integer maxTs) {
            this.maxTs = maxTs;
            return this;
        }

        /**
         * Set minTs
         * @param minTs If you specify a &#39;min_ts&#39; timestamp, events with timestamps greater than the value will be returned. (optional)
         * @return APIfeedEventsRequest
         */
        public APIfeedEventsRequest minTs(Integer minTs) {
            this.minTs = minTs;
            return this;
        }

        /**
         * Set count
         * @param count  (optional, default to 25)
         * @return APIfeedEventsRequest
         */
        public APIfeedEventsRequest count(Integer count) {
            this.count = count;
            return this;
        }

        /**
         * Build call for feedEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, you have feed events! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized, you do not have permission to view this user&#39;s feed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you do not have permission to view this user&#39;s feed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return feedEventsCall(userName, maxTs, minTs, count, _callback);
        }

        /**
         * Execute feedEvents request
         * @return FeedEvents
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, you have feed events! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized, you do not have permission to view this user&#39;s feed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you do not have permission to view this user&#39;s feed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public FeedEvents execute() throws ApiException {
            ApiResponse<FeedEvents> localVarResp = feedEventsWithHttpInfo(userName, maxTs, minTs, count);
            return localVarResp.getData();
        }

        /**
         * Execute feedEvents request with HTTP info returned
         * @return ApiResponse&lt;FeedEvents&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, you have feed events! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized, you do not have permission to view this user&#39;s feed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you do not have permission to view this user&#39;s feed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeedEvents> executeWithHttpInfo() throws ApiException {
            return feedEventsWithHttpInfo(userName, maxTs, minTs, count);
        }

        /**
         * Execute feedEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, you have feed events! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized, you do not have permission to view this user&#39;s feed. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you do not have permission to view this user&#39;s feed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeedEvents> _callback) throws ApiException {
            return feedEventsAsync(userName, maxTs, minTs, count, _callback);
        }
    }

    /**
     * CreatGet feed events for a user&#39;s timeline.
     * 
     * @param userName  (required)
     * @return APIfeedEventsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful query, you have feed events! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, you do not have permission to view this user&#39;s feed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, you do not have permission to view this user&#39;s feed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIfeedEventsRequest feedEvents(String userName) {
        return new APIfeedEventsRequest(userName);
    }
    private okhttp3.Call feedEventsDeleteCall(String userName, FeedEventsDeleteRequest feedEventsDeleteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = feedEventsDeleteRequest;

        // create path and map variables
        String localVarPath = "/1/user/{user_name}/feed/events/delete"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call feedEventsDeleteValidateBeforeCall(String userName, FeedEventsDeleteRequest feedEventsDeleteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling feedEventsDelete(Async)");
        }

        // verify the required parameter 'feedEventsDeleteRequest' is set
        if (feedEventsDeleteRequest == null) {
            throw new ApiException("Missing the required parameter 'feedEventsDeleteRequest' when calling feedEventsDelete(Async)");
        }

        return feedEventsDeleteCall(userName, feedEventsDeleteRequest, _callback);

    }


    private ApiResponse<Void> feedEventsDeleteWithHttpInfo(String userName, FeedEventsDeleteRequest feedEventsDeleteRequest) throws ApiException {
        okhttp3.Call localVarCall = feedEventsDeleteValidateBeforeCall(userName, feedEventsDeleteRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call feedEventsDeleteAsync(String userName, FeedEventsDeleteRequest feedEventsDeleteRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = feedEventsDeleteValidateBeforeCall(userName, feedEventsDeleteRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIfeedEventsDeleteRequest {
        private final String userName;
        private final FeedEventsDeleteRequest feedEventsDeleteRequest;

        private APIfeedEventsDeleteRequest(String userName, FeedEventsDeleteRequest feedEventsDeleteRequest) {
            this.userName = userName;
            this.feedEventsDeleteRequest = feedEventsDeleteRequest;
        }

        /**
         * Build call for feedEventsDelete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful deletion. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you do not have permission to delete from this user&#39;s feed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> API Internal Server Error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return feedEventsDeleteCall(userName, feedEventsDeleteRequest, _callback);
        }

        /**
         * Execute feedEventsDelete request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful deletion. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you do not have permission to delete from this user&#39;s feed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> API Internal Server Error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            feedEventsDeleteWithHttpInfo(userName, feedEventsDeleteRequest);
        }

        /**
         * Execute feedEventsDelete request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful deletion. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you do not have permission to delete from this user&#39;s feed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> API Internal Server Error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return feedEventsDeleteWithHttpInfo(userName, feedEventsDeleteRequest);
        }

        /**
         * Execute feedEventsDelete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful deletion. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you do not have permission to delete from this user&#39;s feed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> API Internal Server Error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return feedEventsDeleteAsync(userName, feedEventsDeleteRequest, _callback);
        }
    }

    /**
     * Delete those events from user&#39;s feed that belong to them. Supports deletion of recommendation and notification. Along with the authorization token, post the event type and event id.
     * 
     * @param userName  (required)
     * @param feedEventsDeleteRequest  (required)
     * @return APIfeedEventsDeleteRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful deletion. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, you do not have permission to delete from this user&#39;s feed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> API Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public APIfeedEventsDeleteRequest feedEventsDelete(String userName, FeedEventsDeleteRequest feedEventsDeleteRequest) {
        return new APIfeedEventsDeleteRequest(userName, feedEventsDeleteRequest);
    }
    private okhttp3.Call feedEventsHideCall(String userName, FeedEventsDeleteRequest feedEventsDeleteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = feedEventsDeleteRequest;

        // create path and map variables
        String localVarPath = "/1/user/{user_name}/feed/events/hide"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call feedEventsHideValidateBeforeCall(String userName, FeedEventsDeleteRequest feedEventsDeleteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling feedEventsHide(Async)");
        }

        // verify the required parameter 'feedEventsDeleteRequest' is set
        if (feedEventsDeleteRequest == null) {
            throw new ApiException("Missing the required parameter 'feedEventsDeleteRequest' when calling feedEventsHide(Async)");
        }

        return feedEventsHideCall(userName, feedEventsDeleteRequest, _callback);

    }


    private ApiResponse<Void> feedEventsHideWithHttpInfo(String userName, FeedEventsDeleteRequest feedEventsDeleteRequest) throws ApiException {
        okhttp3.Call localVarCall = feedEventsHideValidateBeforeCall(userName, feedEventsDeleteRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call feedEventsHideAsync(String userName, FeedEventsDeleteRequest feedEventsDeleteRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = feedEventsHideValidateBeforeCall(userName, feedEventsDeleteRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIfeedEventsHideRequest {
        private final String userName;
        private final FeedEventsDeleteRequest feedEventsDeleteRequest;

        private APIfeedEventsHideRequest(String userName, FeedEventsDeleteRequest feedEventsDeleteRequest) {
            this.userName = userName;
            this.feedEventsDeleteRequest = feedEventsDeleteRequest;
        }

        /**
         * Build call for feedEventsHide
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Event hidden successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you don&#39;t have permissions to hide events from this user&#39;s timeline. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> API Internal Server Error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return feedEventsHideCall(userName, feedEventsDeleteRequest, _callback);
        }

        /**
         * Execute feedEventsHide request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Event hidden successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you don&#39;t have permissions to hide events from this user&#39;s timeline. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> API Internal Server Error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            feedEventsHideWithHttpInfo(userName, feedEventsDeleteRequest);
        }

        /**
         * Execute feedEventsHide request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Event hidden successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you don&#39;t have permissions to hide events from this user&#39;s timeline. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> API Internal Server Error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return feedEventsHideWithHttpInfo(userName, feedEventsDeleteRequest);
        }

        /**
         * Execute feedEventsHide request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Event hidden successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you don&#39;t have permissions to hide events from this user&#39;s timeline. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> API Internal Server Error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return feedEventsHideAsync(userName, feedEventsDeleteRequest, _callback);
        }
    }

    /**
     * Hide events from the user feed, only recording_recommendation and recording_pin events that have been generated by the people one is following can be deleted via this endpoint.
     * 
     * @param userName  (required)
     * @param feedEventsDeleteRequest  (required)
     * @return APIfeedEventsHideRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event hidden successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, you don&#39;t have permissions to hide events from this user&#39;s timeline. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> API Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public APIfeedEventsHideRequest feedEventsHide(String userName, FeedEventsDeleteRequest feedEventsDeleteRequest) {
        return new APIfeedEventsHideRequest(userName, feedEventsDeleteRequest);
    }
    private okhttp3.Call feedEventsListensFollowingCall(String userName, Integer maxTs, Integer minTs, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/user/{user_name}/feed/events/listens/following"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxTs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_ts", maxTs));
        }

        if (minTs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_ts", minTs));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call feedEventsListensFollowingValidateBeforeCall(String userName, Integer maxTs, Integer minTs, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling feedEventsListensFollowing(Async)");
        }

        return feedEventsListensFollowingCall(userName, maxTs, minTs, count, _callback);

    }


    private ApiResponse<FeedEvents> feedEventsListensFollowingWithHttpInfo(String userName, Integer maxTs, Integer minTs, Integer count) throws ApiException {
        okhttp3.Call localVarCall = feedEventsListensFollowingValidateBeforeCall(userName, maxTs, minTs, count, null);
        Type localVarReturnType = new TypeToken<FeedEvents>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call feedEventsListensFollowingAsync(String userName, Integer maxTs, Integer minTs, Integer count, final ApiCallback<FeedEvents> _callback) throws ApiException {

        okhttp3.Call localVarCall = feedEventsListensFollowingValidateBeforeCall(userName, maxTs, minTs, count, _callback);
        Type localVarReturnType = new TypeToken<FeedEvents>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIfeedEventsListensFollowingRequest {
        private final String userName;
        private Integer maxTs;
        private Integer minTs;
        private Integer count;

        private APIfeedEventsListensFollowingRequest(String userName) {
            this.userName = userName;
        }

        /**
         * Set maxTs
         * @param maxTs If you specify a &#39;max_ts&#39; timestamp, events with timestamps less than the value will be returned. (optional)
         * @return APIfeedEventsListensFollowingRequest
         */
        public APIfeedEventsListensFollowingRequest maxTs(Integer maxTs) {
            this.maxTs = maxTs;
            return this;
        }

        /**
         * Set minTs
         * @param minTs If you specify a &#39;min_ts&#39; timestamp, events with timestamps greater than the value will be returned. (optional)
         * @return APIfeedEventsListensFollowingRequest
         */
        public APIfeedEventsListensFollowingRequest minTs(Integer minTs) {
            this.minTs = minTs;
            return this;
        }

        /**
         * Set count
         * @param count  (optional, default to 25)
         * @return APIfeedEventsListensFollowingRequest
         */
        public APIfeedEventsListensFollowingRequest count(Integer count) {
            this.count = count;
            return this;
        }

        /**
         * Build call for feedEventsListensFollowing
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, you have feed listen-events! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you do not have permission to view this user&#39;s feed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return feedEventsListensFollowingCall(userName, maxTs, minTs, count, _callback);
        }

        /**
         * Execute feedEventsListensFollowing request
         * @return FeedEvents
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, you have feed listen-events! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you do not have permission to view this user&#39;s feed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public FeedEvents execute() throws ApiException {
            ApiResponse<FeedEvents> localVarResp = feedEventsListensFollowingWithHttpInfo(userName, maxTs, minTs, count);
            return localVarResp.getData();
        }

        /**
         * Execute feedEventsListensFollowing request with HTTP info returned
         * @return ApiResponse&lt;FeedEvents&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, you have feed listen-events! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you do not have permission to view this user&#39;s feed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeedEvents> executeWithHttpInfo() throws ApiException {
            return feedEventsListensFollowingWithHttpInfo(userName, maxTs, minTs, count);
        }

        /**
         * Execute feedEventsListensFollowing request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, you have feed listen-events! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you do not have permission to view this user&#39;s feed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeedEvents> _callback) throws ApiException {
            return feedEventsListensFollowingAsync(userName, maxTs, minTs, count, _callback);
        }
    }

    /**
     * Get feed&#39;s listen events for followed users.
     * 
     * @param userName  (required)
     * @return APIfeedEventsListensFollowingRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful query, you have feed listen-events! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, you do not have permission to view this user&#39;s feed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIfeedEventsListensFollowingRequest feedEventsListensFollowing(String userName) {
        return new APIfeedEventsListensFollowingRequest(userName);
    }
    private okhttp3.Call feedEventsListensSimilarCall(String userName, Integer maxTs, Integer minTs, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/user/{user_name}/feed/events/listens/similar"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxTs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_ts", maxTs));
        }

        if (minTs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_ts", minTs));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call feedEventsListensSimilarValidateBeforeCall(String userName, Integer maxTs, Integer minTs, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling feedEventsListensSimilar(Async)");
        }

        return feedEventsListensSimilarCall(userName, maxTs, minTs, count, _callback);

    }


    private ApiResponse<FeedEventsListensSimilar> feedEventsListensSimilarWithHttpInfo(String userName, Integer maxTs, Integer minTs, Integer count) throws ApiException {
        okhttp3.Call localVarCall = feedEventsListensSimilarValidateBeforeCall(userName, maxTs, minTs, count, null);
        Type localVarReturnType = new TypeToken<FeedEventsListensSimilar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call feedEventsListensSimilarAsync(String userName, Integer maxTs, Integer minTs, Integer count, final ApiCallback<FeedEventsListensSimilar> _callback) throws ApiException {

        okhttp3.Call localVarCall = feedEventsListensSimilarValidateBeforeCall(userName, maxTs, minTs, count, _callback);
        Type localVarReturnType = new TypeToken<FeedEventsListensSimilar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIfeedEventsListensSimilarRequest {
        private final String userName;
        private Integer maxTs;
        private Integer minTs;
        private Integer count;

        private APIfeedEventsListensSimilarRequest(String userName) {
            this.userName = userName;
        }

        /**
         * Set maxTs
         * @param maxTs If you specify a &#39;max_ts&#39; timestamp, events with timestamps less than the value will be returned. (optional)
         * @return APIfeedEventsListensSimilarRequest
         */
        public APIfeedEventsListensSimilarRequest maxTs(Integer maxTs) {
            this.maxTs = maxTs;
            return this;
        }

        /**
         * Set minTs
         * @param minTs If you specify a &#39;min_ts&#39; timestamp, events with timestamps greater than the value will be returned. (optional)
         * @return APIfeedEventsListensSimilarRequest
         */
        public APIfeedEventsListensSimilarRequest minTs(Integer minTs) {
            this.minTs = minTs;
            return this;
        }

        /**
         * Set count
         * @param count  (optional, default to 25)
         * @return APIfeedEventsListensSimilarRequest
         */
        public APIfeedEventsListensSimilarRequest count(Integer count) {
            this.count = count;
            return this;
        }

        /**
         * Build call for feedEventsListensSimilar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, you have feed listen-events! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you do not have permission to view this user&#39;s feed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return feedEventsListensSimilarCall(userName, maxTs, minTs, count, _callback);
        }

        /**
         * Execute feedEventsListensSimilar request
         * @return FeedEventsListensSimilar
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, you have feed listen-events! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you do not have permission to view this user&#39;s feed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public FeedEventsListensSimilar execute() throws ApiException {
            ApiResponse<FeedEventsListensSimilar> localVarResp = feedEventsListensSimilarWithHttpInfo(userName, maxTs, minTs, count);
            return localVarResp.getData();
        }

        /**
         * Execute feedEventsListensSimilar request with HTTP info returned
         * @return ApiResponse&lt;FeedEventsListensSimilar&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, you have feed listen-events! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you do not have permission to view this user&#39;s feed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeedEventsListensSimilar> executeWithHttpInfo() throws ApiException {
            return feedEventsListensSimilarWithHttpInfo(userName, maxTs, minTs, count);
        }

        /**
         * Execute feedEventsListensSimilar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, you have feed listen-events! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you do not have permission to view this user&#39;s feed. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeedEventsListensSimilar> _callback) throws ApiException {
            return feedEventsListensSimilarAsync(userName, maxTs, minTs, count, _callback);
        }
    }

    /**
     * Get feed&#39;s listen events for similar users.
     * 
     * @param userName  (required)
     * @return APIfeedEventsListensSimilarRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful query, you have feed listen-events! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, you do not have permission to view this user&#39;s feed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIfeedEventsListensSimilarRequest feedEventsListensSimilar(String userName) {
        return new APIfeedEventsListensSimilarRequest(userName);
    }
    private okhttp3.Call feedEventsUnhideCall(String userName, FeedEventsDeleteRequest feedEventsDeleteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = feedEventsDeleteRequest;

        // create path and map variables
        String localVarPath = "/1/user/{user_name}/feed/events/unhide"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call feedEventsUnhideValidateBeforeCall(String userName, FeedEventsDeleteRequest feedEventsDeleteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling feedEventsUnhide(Async)");
        }

        // verify the required parameter 'feedEventsDeleteRequest' is set
        if (feedEventsDeleteRequest == null) {
            throw new ApiException("Missing the required parameter 'feedEventsDeleteRequest' when calling feedEventsUnhide(Async)");
        }

        return feedEventsUnhideCall(userName, feedEventsDeleteRequest, _callback);

    }


    private ApiResponse<Void> feedEventsUnhideWithHttpInfo(String userName, FeedEventsDeleteRequest feedEventsDeleteRequest) throws ApiException {
        okhttp3.Call localVarCall = feedEventsUnhideValidateBeforeCall(userName, feedEventsDeleteRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call feedEventsUnhideAsync(String userName, FeedEventsDeleteRequest feedEventsDeleteRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = feedEventsUnhideValidateBeforeCall(userName, feedEventsDeleteRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIfeedEventsUnhideRequest {
        private final String userName;
        private final FeedEventsDeleteRequest feedEventsDeleteRequest;

        private APIfeedEventsUnhideRequest(String userName, FeedEventsDeleteRequest feedEventsDeleteRequest) {
            this.userName = userName;
            this.feedEventsDeleteRequest = feedEventsDeleteRequest;
        }

        /**
         * Build call for feedEventsUnhide
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Event unhidden successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> API Internal Server Error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return feedEventsUnhideCall(userName, feedEventsDeleteRequest, _callback);
        }

        /**
         * Execute feedEventsUnhide request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Event unhidden successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> API Internal Server Error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            feedEventsUnhideWithHttpInfo(userName, feedEventsDeleteRequest);
        }

        /**
         * Execute feedEventsUnhide request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Event unhidden successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> API Internal Server Error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return feedEventsUnhideWithHttpInfo(userName, feedEventsDeleteRequest);
        }

        /**
         * Execute feedEventsUnhide request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Event unhidden successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> API Internal Server Error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return feedEventsUnhideAsync(userName, feedEventsDeleteRequest, _callback);
        }
    }

    /**
     * Delete hidden events from the user feed, aka unhide events.
     * 
     * @param userName  (required)
     * @param feedEventsDeleteRequest  (required)
     * @return APIfeedEventsUnhideRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event unhidden successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> API Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public APIfeedEventsUnhideRequest feedEventsUnhide(String userName, FeedEventsDeleteRequest feedEventsDeleteRequest) {
        return new APIfeedEventsUnhideRequest(userName, feedEventsDeleteRequest);
    }
    private okhttp3.Call followCall(String userName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/user/{user_name}/follow"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call followValidateBeforeCall(String userName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling follow(Async)");
        }

        return followCall(userName, _callback);

    }


    private ApiResponse<Void> followWithHttpInfo(String userName) throws ApiException {
        okhttp3.Call localVarCall = followValidateBeforeCall(userName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call followAsync(String userName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = followValidateBeforeCall(userName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIfollowRequest {
        private final String userName;

        private APIfollowRequest(String userName) {
            this.userName = userName;
        }

        /**
         * Build call for follow
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully followed the user &#39;user_name&#39;. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Already following the user user_name, or trying to follow yourself. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return followCall(userName, _callback);
        }

        /**
         * Execute follow request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully followed the user &#39;user_name&#39;. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Already following the user user_name, or trying to follow yourself. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            followWithHttpInfo(userName);
        }

        /**
         * Execute follow request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully followed the user &#39;user_name&#39;. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Already following the user user_name, or trying to follow yourself. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return followWithHttpInfo(userName);
        }

        /**
         * Execute follow request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully followed the user &#39;user_name&#39;. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Already following the user user_name, or trying to follow yourself. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return followAsync(userName, _callback);
        }
    }

    /**
     * Follow the user &#39;user_name&#39;. A user token (found on https://listenbrainz.org/settings/ ) must be provided in the Authorization header!
     * 
     * @param userName  (required)
     * @return APIfollowRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully followed the user &#39;user_name&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Already following the user user_name, or trying to follow yourself. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
     </table>
     */
    public APIfollowRequest follow(String userName) {
        return new APIfollowRequest(userName);
    }
    private okhttp3.Call followersCall(String userName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/user/{user_name}/followers"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call followersValidateBeforeCall(String userName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling followers(Async)");
        }

        return followersCall(userName, _callback);

    }


    private ApiResponse<Followers> followersWithHttpInfo(String userName) throws ApiException {
        okhttp3.Call localVarCall = followersValidateBeforeCall(userName, null);
        Type localVarReturnType = new TypeToken<Followers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call followersAsync(String userName, final ApiCallback<Followers> _callback) throws ApiException {

        okhttp3.Call localVarCall = followersValidateBeforeCall(userName, _callback);
        Type localVarReturnType = new TypeToken<Followers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIfollowersRequest {
        private final String userName;

        private APIfollowersRequest(String userName) {
            this.userName = userName;
        }

        /**
         * Build call for followers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return followersCall(userName, _callback);
        }

        /**
         * Execute followers request
         * @return Followers
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public Followers execute() throws ApiException {
            ApiResponse<Followers> localVarResp = followersWithHttpInfo(userName);
            return localVarResp.getData();
        }

        /**
         * Execute followers request with HTTP info returned
         * @return ApiResponse&lt;Followers&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Followers> executeWithHttpInfo() throws ApiException {
            return followersWithHttpInfo(userName);
        }

        /**
         * Execute followers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Followers> _callback) throws ApiException {
            return followersAsync(userName, _callback);
        }
    }

    /**
     * Fetch the list of followers of the user &#39;user_name&#39;.
     * 
     * @param userName  (required)
     * @return APIfollowersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIfollowersRequest followers(String userName) {
        return new APIfollowersRequest(userName);
    }
    private okhttp3.Call followingCall(String userName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/user/{user_name}/following"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call followingValidateBeforeCall(String userName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling following(Async)");
        }

        return followingCall(userName, _callback);

    }


    private ApiResponse<Following> followingWithHttpInfo(String userName) throws ApiException {
        okhttp3.Call localVarCall = followingValidateBeforeCall(userName, null);
        Type localVarReturnType = new TypeToken<Following>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call followingAsync(String userName, final ApiCallback<Following> _callback) throws ApiException {

        okhttp3.Call localVarCall = followingValidateBeforeCall(userName, _callback);
        Type localVarReturnType = new TypeToken<Following>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIfollowingRequest {
        private final String userName;

        private APIfollowingRequest(String userName) {
            this.userName = userName;
        }

        /**
         * Build call for following
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return followingCall(userName, _callback);
        }

        /**
         * Execute following request
         * @return Following
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public Following execute() throws ApiException {
            ApiResponse<Following> localVarResp = followingWithHttpInfo(userName);
            return localVarResp.getData();
        }

        /**
         * Execute following request with HTTP info returned
         * @return ApiResponse&lt;Following&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Following> executeWithHttpInfo() throws ApiException {
            return followingWithHttpInfo(userName);
        }

        /**
         * Execute following request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Following> _callback) throws ApiException {
            return followingAsync(userName, _callback);
        }
    }

    /**
     * Fetch the list of users followed by the user &#39;user_name&#39;.
     * 
     * @param userName  (required)
     * @return APIfollowingRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIfollowingRequest following(String userName) {
        return new APIfollowingRequest(userName);
    }
    private okhttp3.Call recommendPersonalRecordingCall(String userName, RecommendPersonalRecordingRequest recommendPersonalRecordingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = recommendPersonalRecordingRequest;

        // create path and map variables
        String localVarPath = "/1/user/{user_name}/timeline-event/create/recommend-personal"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recommendPersonalRecordingValidateBeforeCall(String userName, RecommendPersonalRecordingRequest recommendPersonalRecordingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling recommendPersonalRecording(Async)");
        }

        // verify the required parameter 'recommendPersonalRecordingRequest' is set
        if (recommendPersonalRecordingRequest == null) {
            throw new ApiException("Missing the required parameter 'recommendPersonalRecordingRequest' when calling recommendPersonalRecording(Async)");
        }

        return recommendPersonalRecordingCall(userName, recommendPersonalRecordingRequest, _callback);

    }


    private ApiResponse<Void> recommendPersonalRecordingWithHttpInfo(String userName, RecommendPersonalRecordingRequest recommendPersonalRecordingRequest) throws ApiException {
        okhttp3.Call localVarCall = recommendPersonalRecordingValidateBeforeCall(userName, recommendPersonalRecordingRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call recommendPersonalRecordingAsync(String userName, RecommendPersonalRecordingRequest recommendPersonalRecordingRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = recommendPersonalRecordingValidateBeforeCall(userName, recommendPersonalRecordingRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIrecommendPersonalRecordingRequest {
        private final String userName;
        private final RecommendPersonalRecordingRequest recommendPersonalRecordingRequest;

        private APIrecommendPersonalRecordingRequest(String userName, RecommendPersonalRecordingRequest recommendPersonalRecordingRequest) {
            this.userName = userName;
            this.recommendPersonalRecordingRequest = recommendPersonalRecordingRequest;
        }

        /**
         * Build call for recommendPersonalRecording
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, recording has been recommended! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized, you do not have permissions to recommend. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return recommendPersonalRecordingCall(userName, recommendPersonalRecordingRequest, _callback);
        }

        /**
         * Execute recommendPersonalRecording request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, recording has been recommended! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized, you do not have permissions to recommend. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            recommendPersonalRecordingWithHttpInfo(userName, recommendPersonalRecordingRequest);
        }

        /**
         * Execute recommendPersonalRecording request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, recording has been recommended! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized, you do not have permissions to recommend. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return recommendPersonalRecordingWithHttpInfo(userName, recommendPersonalRecordingRequest);
        }

        /**
         * Execute recommendPersonalRecording request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, recording has been recommended! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized, you do not have permissions to recommend. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return recommendPersonalRecordingAsync(userName, recommendPersonalRecordingRequest, _callback);
        }
    }

    /**
     * Make the user recommend a recording to their followers. The request should post the following data about the recording being recommended (either one of recording_msid or recording_mbid is sufficient), and also the list of followers getting recommended.
     * 
     * @param userName  (required)
     * @param recommendPersonalRecordingRequest  (required)
     * @return APIrecommendPersonalRecordingRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful query, recording has been recommended! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, you do not have permissions to recommend. </td><td>  -  </td></tr>
     </table>
     */
    public APIrecommendPersonalRecordingRequest recommendPersonalRecording(String userName, RecommendPersonalRecordingRequest recommendPersonalRecordingRequest) {
        return new APIrecommendPersonalRecordingRequest(userName, recommendPersonalRecordingRequest);
    }
    private okhttp3.Call recommendRecordingCall(String userName, RecommendRecordingRequest recommendRecordingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = recommendRecordingRequest;

        // create path and map variables
        String localVarPath = "/1/user/{user_name}/timeline-event/create/recording"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recommendRecordingValidateBeforeCall(String userName, RecommendRecordingRequest recommendRecordingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling recommendRecording(Async)");
        }

        // verify the required parameter 'recommendRecordingRequest' is set
        if (recommendRecordingRequest == null) {
            throw new ApiException("Missing the required parameter 'recommendRecordingRequest' when calling recommendRecording(Async)");
        }

        return recommendRecordingCall(userName, recommendRecordingRequest, _callback);

    }


    private ApiResponse<Void> recommendRecordingWithHttpInfo(String userName, RecommendRecordingRequest recommendRecordingRequest) throws ApiException {
        okhttp3.Call localVarCall = recommendRecordingValidateBeforeCall(userName, recommendRecordingRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call recommendRecordingAsync(String userName, RecommendRecordingRequest recommendRecordingRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = recommendRecordingValidateBeforeCall(userName, recommendRecordingRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIrecommendRecordingRequest {
        private final String userName;
        private final RecommendRecordingRequest recommendRecordingRequest;

        private APIrecommendRecordingRequest(String userName, RecommendRecordingRequest recommendRecordingRequest) {
            this.userName = userName;
            this.recommendRecordingRequest = recommendRecordingRequest;
        }

        /**
         * Build call for recommendRecording
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, recording has been recommended! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized, you do not have permissions to recommend recordings on the behalf of this user. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you are not an approved user. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return recommendRecordingCall(userName, recommendRecordingRequest, _callback);
        }

        /**
         * Execute recommendRecording request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, recording has been recommended! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized, you do not have permissions to recommend recordings on the behalf of this user. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you are not an approved user. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            recommendRecordingWithHttpInfo(userName, recommendRecordingRequest);
        }

        /**
         * Execute recommendRecording request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, recording has been recommended! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized, you do not have permissions to recommend recordings on the behalf of this user. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you are not an approved user. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return recommendRecordingWithHttpInfo(userName, recommendRecordingRequest);
        }

        /**
         * Execute recommendRecording request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, recording has been recommended! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized, you do not have permissions to recommend recordings on the behalf of this user. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden, you are not an approved user. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return recommendRecordingAsync(userName, recommendRecordingRequest, _callback);
        }
    }

    /**
     * Make the user recommend a recording to their followers.
     * 
     * @param userName  (required)
     * @param recommendRecordingRequest  (required)
     * @return APIrecommendRecordingRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful query, recording has been recommended! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, you do not have permissions to recommend recordings on the behalf of this user. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, you are not an approved user. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIrecommendRecordingRequest recommendRecording(String userName, RecommendRecordingRequest recommendRecordingRequest) {
        return new APIrecommendRecordingRequest(userName, recommendRecordingRequest);
    }
    private okhttp3.Call unfollowCall(String userName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/user/{user_name}/unfollow"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unfollowValidateBeforeCall(String userName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling unfollow(Async)");
        }

        return unfollowCall(userName, _callback);

    }


    private ApiResponse<Void> unfollowWithHttpInfo(String userName) throws ApiException {
        okhttp3.Call localVarCall = unfollowValidateBeforeCall(userName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call unfollowAsync(String userName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unfollowValidateBeforeCall(userName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIunfollowRequest {
        private final String userName;

        private APIunfollowRequest(String userName) {
            this.userName = userName;
        }

        /**
         * Build call for unfollow
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully unfollowed the user &#39;user_name&#39;. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unfollowCall(userName, _callback);
        }

        /**
         * Execute unfollow request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully unfollowed the user &#39;user_name&#39;. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            unfollowWithHttpInfo(userName);
        }

        /**
         * Execute unfollow request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully unfollowed the user &#39;user_name&#39;. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return unfollowWithHttpInfo(userName);
        }

        /**
         * Execute unfollow request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully unfollowed the user &#39;user_name&#39;. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return unfollowAsync(userName, _callback);
        }
    }

    /**
     * Unfollow the user &#39;user_name&#39;. A user token (found on https://listenbrainz.org/settings/ ) must be provided in the Authorization header!
     * 
     * @param userName  (required)
     * @return APIunfollowRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unfollowed the user &#39;user_name&#39;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
     </table>
     */
    public APIunfollowRequest unfollow(String userName) {
        return new APIunfollowRequest(userName);
    }
}
