/*
 * ListenBrainz Swagger - OpenAPI 3.0
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.hihn.listenbrainz;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.hihn.listenbrainz.ListensForUserPayloadListensInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.hihn.listenbrainz.JSON;

/**
 * ListensForUserPayload
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-28T21:00:27.345003+02:00[Europe/Berlin]", comments = "Generator version: 7.7.0")
public class ListensForUserPayload {
  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_LATEST_LISTEN_TS = "latest_listen_ts";
  @SerializedName(SERIALIZED_NAME_LATEST_LISTEN_TS)
  private Integer latestListenTs;

  public static final String SERIALIZED_NAME_LISTENS = "listens";
  @SerializedName(SERIALIZED_NAME_LISTENS)
  private List<ListensForUserPayloadListensInner> listens = new ArrayList<>();

  public static final String SERIALIZED_NAME_OLDEST_LISTEN_TS = "oldest_listen_ts";
  @SerializedName(SERIALIZED_NAME_OLDEST_LISTEN_TS)
  private Integer oldestListenTs;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public ListensForUserPayload() {
  }

  public ListensForUserPayload count(Integer count) {
    this.count = count;
    return this;
  }

  /**
   * Get count
   * @return count
   */
  @javax.annotation.Nullable
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  public ListensForUserPayload latestListenTs(Integer latestListenTs) {
    this.latestListenTs = latestListenTs;
    return this;
  }

  /**
   * Get latestListenTs
   * @return latestListenTs
   */
  @javax.annotation.Nullable
  public Integer getLatestListenTs() {
    return latestListenTs;
  }

  public void setLatestListenTs(Integer latestListenTs) {
    this.latestListenTs = latestListenTs;
  }


  public ListensForUserPayload listens(List<ListensForUserPayloadListensInner> listens) {
    this.listens = listens;
    return this;
  }

  public ListensForUserPayload addListensItem(ListensForUserPayloadListensInner listensItem) {
    if (this.listens == null) {
      this.listens = new ArrayList<>();
    }
    this.listens.add(listensItem);
    return this;
  }

  /**
   * Get listens
   * @return listens
   */
  @javax.annotation.Nullable
  public List<ListensForUserPayloadListensInner> getListens() {
    return listens;
  }

  public void setListens(List<ListensForUserPayloadListensInner> listens) {
    this.listens = listens;
  }


  public ListensForUserPayload oldestListenTs(Integer oldestListenTs) {
    this.oldestListenTs = oldestListenTs;
    return this;
  }

  /**
   * Get oldestListenTs
   * @return oldestListenTs
   */
  @javax.annotation.Nullable
  public Integer getOldestListenTs() {
    return oldestListenTs;
  }

  public void setOldestListenTs(Integer oldestListenTs) {
    this.oldestListenTs = oldestListenTs;
  }


  public ListensForUserPayload userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListensForUserPayload listensForUserPayload = (ListensForUserPayload) o;
    return Objects.equals(this.count, listensForUserPayload.count) &&
        Objects.equals(this.latestListenTs, listensForUserPayload.latestListenTs) &&
        Objects.equals(this.listens, listensForUserPayload.listens) &&
        Objects.equals(this.oldestListenTs, listensForUserPayload.oldestListenTs) &&
        Objects.equals(this.userId, listensForUserPayload.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, latestListenTs, listens, oldestListenTs, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListensForUserPayload {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    latestListenTs: ").append(toIndentedString(latestListenTs)).append("\n");
    sb.append("    listens: ").append(toIndentedString(listens)).append("\n");
    sb.append("    oldestListenTs: ").append(toIndentedString(oldestListenTs)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("count");
    openapiFields.add("latest_listen_ts");
    openapiFields.add("listens");
    openapiFields.add("oldest_listen_ts");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListensForUserPayload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListensForUserPayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListensForUserPayload is not found in the empty JSON string", ListensForUserPayload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListensForUserPayload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListensForUserPayload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("listens") != null && !jsonObj.get("listens").isJsonNull()) {
        JsonArray jsonArraylistens = jsonObj.getAsJsonArray("listens");
        if (jsonArraylistens != null) {
          // ensure the json data is an array
          if (!jsonObj.get("listens").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `listens` to be an array in the JSON string but got `%s`", jsonObj.get("listens").toString()));
          }

          // validate the optional field `listens` (array)
          for (int i = 0; i < jsonArraylistens.size(); i++) {
            ListensForUserPayloadListensInner.validateJsonElement(jsonArraylistens.get(i));
          };
        }
      }
      if ((jsonObj.get("user_id") != null && !jsonObj.get("user_id").isJsonNull()) && !jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListensForUserPayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListensForUserPayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListensForUserPayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListensForUserPayload.class));

       return (TypeAdapter<T>) new TypeAdapter<ListensForUserPayload>() {
           @Override
           public void write(JsonWriter out, ListensForUserPayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListensForUserPayload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListensForUserPayload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListensForUserPayload
   * @throws IOException if the JSON string is invalid with respect to ListensForUserPayload
   */
  public static ListensForUserPayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListensForUserPayload.class);
  }

  /**
   * Convert an instance of ListensForUserPayload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

