/*
 * ListenBrainz Swagger - OpenAPI 3.0
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.hihn.listenbrainz;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.hihn.listenbrainz.TrackMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.hihn.listenbrainz.JSON;

/**
 * ListensForUserPayloadListensInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class ListensForUserPayloadListensInner {
  public static final String SERIALIZED_NAME_INSERTED_AT = "inserted_at";
  @SerializedName(SERIALIZED_NAME_INSERTED_AT)
  private Integer insertedAt;

  public static final String SERIALIZED_NAME_LISTENED_AT = "listened_at";
  @SerializedName(SERIALIZED_NAME_LISTENED_AT)
  private Integer listenedAt;

  public static final String SERIALIZED_NAME_RECORDING_MSID = "recording_msid";
  @SerializedName(SERIALIZED_NAME_RECORDING_MSID)
  private String recordingMsid;

  public static final String SERIALIZED_NAME_TRACK_METADATA = "track_metadata";
  @SerializedName(SERIALIZED_NAME_TRACK_METADATA)
  private TrackMetadata trackMetadata;

  public static final String SERIALIZED_NAME_USER_NAME = "user_name";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public ListensForUserPayloadListensInner() {
  }

  public ListensForUserPayloadListensInner insertedAt(Integer insertedAt) {
    this.insertedAt = insertedAt;
    return this;
  }

  /**
   * Get insertedAt
   * @return insertedAt
   */
  @javax.annotation.Nullable
  public Integer getInsertedAt() {
    return insertedAt;
  }

  public void setInsertedAt(Integer insertedAt) {
    this.insertedAt = insertedAt;
  }


  public ListensForUserPayloadListensInner listenedAt(Integer listenedAt) {
    this.listenedAt = listenedAt;
    return this;
  }

  /**
   * Get listenedAt
   * @return listenedAt
   */
  @javax.annotation.Nullable
  public Integer getListenedAt() {
    return listenedAt;
  }

  public void setListenedAt(Integer listenedAt) {
    this.listenedAt = listenedAt;
  }


  public ListensForUserPayloadListensInner recordingMsid(String recordingMsid) {
    this.recordingMsid = recordingMsid;
    return this;
  }

  /**
   * Get recordingMsid
   * @return recordingMsid
   */
  @javax.annotation.Nullable
  public String getRecordingMsid() {
    return recordingMsid;
  }

  public void setRecordingMsid(String recordingMsid) {
    this.recordingMsid = recordingMsid;
  }


  public ListensForUserPayloadListensInner trackMetadata(TrackMetadata trackMetadata) {
    this.trackMetadata = trackMetadata;
    return this;
  }

  /**
   * Get trackMetadata
   * @return trackMetadata
   */
  @javax.annotation.Nullable
  public TrackMetadata getTrackMetadata() {
    return trackMetadata;
  }

  public void setTrackMetadata(TrackMetadata trackMetadata) {
    this.trackMetadata = trackMetadata;
  }


  public ListensForUserPayloadListensInner userName(String userName) {
    this.userName = userName;
    return this;
  }

  /**
   * Get userName
   * @return userName
   */
  @javax.annotation.Nullable
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListensForUserPayloadListensInner listensForUserPayloadListensInner = (ListensForUserPayloadListensInner) o;
    return Objects.equals(this.insertedAt, listensForUserPayloadListensInner.insertedAt) &&
        Objects.equals(this.listenedAt, listensForUserPayloadListensInner.listenedAt) &&
        Objects.equals(this.recordingMsid, listensForUserPayloadListensInner.recordingMsid) &&
        Objects.equals(this.trackMetadata, listensForUserPayloadListensInner.trackMetadata) &&
        Objects.equals(this.userName, listensForUserPayloadListensInner.userName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(insertedAt, listenedAt, recordingMsid, trackMetadata, userName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListensForUserPayloadListensInner {\n");
    sb.append("    insertedAt: ").append(toIndentedString(insertedAt)).append("\n");
    sb.append("    listenedAt: ").append(toIndentedString(listenedAt)).append("\n");
    sb.append("    recordingMsid: ").append(toIndentedString(recordingMsid)).append("\n");
    sb.append("    trackMetadata: ").append(toIndentedString(trackMetadata)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inserted_at");
    openapiFields.add("listened_at");
    openapiFields.add("recording_msid");
    openapiFields.add("track_metadata");
    openapiFields.add("user_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListensForUserPayloadListensInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListensForUserPayloadListensInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListensForUserPayloadListensInner is not found in the empty JSON string", ListensForUserPayloadListensInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListensForUserPayloadListensInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListensForUserPayloadListensInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("recording_msid") != null && !jsonObj.get("recording_msid").isJsonNull()) && !jsonObj.get("recording_msid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recording_msid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recording_msid").toString()));
      }
      // validate the optional field `track_metadata`
      if (jsonObj.get("track_metadata") != null && !jsonObj.get("track_metadata").isJsonNull()) {
        TrackMetadata.validateJsonElement(jsonObj.get("track_metadata"));
      }
      if ((jsonObj.get("user_name") != null && !jsonObj.get("user_name").isJsonNull()) && !jsonObj.get("user_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListensForUserPayloadListensInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListensForUserPayloadListensInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListensForUserPayloadListensInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListensForUserPayloadListensInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ListensForUserPayloadListensInner>() {
           @Override
           public void write(JsonWriter out, ListensForUserPayloadListensInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListensForUserPayloadListensInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListensForUserPayloadListensInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListensForUserPayloadListensInner
   * @throws IOException if the JSON string is invalid with respect to ListensForUserPayloadListensInner
   */
  public static ListensForUserPayloadListensInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListensForUserPayloadListensInner.class);
  }

  /**
   * Convert an instance of ListensForUserPayloadListensInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

