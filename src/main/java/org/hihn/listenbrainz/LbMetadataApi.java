/*
 * ListenBrainz Swagger - OpenAPI 3.0
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.hihn.listenbrainz;

import org.hihn.listenbrainz.ApiCallback;
import org.hihn.listenbrainz.ApiClient;
import org.hihn.listenbrainz.ApiException;
import org.hihn.listenbrainz.ApiResponse;
import org.hihn.listenbrainz.Configuration;
import org.hihn.listenbrainz.Pair;
import org.hihn.listenbrainz.ProgressRequestBody;
import org.hihn.listenbrainz.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.hihn.listenbrainz.ArtistMetadata;
import org.hihn.listenbrainz.GetManualMapping;
import org.hihn.listenbrainz.Lookup;
import org.hihn.listenbrainz.RecordingMetadata;
import org.hihn.listenbrainz.ReleaseGroupMetadata;
import org.hihn.listenbrainz.SubmitManualMapping;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LbMetadataApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LbMetadataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LbMetadataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call artistMetadataCall(List<UUID> artistMbids, String inc, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/metadata/artist/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (artistMbids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "artist_mbids", artistMbids));
        }

        if (inc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inc", inc));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artistMetadataValidateBeforeCall(List<UUID> artistMbids, String inc, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'artistMbids' is set
        if (artistMbids == null) {
            throw new ApiException("Missing the required parameter 'artistMbids' when calling artistMetadata(Async)");
        }

        // verify the required parameter 'inc' is set
        if (inc == null) {
            throw new ApiException("Missing the required parameter 'inc' when calling artistMetadata(Async)");
        }

        return artistMetadataCall(artistMbids, inc, _callback);

    }


    private ApiResponse<List<ArtistMetadata>> artistMetadataWithHttpInfo(List<UUID> artistMbids, String inc) throws ApiException {
        okhttp3.Call localVarCall = artistMetadataValidateBeforeCall(artistMbids, inc, null);
        Type localVarReturnType = new TypeToken<List<ArtistMetadata>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call artistMetadataAsync(List<UUID> artistMbids, String inc, final ApiCallback<List<ArtistMetadata>> _callback) throws ApiException {

        okhttp3.Call localVarCall = artistMetadataValidateBeforeCall(artistMbids, inc, _callback);
        Type localVarReturnType = new TypeToken<List<ArtistMetadata>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIartistMetadataRequest {
        private final List<UUID> artistMbids;
        private final String inc;

        private APIartistMetadataRequest(List<UUID> artistMbids, String inc) {
            this.artistMbids = artistMbids;
            this.inc = inc;
        }

        /**
         * Build call for artistMetadata
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid arguments. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return artistMetadataCall(artistMbids, inc, _callback);
        }

        /**
         * Execute artistMetadata request
         * @return List&lt;ArtistMetadata&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid arguments. </td><td>  -  </td></tr>
         </table>
         */
        public List<ArtistMetadata> execute() throws ApiException {
            ApiResponse<List<ArtistMetadata>> localVarResp = artistMetadataWithHttpInfo(artistMbids, inc);
            return localVarResp.getData();
        }

        /**
         * Execute artistMetadata request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ArtistMetadata&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid arguments. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ArtistMetadata>> executeWithHttpInfo() throws ApiException {
            return artistMetadataWithHttpInfo(artistMbids, inc);
        }

        /**
         * Execute artistMetadata request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid arguments. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ArtistMetadata>> _callback) throws ApiException {
            return artistMetadataAsync(artistMbids, inc, _callback);
        }
    }

    /**
     * This endpoint takes in a list of artist_mbids and returns an array of dicts that contain recording metadata suitable for showing in a context that requires as much detail about a recording and the artist. Using the inc parameter, you can control which portions of metadata to fetch.
     * 
     * @param artistMbids A comma separated list of recording_mbids. (required)
     * @param inc A space separated list of “artist”, “tag” and/or “release” to indicate which portions of metadata you&#39;re interested in fetching. We encourage users to only fetch the data they plan to consume. (required)
     * @return APIartistMetadataRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid arguments. </td><td>  -  </td></tr>
     </table>
     */
    public APIartistMetadataRequest artistMetadata(List<UUID> artistMbids, String inc) {
        return new APIartistMetadataRequest(artistMbids, inc);
    }
    private okhttp3.Call getManualMappingCall(UUID recordingMsid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/metadata/get_manual_mapping/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recordingMsid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recording_msid", recordingMsid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getManualMappingValidateBeforeCall(UUID recordingMsid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recordingMsid' is set
        if (recordingMsid == null) {
            throw new ApiException("Missing the required parameter 'recordingMsid' when calling getManualMapping(Async)");
        }

        return getManualMappingCall(recordingMsid, _callback);

    }


    private ApiResponse<GetManualMapping> getManualMappingWithHttpInfo(UUID recordingMsid) throws ApiException {
        okhttp3.Call localVarCall = getManualMappingValidateBeforeCall(recordingMsid, null);
        Type localVarReturnType = new TypeToken<GetManualMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getManualMappingAsync(UUID recordingMsid, final ApiCallback<GetManualMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = getManualMappingValidateBeforeCall(recordingMsid, _callback);
        Type localVarReturnType = new TypeToken<GetManualMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetManualMappingRequest {
        private final UUID recordingMsid;

        private APIgetManualMappingRequest(UUID recordingMsid) {
            this.recordingMsid = recordingMsid;
        }

        /**
         * Build call for getManualMapping
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No such mapping for this user/recording msid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getManualMappingCall(recordingMsid, _callback);
        }

        /**
         * Execute getManualMapping request
         * @return GetManualMapping
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No such mapping for this user/recording msid. </td><td>  -  </td></tr>
         </table>
         */
        public GetManualMapping execute() throws ApiException {
            ApiResponse<GetManualMapping> localVarResp = getManualMappingWithHttpInfo(recordingMsid);
            return localVarResp.getData();
        }

        /**
         * Execute getManualMapping request with HTTP info returned
         * @return ApiResponse&lt;GetManualMapping&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No such mapping for this user/recording msid. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetManualMapping> executeWithHttpInfo() throws ApiException {
            return getManualMappingWithHttpInfo(recordingMsid);
        }

        /**
         * Execute getManualMapping request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No such mapping for this user/recording msid. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetManualMapping> _callback) throws ApiException {
            return getManualMappingAsync(recordingMsid, _callback);
        }
    }

    /**
     * Get the manual mapping of a recording messybrainz ID that a user added.
     * 
     * @param recordingMsid  (required)
     * @return APIgetManualMappingRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such mapping for this user/recording msid. </td><td>  -  </td></tr>
     </table>
     */
    public APIgetManualMappingRequest getManualMapping(UUID recordingMsid) {
        return new APIgetManualMappingRequest(recordingMsid);
    }
    private okhttp3.Call lookupCall(String artistName, String recordingName, Boolean metadata, String inc, String releaseName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/metadata/lookup/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (artistName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("artist_name", artistName));
        }

        if (recordingName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recording_name", recordingName));
        }

        if (releaseName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("release_name", releaseName));
        }

        if (metadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metadata", metadata));
        }

        if (inc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inc", inc));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lookupValidateBeforeCall(String artistName, String recordingName, Boolean metadata, String inc, String releaseName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'artistName' is set
        if (artistName == null) {
            throw new ApiException("Missing the required parameter 'artistName' when calling lookup(Async)");
        }

        // verify the required parameter 'recordingName' is set
        if (recordingName == null) {
            throw new ApiException("Missing the required parameter 'recordingName' when calling lookup(Async)");
        }

        // verify the required parameter 'metadata' is set
        if (metadata == null) {
            throw new ApiException("Missing the required parameter 'metadata' when calling lookup(Async)");
        }

        // verify the required parameter 'inc' is set
        if (inc == null) {
            throw new ApiException("Missing the required parameter 'inc' when calling lookup(Async)");
        }

        return lookupCall(artistName, recordingName, metadata, inc, releaseName, _callback);

    }


    private ApiResponse<Lookup> lookupWithHttpInfo(String artistName, String recordingName, Boolean metadata, String inc, String releaseName) throws ApiException {
        okhttp3.Call localVarCall = lookupValidateBeforeCall(artistName, recordingName, metadata, inc, releaseName, null);
        Type localVarReturnType = new TypeToken<Lookup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call lookupAsync(String artistName, String recordingName, Boolean metadata, String inc, String releaseName, final ApiCallback<Lookup> _callback) throws ApiException {

        okhttp3.Call localVarCall = lookupValidateBeforeCall(artistName, recordingName, metadata, inc, releaseName, _callback);
        Type localVarReturnType = new TypeToken<Lookup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlookupRequest {
        private final String artistName;
        private final String recordingName;
        private final Boolean metadata;
        private final String inc;
        private String releaseName;

        private APIlookupRequest(String artistName, String recordingName, Boolean metadata, String inc) {
            this.artistName = artistName;
            this.recordingName = recordingName;
            this.metadata = metadata;
            this.inc = inc;
        }

        /**
         * Set releaseName
         * @param releaseName Release name of the listen. (optional)
         * @return APIlookupRequest
         */
        public APIlookupRequest releaseName(String releaseName) {
            this.releaseName = releaseName;
            return this;
        }

        /**
         * Build call for lookup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid arguments. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return lookupCall(artistName, recordingName, metadata, inc, releaseName, _callback);
        }

        /**
         * Execute lookup request
         * @return Lookup
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid arguments. </td><td>  -  </td></tr>
         </table>
         */
        public Lookup execute() throws ApiException {
            ApiResponse<Lookup> localVarResp = lookupWithHttpInfo(artistName, recordingName, metadata, inc, releaseName);
            return localVarResp.getData();
        }

        /**
         * Execute lookup request with HTTP info returned
         * @return ApiResponse&lt;Lookup&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid arguments. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Lookup> executeWithHttpInfo() throws ApiException {
            return lookupWithHttpInfo(artistName, recordingName, metadata, inc, releaseName);
        }

        /**
         * Execute lookup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid arguments. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Lookup> _callback) throws ApiException {
            return lookupAsync(artistName, recordingName, metadata, inc, releaseName, _callback);
        }
    }

    /**
     * This endpoint looks up mbid metadata for the given artist, recording and optionally a release name. The total number of characters in the artist name, recording name and release name query arguments should be less than or equal to MAX_MAPPING_QUERY_LENGTH.
     * 
     * @param artistName Artist name of the listen. (required)
     * @param recordingName Track name of the listen. (required)
     * @param metadata Should extra metadata be also returned if a match is found, see /metadata/recording for details. (required)
     * @param inc A space separated list of “artist”, “tag” and/or “release” to indicate which portions of metadata you&#39;re interested in fetching. We encourage users to only fetch the data they plan to consume. (required)
     * @return APIlookupRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid arguments. </td><td>  -  </td></tr>
     </table>
     */
    public APIlookupRequest lookup(String artistName, String recordingName, Boolean metadata, String inc) {
        return new APIlookupRequest(artistName, recordingName, metadata, inc);
    }
    private okhttp3.Call recordingMetadataCall(List<UUID> recordingMbids, String inc, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/metadata/recording/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recordingMbids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "recording_mbids", recordingMbids));
        }

        if (inc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inc", inc));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recordingMetadataValidateBeforeCall(List<UUID> recordingMbids, String inc, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recordingMbids' is set
        if (recordingMbids == null) {
            throw new ApiException("Missing the required parameter 'recordingMbids' when calling recordingMetadata(Async)");
        }

        // verify the required parameter 'inc' is set
        if (inc == null) {
            throw new ApiException("Missing the required parameter 'inc' when calling recordingMetadata(Async)");
        }

        return recordingMetadataCall(recordingMbids, inc, _callback);

    }


    private ApiResponse<Map<String, RecordingMetadata>> recordingMetadataWithHttpInfo(List<UUID> recordingMbids, String inc) throws ApiException {
        okhttp3.Call localVarCall = recordingMetadataValidateBeforeCall(recordingMbids, inc, null);
        Type localVarReturnType = new TypeToken<Map<String, RecordingMetadata>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call recordingMetadataAsync(List<UUID> recordingMbids, String inc, final ApiCallback<Map<String, RecordingMetadata>> _callback) throws ApiException {

        okhttp3.Call localVarCall = recordingMetadataValidateBeforeCall(recordingMbids, inc, _callback);
        Type localVarReturnType = new TypeToken<Map<String, RecordingMetadata>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIrecordingMetadataRequest {
        private final List<UUID> recordingMbids;
        private final String inc;

        private APIrecordingMetadataRequest(List<UUID> recordingMbids, String inc) {
            this.recordingMbids = recordingMbids;
            this.inc = inc;
        }

        /**
         * Build call for recordingMetadata
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return recordingMetadataCall(recordingMbids, inc, _callback);
        }

        /**
         * Execute recordingMetadata request
         * @return Map&lt;String, RecordingMetadata&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public Map<String, RecordingMetadata> execute() throws ApiException {
            ApiResponse<Map<String, RecordingMetadata>> localVarResp = recordingMetadataWithHttpInfo(recordingMbids, inc);
            return localVarResp.getData();
        }

        /**
         * Execute recordingMetadata request with HTTP info returned
         * @return ApiResponse&lt;Map&lt;String, RecordingMetadata&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Map<String, RecordingMetadata>> executeWithHttpInfo() throws ApiException {
            return recordingMetadataWithHttpInfo(recordingMbids, inc);
        }

        /**
         * Execute recordingMetadata request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Map<String, RecordingMetadata>> _callback) throws ApiException {
            return recordingMetadataAsync(recordingMbids, inc, _callback);
        }
    }

    /**
     * This endpoint takes in a list of recording_mbids and returns an array of dicts that contain recording metadata suitable for showing in a context that requires as much detail about a recording and the artist. Using the inc parameter, you can control which portions of metadata to fetch.
     * 
     * @param recordingMbids A comma separated list of recording_mbids. (required)
     * @param inc A space separated list of “artist”, “tag” and/or “release” to indicate which portions of metadata you&#39;re interested in fetching. We encourage users to only fetch the data they plan to consume. (required)
     * @return APIrecordingMetadataRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIrecordingMetadataRequest recordingMetadata(List<UUID> recordingMbids, String inc) {
        return new APIrecordingMetadataRequest(recordingMbids, inc);
    }
    private okhttp3.Call releaseGroupMetadataCall(List<UUID> releaseGroupMbids, String inc, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/metadata/release_group/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (releaseGroupMbids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "release_group_mbids", releaseGroupMbids));
        }

        if (inc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inc", inc));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releaseGroupMetadataValidateBeforeCall(List<UUID> releaseGroupMbids, String inc, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'releaseGroupMbids' is set
        if (releaseGroupMbids == null) {
            throw new ApiException("Missing the required parameter 'releaseGroupMbids' when calling releaseGroupMetadata(Async)");
        }

        // verify the required parameter 'inc' is set
        if (inc == null) {
            throw new ApiException("Missing the required parameter 'inc' when calling releaseGroupMetadata(Async)");
        }

        return releaseGroupMetadataCall(releaseGroupMbids, inc, _callback);

    }


    private ApiResponse<Map<String, ReleaseGroupMetadata>> releaseGroupMetadataWithHttpInfo(List<UUID> releaseGroupMbids, String inc) throws ApiException {
        okhttp3.Call localVarCall = releaseGroupMetadataValidateBeforeCall(releaseGroupMbids, inc, null);
        Type localVarReturnType = new TypeToken<Map<String, ReleaseGroupMetadata>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call releaseGroupMetadataAsync(List<UUID> releaseGroupMbids, String inc, final ApiCallback<Map<String, ReleaseGroupMetadata>> _callback) throws ApiException {

        okhttp3.Call localVarCall = releaseGroupMetadataValidateBeforeCall(releaseGroupMbids, inc, _callback);
        Type localVarReturnType = new TypeToken<Map<String, ReleaseGroupMetadata>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIreleaseGroupMetadataRequest {
        private final List<UUID> releaseGroupMbids;
        private final String inc;

        private APIreleaseGroupMetadataRequest(List<UUID> releaseGroupMbids, String inc) {
            this.releaseGroupMbids = releaseGroupMbids;
            this.inc = inc;
        }

        /**
         * Build call for releaseGroupMetadata
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return releaseGroupMetadataCall(releaseGroupMbids, inc, _callback);
        }

        /**
         * Execute releaseGroupMetadata request
         * @return Map&lt;String, ReleaseGroupMetadata&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
         </table>
         */
        public Map<String, ReleaseGroupMetadata> execute() throws ApiException {
            ApiResponse<Map<String, ReleaseGroupMetadata>> localVarResp = releaseGroupMetadataWithHttpInfo(releaseGroupMbids, inc);
            return localVarResp.getData();
        }

        /**
         * Execute releaseGroupMetadata request with HTTP info returned
         * @return ApiResponse&lt;Map&lt;String, ReleaseGroupMetadata&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Map<String, ReleaseGroupMetadata>> executeWithHttpInfo() throws ApiException {
            return releaseGroupMetadataWithHttpInfo(releaseGroupMbids, inc);
        }

        /**
         * Execute releaseGroupMetadata request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Map<String, ReleaseGroupMetadata>> _callback) throws ApiException {
            return releaseGroupMetadataAsync(releaseGroupMbids, inc, _callback);
        }
    }

    /**
     * This endpoint takes in a list of release_group_mbids and returns an array of dicts that contain release_group metadata suitable for showing in a context that requires as much detail about a release_group and the artist. Using the inc parameter, you can control which portions of metadata to fetch.
     * 
     * @param releaseGroupMbids A comma separated list of release_group_mbids. (required)
     * @param inc A space separated list of “artist”, “tag” and/or “release” to indicate which portions of metadata you&#39;re interested in fetching. We encourage users to only fetch the data they plan to consume. (required)
     * @return APIreleaseGroupMetadataRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
     </table>
     */
    public APIreleaseGroupMetadataRequest releaseGroupMetadata(List<UUID> releaseGroupMbids, String inc) {
        return new APIreleaseGroupMetadataRequest(releaseGroupMbids, inc);
    }
    private okhttp3.Call submitManualMappingCall(SubmitManualMapping submitManualMapping, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = submitManualMapping;

        // create path and map variables
        String localVarPath = "/1/metadata/submit_manual_mapping/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitManualMappingValidateBeforeCall(SubmitManualMapping submitManualMapping, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'submitManualMapping' is set
        if (submitManualMapping == null) {
            throw new ApiException("Missing the required parameter 'submitManualMapping' when calling submitManualMapping(Async)");
        }

        return submitManualMappingCall(submitManualMapping, _callback);

    }


    private ApiResponse<Void> submitManualMappingWithHttpInfo(SubmitManualMapping submitManualMapping) throws ApiException {
        okhttp3.Call localVarCall = submitManualMappingValidateBeforeCall(submitManualMapping, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call submitManualMappingAsync(SubmitManualMapping submitManualMapping, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitManualMappingValidateBeforeCall(submitManualMapping, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIsubmitManualMappingRequest {
        private final SubmitManualMapping submitManualMapping;

        private APIsubmitManualMappingRequest(SubmitManualMapping submitManualMapping) {
            this.submitManualMapping = submitManualMapping;
        }

        /**
         * Build call for submitManualMapping
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Listen(s) accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return submitManualMappingCall(submitManualMapping, _callback);
        }

        /**
         * Execute submitManualMapping request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Listen(s) accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            submitManualMappingWithHttpInfo(submitManualMapping);
        }

        /**
         * Execute submitManualMapping request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Listen(s) accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return submitManualMappingWithHttpInfo(submitManualMapping);
        }

        /**
         * Execute submitManualMapping request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Listen(s) accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return submitManualMappingAsync(submitManualMapping, _callback);
        }
    }

    /**
     * Submit a manual mapping of a recording messybrainz ID to a musicbrainz recording id.
     * 
     * @param submitManualMapping  (required)
     * @return APIsubmitManualMappingRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listen(s) accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
     </table>
     */
    public APIsubmitManualMappingRequest submitManualMapping(SubmitManualMapping submitManualMapping) {
        return new APIsubmitManualMappingRequest(submitManualMapping);
    }
}
