/*
 * ListenBrainz Swagger - OpenAPI 3.0
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.hihn.listenbrainz;

import org.hihn.listenbrainz.ApiCallback;
import org.hihn.listenbrainz.ApiClient;
import org.hihn.listenbrainz.ApiException;
import org.hihn.listenbrainz.ApiResponse;
import org.hihn.listenbrainz.Configuration;
import org.hihn.listenbrainz.Pair;
import org.hihn.listenbrainz.ProgressRequestBody;
import org.hihn.listenbrainz.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.hihn.listenbrainz.AllowedStatisticsRange;
import org.hihn.listenbrainz.CoverTypes;
import org.hihn.listenbrainz.CreateCoverArtGrid;
import java.io.File;
import org.hihn.listenbrainz.YearInMusicImage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LbArtApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LbArtApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LbArtApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCoverArtGridCall(CreateCoverArtGrid createCoverArtGrid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCoverArtGrid;

        // create path and map variables
        String localVarPath = "/1/art/grid/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/svg+xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCoverArtGridValidateBeforeCall(CreateCoverArtGrid createCoverArtGrid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createCoverArtGrid' is set
        if (createCoverArtGrid == null) {
            throw new ApiException("Missing the required parameter 'createCoverArtGrid' when calling createCoverArtGrid(Async)");
        }

        return createCoverArtGridCall(createCoverArtGrid, _callback);

    }


    private ApiResponse<File> createCoverArtGridWithHttpInfo(CreateCoverArtGrid createCoverArtGrid) throws ApiException {
        okhttp3.Call localVarCall = createCoverArtGridValidateBeforeCall(createCoverArtGrid, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCoverArtGridAsync(CreateCoverArtGrid createCoverArtGrid, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCoverArtGridValidateBeforeCall(createCoverArtGrid, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateCoverArtGridRequest {
        private final CreateCoverArtGrid createCoverArtGrid;

        private APIcreateCoverArtGridRequest(CreateCoverArtGrid createCoverArtGrid) {
            this.createCoverArtGrid = createCoverArtGrid;
        }

        /**
         * Build call for createCoverArtGrid
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Cover art created successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON or invalid options in JSON passed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createCoverArtGridCall(createCoverArtGrid, _callback);
        }

        /**
         * Execute createCoverArtGrid request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Cover art created successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON or invalid options in JSON passed. </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = createCoverArtGridWithHttpInfo(createCoverArtGrid);
            return localVarResp.getData();
        }

        /**
         * Execute createCoverArtGrid request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Cover art created successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON or invalid options in JSON passed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return createCoverArtGridWithHttpInfo(createCoverArtGrid);
        }

        /**
         * Execute createCoverArtGrid request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Cover art created successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON or invalid options in JSON passed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return createCoverArtGridAsync(createCoverArtGrid, _callback);
        }
    }

    /**
     * Create a cover art grid SVG file from the POSTed JSON data to this endpoint.
     * 
     * @param createCoverArtGrid  (required)
     * @return APIcreateCoverArtGridRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cover art created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON or invalid options in JSON passed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateCoverArtGridRequest createCoverArtGrid(CreateCoverArtGrid createCoverArtGrid) {
        return new APIcreateCoverArtGridRequest(createCoverArtGrid);
    }
    private okhttp3.Call createCoverArtGridForUserCall(String userName, AllowedStatisticsRange timeRange, Integer dimension, Integer layout, Integer imageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/art/grid-stats/{user_name}/{time_range}/{dimension}/{layout}/{image_size}"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()))
            .replace("{" + "time_range" + "}", localVarApiClient.escapeString(timeRange.toString()))
            .replace("{" + "dimension" + "}", localVarApiClient.escapeString(dimension.toString()))
            .replace("{" + "layout" + "}", localVarApiClient.escapeString(layout.toString()))
            .replace("{" + "image_size" + "}", localVarApiClient.escapeString(imageSize.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/svg+xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCoverArtGridForUserValidateBeforeCall(String userName, AllowedStatisticsRange timeRange, Integer dimension, Integer layout, Integer imageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling createCoverArtGridForUser(Async)");
        }

        // verify the required parameter 'timeRange' is set
        if (timeRange == null) {
            throw new ApiException("Missing the required parameter 'timeRange' when calling createCoverArtGridForUser(Async)");
        }

        // verify the required parameter 'dimension' is set
        if (dimension == null) {
            throw new ApiException("Missing the required parameter 'dimension' when calling createCoverArtGridForUser(Async)");
        }

        // verify the required parameter 'layout' is set
        if (layout == null) {
            throw new ApiException("Missing the required parameter 'layout' when calling createCoverArtGridForUser(Async)");
        }

        // verify the required parameter 'imageSize' is set
        if (imageSize == null) {
            throw new ApiException("Missing the required parameter 'imageSize' when calling createCoverArtGridForUser(Async)");
        }

        return createCoverArtGridForUserCall(userName, timeRange, dimension, layout, imageSize, _callback);

    }


    private ApiResponse<File> createCoverArtGridForUserWithHttpInfo(String userName, AllowedStatisticsRange timeRange, Integer dimension, Integer layout, Integer imageSize) throws ApiException {
        okhttp3.Call localVarCall = createCoverArtGridForUserValidateBeforeCall(userName, timeRange, dimension, layout, imageSize, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCoverArtGridForUserAsync(String userName, AllowedStatisticsRange timeRange, Integer dimension, Integer layout, Integer imageSize, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCoverArtGridForUserValidateBeforeCall(userName, timeRange, dimension, layout, imageSize, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateCoverArtGridForUserRequest {
        private final String userName;
        private final AllowedStatisticsRange timeRange;
        private final Integer dimension;
        private final Integer layout;
        private final Integer imageSize;

        private APIcreateCoverArtGridForUserRequest(String userName, AllowedStatisticsRange timeRange, Integer dimension, Integer layout, Integer imageSize) {
            this.userName = userName;
            this.timeRange = timeRange;
            this.dimension = dimension;
            this.layout = layout;
            this.imageSize = imageSize;
        }

        /**
         * Build call for createCoverArtGridForUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Cover art created successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON or invalid options in JSON passed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createCoverArtGridForUserCall(userName, timeRange, dimension, layout, imageSize, _callback);
        }

        /**
         * Execute createCoverArtGridForUser request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Cover art created successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON or invalid options in JSON passed. </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = createCoverArtGridForUserWithHttpInfo(userName, timeRange, dimension, layout, imageSize);
            return localVarResp.getData();
        }

        /**
         * Execute createCoverArtGridForUser request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Cover art created successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON or invalid options in JSON passed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return createCoverArtGridForUserWithHttpInfo(userName, timeRange, dimension, layout, imageSize);
        }

        /**
         * Execute createCoverArtGridForUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Cover art created successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON or invalid options in JSON passed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return createCoverArtGridForUserAsync(userName, timeRange, dimension, layout, imageSize, _callback);
        }
    }

    /**
     * Create a cover art grid SVG file from the stats of a given user.
     * 
     * @param userName The name of the user for whom to create the cover art. (required)
     * @param timeRange Must be a statistics time range. (required)
     * @param dimension The dimension to use for this grid. A grid of dimension 3 has 3 images across and 3 images down, for a total of 9 images. (required)
     * @param layout The layout to be used for this grid. Layout 0 is always a simple grid, but other layouts may have image images be of different sizes. See https://art.listenbrainz.org for examples of the available layouts. (required)
     * @param imageSize The size of the cover art image. (required)
     * @return APIcreateCoverArtGridForUserRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cover art created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON or invalid options in JSON passed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateCoverArtGridForUserRequest createCoverArtGridForUser(String userName, AllowedStatisticsRange timeRange, Integer dimension, Integer layout, Integer imageSize) {
        return new APIcreateCoverArtGridForUserRequest(userName, timeRange, dimension, layout, imageSize);
    }
    private okhttp3.Call createCustomCoverArtCall(CoverTypes customName, String userName, AllowedStatisticsRange timeRange, Integer imageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/art/{custom_name}/{user_name}/{time_range}/{image_size}"
            .replace("{" + "custom_name" + "}", localVarApiClient.escapeString(customName.toString()))
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()))
            .replace("{" + "time_range" + "}", localVarApiClient.escapeString(timeRange.toString()))
            .replace("{" + "image_size" + "}", localVarApiClient.escapeString(imageSize.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/svg+xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomCoverArtValidateBeforeCall(CoverTypes customName, String userName, AllowedStatisticsRange timeRange, Integer imageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customName' is set
        if (customName == null) {
            throw new ApiException("Missing the required parameter 'customName' when calling createCustomCoverArt(Async)");
        }

        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling createCustomCoverArt(Async)");
        }

        // verify the required parameter 'timeRange' is set
        if (timeRange == null) {
            throw new ApiException("Missing the required parameter 'timeRange' when calling createCustomCoverArt(Async)");
        }

        // verify the required parameter 'imageSize' is set
        if (imageSize == null) {
            throw new ApiException("Missing the required parameter 'imageSize' when calling createCustomCoverArt(Async)");
        }

        return createCustomCoverArtCall(customName, userName, timeRange, imageSize, _callback);

    }


    private ApiResponse<File> createCustomCoverArtWithHttpInfo(CoverTypes customName, String userName, AllowedStatisticsRange timeRange, Integer imageSize) throws ApiException {
        okhttp3.Call localVarCall = createCustomCoverArtValidateBeforeCall(customName, userName, timeRange, imageSize, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCustomCoverArtAsync(CoverTypes customName, String userName, AllowedStatisticsRange timeRange, Integer imageSize, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomCoverArtValidateBeforeCall(customName, userName, timeRange, imageSize, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateCustomCoverArtRequest {
        private final CoverTypes customName;
        private final String userName;
        private final AllowedStatisticsRange timeRange;
        private final Integer imageSize;

        private APIcreateCustomCoverArtRequest(CoverTypes customName, String userName, AllowedStatisticsRange timeRange, Integer imageSize) {
            this.customName = customName;
            this.userName = userName;
            this.timeRange = timeRange;
            this.imageSize = imageSize;
        }

        /**
         * Build call for createCustomCoverArt
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Cover art created successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON or invalid options in JSON passed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createCustomCoverArtCall(customName, userName, timeRange, imageSize, _callback);
        }

        /**
         * Execute createCustomCoverArt request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Cover art created successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON or invalid options in JSON passed. </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = createCustomCoverArtWithHttpInfo(customName, userName, timeRange, imageSize);
            return localVarResp.getData();
        }

        /**
         * Execute createCustomCoverArt request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Cover art created successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON or invalid options in JSON passed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return createCustomCoverArtWithHttpInfo(customName, userName, timeRange, imageSize);
        }

        /**
         * Execute createCustomCoverArt request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Cover art created successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON or invalid options in JSON passed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return createCustomCoverArtAsync(customName, userName, timeRange, imageSize, _callback);
        }
    }

    /**
     * Create a custom cover art SVG file from the stats of a given user.
     * 
     * @param customName The name of cover art to be generated. (required)
     * @param userName The name of the user for whom to create the cover art. (required)
     * @param timeRange Must be a statistics time range. (required)
     * @param imageSize The size of the cover art image. (required)
     * @return APIcreateCustomCoverArtRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cover art created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON or invalid options in JSON passed. </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateCustomCoverArtRequest createCustomCoverArt(CoverTypes customName, String userName, AllowedStatisticsRange timeRange, Integer imageSize) {
        return new APIcreateCustomCoverArtRequest(customName, userName, timeRange, imageSize);
    }
    private okhttp3.Call yearInMusicCall(Integer year, String userName, YearInMusicImage image, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/art/year-in-music/{year}/{user_name}"
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()))
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (image != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("image", image));
        }

        final String[] localVarAccepts = {
            "image/svg+xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call yearInMusicValidateBeforeCall(Integer year, String userName, YearInMusicImage image, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling yearInMusic(Async)");
        }

        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling yearInMusic(Async)");
        }

        // verify the required parameter 'image' is set
        if (image == null) {
            throw new ApiException("Missing the required parameter 'image' when calling yearInMusic(Async)");
        }

        return yearInMusicCall(year, userName, image, _callback);

    }


    private ApiResponse<File> yearInMusicWithHttpInfo(Integer year, String userName, YearInMusicImage image) throws ApiException {
        okhttp3.Call localVarCall = yearInMusicValidateBeforeCall(year, userName, image, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call yearInMusicAsync(Integer year, String userName, YearInMusicImage image, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = yearInMusicValidateBeforeCall(year, userName, image, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIyearInMusicRequest {
        private final Integer year;
        private final String userName;
        private final YearInMusicImage image;

        private APIyearInMusicRequest(Integer year, String userName, YearInMusicImage image) {
            this.year = year;
            this.userName = userName;
            this.image = image;
        }

        /**
         * Build call for yearInMusic
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Cover art created successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON or invalid options in JSON passed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return yearInMusicCall(year, userName, image, _callback);
        }

        /**
         * Execute yearInMusic request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Cover art created successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON or invalid options in JSON passed. </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = yearInMusicWithHttpInfo(year, userName, image);
            return localVarResp.getData();
        }

        /**
         * Execute yearInMusic request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Cover art created successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON or invalid options in JSON passed. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return yearInMusicWithHttpInfo(year, userName, image);
        }

        /**
         * Execute yearInMusic request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Cover art created successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON or invalid options in JSON passed. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return yearInMusicAsync(year, userName, image, _callback);
        }
    }

    /**
     * Create the shareable svg image using YIM stats.
     * 
     * @param year  (required)
     * @param userName The name of the user for whom to create the cover art. (required)
     * @param image  (required)
     * @return APIyearInMusicRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cover art created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON or invalid options in JSON passed. </td><td>  -  </td></tr>
     </table>
     */
    public APIyearInMusicRequest yearInMusic(Integer year, String userName, YearInMusicImage image) {
        return new APIyearInMusicRequest(year, userName, image);
    }
}
