/*
 * ListenBrainz Swagger - OpenAPI 3.0
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.hihn.listenbrainz;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.hihn.listenbrainz.PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrackAdditionalMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.hihn.listenbrainz.JSON;

/**
 * PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack {
  public static final String SERIALIZED_NAME_ARTIST_IDENTIFIERS = "artist_identifiers";
  @SerializedName(SERIALIZED_NAME_ARTIST_IDENTIFIERS)
  private List<String> artistIdentifiers = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELEASE_IDENTIFIER = "release_identifier";
  @SerializedName(SERIALIZED_NAME_RELEASE_IDENTIFIER)
  private String releaseIdentifier;

  public static final String SERIALIZED_NAME_ADDED_AT = "added_at";
  @SerializedName(SERIALIZED_NAME_ADDED_AT)
  private String addedAt;

  public static final String SERIALIZED_NAME_ADDED_BY = "added_by";
  @SerializedName(SERIALIZED_NAME_ADDED_BY)
  private String addedBy;

  public static final String SERIALIZED_NAME_ADDITIONAL_METADATA = "additional_metadata";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_METADATA)
  private PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrackAdditionalMetadata additionalMetadata;

  public PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack() {
  }

  public PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack artistIdentifiers(List<String> artistIdentifiers) {
    this.artistIdentifiers = artistIdentifiers;
    return this;
  }

  public PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack addArtistIdentifiersItem(String artistIdentifiersItem) {
    if (this.artistIdentifiers == null) {
      this.artistIdentifiers = new ArrayList<>();
    }
    this.artistIdentifiers.add(artistIdentifiersItem);
    return this;
  }

  /**
   * Get artistIdentifiers
   * @return artistIdentifiers
   */
  @javax.annotation.Nullable
  public List<String> getArtistIdentifiers() {
    return artistIdentifiers;
  }

  public void setArtistIdentifiers(List<String> artistIdentifiers) {
    this.artistIdentifiers = artistIdentifiers;
  }


  public PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack releaseIdentifier(String releaseIdentifier) {
    this.releaseIdentifier = releaseIdentifier;
    return this;
  }

  /**
   * Get releaseIdentifier
   * @return releaseIdentifier
   */
  @javax.annotation.Nullable
  public String getReleaseIdentifier() {
    return releaseIdentifier;
  }

  public void setReleaseIdentifier(String releaseIdentifier) {
    this.releaseIdentifier = releaseIdentifier;
  }


  public PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack addedAt(String addedAt) {
    this.addedAt = addedAt;
    return this;
  }

  /**
   * Get addedAt
   * @return addedAt
   */
  @javax.annotation.Nullable
  public String getAddedAt() {
    return addedAt;
  }

  public void setAddedAt(String addedAt) {
    this.addedAt = addedAt;
  }


  public PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack addedBy(String addedBy) {
    this.addedBy = addedBy;
    return this;
  }

  /**
   * Get addedBy
   * @return addedBy
   */
  @javax.annotation.Nullable
  public String getAddedBy() {
    return addedBy;
  }

  public void setAddedBy(String addedBy) {
    this.addedBy = addedBy;
  }


  public PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack additionalMetadata(PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrackAdditionalMetadata additionalMetadata) {
    this.additionalMetadata = additionalMetadata;
    return this;
  }

  /**
   * Get additionalMetadata
   * @return additionalMetadata
   */
  @javax.annotation.Nullable
  public PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrackAdditionalMetadata getAdditionalMetadata() {
    return additionalMetadata;
  }

  public void setAdditionalMetadata(PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrackAdditionalMetadata additionalMetadata) {
    this.additionalMetadata = additionalMetadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack playlistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack = (PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack) o;
    return Objects.equals(this.artistIdentifiers, playlistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack.artistIdentifiers) &&
        Objects.equals(this.releaseIdentifier, playlistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack.releaseIdentifier) &&
        Objects.equals(this.addedAt, playlistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack.addedAt) &&
        Objects.equals(this.addedBy, playlistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack.addedBy) &&
        Objects.equals(this.additionalMetadata, playlistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack.additionalMetadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artistIdentifiers, releaseIdentifier, addedAt, addedBy, additionalMetadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack {\n");
    sb.append("    artistIdentifiers: ").append(toIndentedString(artistIdentifiers)).append("\n");
    sb.append("    releaseIdentifier: ").append(toIndentedString(releaseIdentifier)).append("\n");
    sb.append("    addedAt: ").append(toIndentedString(addedAt)).append("\n");
    sb.append("    addedBy: ").append(toIndentedString(addedBy)).append("\n");
    sb.append("    additionalMetadata: ").append(toIndentedString(additionalMetadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("artist_identifiers");
    openapiFields.add("release_identifier");
    openapiFields.add("added_at");
    openapiFields.add("added_by");
    openapiFields.add("additional_metadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack is not found in the empty JSON string", PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("artist_identifiers") != null && !jsonObj.get("artist_identifiers").isJsonNull() && !jsonObj.get("artist_identifiers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `artist_identifiers` to be an array in the JSON string but got `%s`", jsonObj.get("artist_identifiers").toString()));
      }
      if ((jsonObj.get("release_identifier") != null && !jsonObj.get("release_identifier").isJsonNull()) && !jsonObj.get("release_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release_identifier").toString()));
      }
      if ((jsonObj.get("added_at") != null && !jsonObj.get("added_at").isJsonNull()) && !jsonObj.get("added_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `added_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("added_at").toString()));
      }
      if ((jsonObj.get("added_by") != null && !jsonObj.get("added_by").isJsonNull()) && !jsonObj.get("added_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `added_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("added_by").toString()));
      }
      // validate the optional field `additional_metadata`
      if (jsonObj.get("additional_metadata") != null && !jsonObj.get("additional_metadata").isJsonNull()) {
        PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrackAdditionalMetadata.validateJsonElement(jsonObj.get("additional_metadata"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack.class));

       return (TypeAdapter<T>) new TypeAdapter<PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack>() {
           @Override
           public void write(JsonWriter out, PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack
   * @throws IOException if the JSON string is invalid with respect to PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack
   */
  public static PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack.class);
  }

  /**
   * Convert an instance of PlaylistTrackInnerExtensionHttpsMusicbrainzOrgDocJspfTrack to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

