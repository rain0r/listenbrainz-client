/*
 * ListenBrainz Swagger - OpenAPI 3.0
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.hihn.listenbrainz;

import org.hihn.listenbrainz.ApiCallback;
import org.hihn.listenbrainz.ApiClient;
import org.hihn.listenbrainz.ApiException;
import org.hihn.listenbrainz.ApiResponse;
import org.hihn.listenbrainz.Configuration;
import org.hihn.listenbrainz.Pair;
import org.hihn.listenbrainz.ProgressRequestBody;
import org.hihn.listenbrainz.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.hihn.listenbrainz.Artist200ResponseInner;
import org.hihn.listenbrainz.ArtistRequest;
import org.hihn.listenbrainz.Recording200ResponseInner;
import org.hihn.listenbrainz.RecordingRequest;
import org.hihn.listenbrainz.Release200ResponseInner;
import org.hihn.listenbrainz.ReleaseGroup200ResponseInner;
import org.hihn.listenbrainz.ReleaseGroupRequest;
import org.hihn.listenbrainz.ReleaseRequest;
import org.hihn.listenbrainz.TopRecordingsForArtistInner;
import org.hihn.listenbrainz.TopReleaseGroupsForArtistInner;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LbPopularityApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LbPopularityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LbPopularityApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call artistCall(ArtistRequest artistRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = artistRequest;

        // create path and map variables
        String localVarPath = "/1/popularity/artist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artistValidateBeforeCall(ArtistRequest artistRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'artistRequest' is set
        if (artistRequest == null) {
            throw new ApiException("Missing the required parameter 'artistRequest' when calling artist(Async)");
        }

        return artistCall(artistRequest, _callback);

    }


    private ApiResponse<List<Artist200ResponseInner>> artistWithHttpInfo(ArtistRequest artistRequest) throws ApiException {
        okhttp3.Call localVarCall = artistValidateBeforeCall(artistRequest, null);
        Type localVarReturnType = new TypeToken<List<Artist200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call artistAsync(ArtistRequest artistRequest, final ApiCallback<List<Artist200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = artistValidateBeforeCall(artistRequest, _callback);
        Type localVarReturnType = new TypeToken<List<Artist200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIartistRequest {
        private final ArtistRequest artistRequest;

        private APIartistRequest(ArtistRequest artistRequest) {
            this.artistRequest = artistRequest;
        }

        /**
         * Build call for artist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return artistCall(artistRequest, _callback);
        }

        /**
         * Execute artist request
         * @return List&lt;Artist200ResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public List<Artist200ResponseInner> execute() throws ApiException {
            ApiResponse<List<Artist200ResponseInner>> localVarResp = artistWithHttpInfo(artistRequest);
            return localVarResp.getData();
        }

        /**
         * Execute artist request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Artist200ResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Artist200ResponseInner>> executeWithHttpInfo() throws ApiException {
            return artistWithHttpInfo(artistRequest);
        }

        /**
         * Execute artist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Artist200ResponseInner>> _callback) throws ApiException {
            return artistAsync(artistRequest, _callback);
        }
    }

    /**
     * Get the total listen count and total unique listeners count for a given artist.  A JSON document with a list of artists and inc string must be POSTed. Up to MAX_ITEMS_PER_GET items can be requested at once.
     * 
     * @param artistRequest  (required)
     * @return APIartistRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
     </table>
     */
    public APIartistRequest artist(ArtistRequest artistRequest) {
        return new APIartistRequest(artistRequest);
    }
    private okhttp3.Call recordingCall(RecordingRequest recordingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = recordingRequest;

        // create path and map variables
        String localVarPath = "/1/popularity/recording";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recordingValidateBeforeCall(RecordingRequest recordingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recordingRequest' is set
        if (recordingRequest == null) {
            throw new ApiException("Missing the required parameter 'recordingRequest' when calling recording(Async)");
        }

        return recordingCall(recordingRequest, _callback);

    }


    private ApiResponse<List<Recording200ResponseInner>> recordingWithHttpInfo(RecordingRequest recordingRequest) throws ApiException {
        okhttp3.Call localVarCall = recordingValidateBeforeCall(recordingRequest, null);
        Type localVarReturnType = new TypeToken<List<Recording200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call recordingAsync(RecordingRequest recordingRequest, final ApiCallback<List<Recording200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = recordingValidateBeforeCall(recordingRequest, _callback);
        Type localVarReturnType = new TypeToken<List<Recording200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIrecordingRequest {
        private final RecordingRequest recordingRequest;

        private APIrecordingRequest(RecordingRequest recordingRequest) {
            this.recordingRequest = recordingRequest;
        }

        /**
         * Build call for recording
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return recordingCall(recordingRequest, _callback);
        }

        /**
         * Execute recording request
         * @return List&lt;Recording200ResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public List<Recording200ResponseInner> execute() throws ApiException {
            ApiResponse<List<Recording200ResponseInner>> localVarResp = recordingWithHttpInfo(recordingRequest);
            return localVarResp.getData();
        }

        /**
         * Execute recording request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Recording200ResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Recording200ResponseInner>> executeWithHttpInfo() throws ApiException {
            return recordingWithHttpInfo(recordingRequest);
        }

        /**
         * Execute recording request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Recording200ResponseInner>> _callback) throws ApiException {
            return recordingAsync(recordingRequest, _callback);
        }
    }

    /**
     * Get the total listen count and total unique listeners count for a given recording.  A JSON document with a list of recording_mbids and inc string must be POSTed. Up to MAX_ITEMS_PER_GET items can be requested at once.
     * 
     * @param recordingRequest  (required)
     * @return APIrecordingRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
     </table>
     */
    public APIrecordingRequest recording(RecordingRequest recordingRequest) {
        return new APIrecordingRequest(recordingRequest);
    }
    private okhttp3.Call releaseCall(ReleaseRequest releaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = releaseRequest;

        // create path and map variables
        String localVarPath = "/1/popularity/release";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releaseValidateBeforeCall(ReleaseRequest releaseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'releaseRequest' is set
        if (releaseRequest == null) {
            throw new ApiException("Missing the required parameter 'releaseRequest' when calling release(Async)");
        }

        return releaseCall(releaseRequest, _callback);

    }


    private ApiResponse<List<Release200ResponseInner>> releaseWithHttpInfo(ReleaseRequest releaseRequest) throws ApiException {
        okhttp3.Call localVarCall = releaseValidateBeforeCall(releaseRequest, null);
        Type localVarReturnType = new TypeToken<List<Release200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call releaseAsync(ReleaseRequest releaseRequest, final ApiCallback<List<Release200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = releaseValidateBeforeCall(releaseRequest, _callback);
        Type localVarReturnType = new TypeToken<List<Release200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIreleaseRequest {
        private final ReleaseRequest releaseRequest;

        private APIreleaseRequest(ReleaseRequest releaseRequest) {
            this.releaseRequest = releaseRequest;
        }

        /**
         * Build call for release
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return releaseCall(releaseRequest, _callback);
        }

        /**
         * Execute release request
         * @return List&lt;Release200ResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public List<Release200ResponseInner> execute() throws ApiException {
            ApiResponse<List<Release200ResponseInner>> localVarResp = releaseWithHttpInfo(releaseRequest);
            return localVarResp.getData();
        }

        /**
         * Execute release request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Release200ResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Release200ResponseInner>> executeWithHttpInfo() throws ApiException {
            return releaseWithHttpInfo(releaseRequest);
        }

        /**
         * Execute release request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Release200ResponseInner>> _callback) throws ApiException {
            return releaseAsync(releaseRequest, _callback);
        }
    }

    /**
     * Get the total listen count and total unique listeners count for a given release.  A JSON document with a list of releases and inc string must be POSTed. Up to MAX_ITEMS_PER_GET items can be requested at once.
     * 
     * @param releaseRequest  (required)
     * @return APIreleaseRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
     </table>
     */
    public APIreleaseRequest release(ReleaseRequest releaseRequest) {
        return new APIreleaseRequest(releaseRequest);
    }
    private okhttp3.Call releaseGroupCall(ReleaseGroupRequest releaseGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = releaseGroupRequest;

        // create path and map variables
        String localVarPath = "/1/popularity/release-group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releaseGroupValidateBeforeCall(ReleaseGroupRequest releaseGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'releaseGroupRequest' is set
        if (releaseGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'releaseGroupRequest' when calling releaseGroup(Async)");
        }

        return releaseGroupCall(releaseGroupRequest, _callback);

    }


    private ApiResponse<List<ReleaseGroup200ResponseInner>> releaseGroupWithHttpInfo(ReleaseGroupRequest releaseGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = releaseGroupValidateBeforeCall(releaseGroupRequest, null);
        Type localVarReturnType = new TypeToken<List<ReleaseGroup200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call releaseGroupAsync(ReleaseGroupRequest releaseGroupRequest, final ApiCallback<List<ReleaseGroup200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = releaseGroupValidateBeforeCall(releaseGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<List<ReleaseGroup200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIreleaseGroupRequest {
        private final ReleaseGroupRequest releaseGroupRequest;

        private APIreleaseGroupRequest(ReleaseGroupRequest releaseGroupRequest) {
            this.releaseGroupRequest = releaseGroupRequest;
        }

        /**
         * Build call for releaseGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return releaseGroupCall(releaseGroupRequest, _callback);
        }

        /**
         * Execute releaseGroup request
         * @return List&lt;ReleaseGroup200ResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public List<ReleaseGroup200ResponseInner> execute() throws ApiException {
            ApiResponse<List<ReleaseGroup200ResponseInner>> localVarResp = releaseGroupWithHttpInfo(releaseGroupRequest);
            return localVarResp.getData();
        }

        /**
         * Execute releaseGroup request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ReleaseGroup200ResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ReleaseGroup200ResponseInner>> executeWithHttpInfo() throws ApiException {
            return releaseGroupWithHttpInfo(releaseGroupRequest);
        }

        /**
         * Execute releaseGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ReleaseGroup200ResponseInner>> _callback) throws ApiException {
            return releaseGroupAsync(releaseGroupRequest, _callback);
        }
    }

    /**
     * Get the total listen count and total unique listeners count for a given release group.  A JSON document with a list of release groups and inc string must be POSTed. Up to MAX_ITEMS_PER_GET items can be requested at once.
     * 
     * @param releaseGroupRequest  (required)
     * @return APIreleaseGroupRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
     </table>
     */
    public APIreleaseGroupRequest releaseGroup(ReleaseGroupRequest releaseGroupRequest) {
        return new APIreleaseGroupRequest(releaseGroupRequest);
    }
    private okhttp3.Call topRecordingsForArtistCall(UUID artistMbid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/popularity/top-recordings-for-artist/{artist_mbid}"
            .replace("{" + "artist_mbid" + "}", localVarApiClient.escapeString(artistMbid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topRecordingsForArtistValidateBeforeCall(UUID artistMbid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'artistMbid' is set
        if (artistMbid == null) {
            throw new ApiException("Missing the required parameter 'artistMbid' when calling topRecordingsForArtist(Async)");
        }

        return topRecordingsForArtistCall(artistMbid, _callback);

    }


    private ApiResponse<List<TopRecordingsForArtistInner>> topRecordingsForArtistWithHttpInfo(UUID artistMbid) throws ApiException {
        okhttp3.Call localVarCall = topRecordingsForArtistValidateBeforeCall(artistMbid, null);
        Type localVarReturnType = new TypeToken<List<TopRecordingsForArtistInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call topRecordingsForArtistAsync(UUID artistMbid, final ApiCallback<List<TopRecordingsForArtistInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = topRecordingsForArtistValidateBeforeCall(artistMbid, _callback);
        Type localVarReturnType = new TypeToken<List<TopRecordingsForArtistInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItopRecordingsForArtistRequest {
        private final UUID artistMbid;

        private APItopRecordingsForArtistRequest(UUID artistMbid) {
            this.artistMbid = artistMbid;
        }

        /**
         * Build call for topRecordingsForArtist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return topRecordingsForArtistCall(artistMbid, _callback);
        }

        /**
         * Execute topRecordingsForArtist request
         * @return List&lt;TopRecordingsForArtistInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public List<TopRecordingsForArtistInner> execute() throws ApiException {
            ApiResponse<List<TopRecordingsForArtistInner>> localVarResp = topRecordingsForArtistWithHttpInfo(artistMbid);
            return localVarResp.getData();
        }

        /**
         * Execute topRecordingsForArtist request with HTTP info returned
         * @return ApiResponse&lt;List&lt;TopRecordingsForArtistInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<TopRecordingsForArtistInner>> executeWithHttpInfo() throws ApiException {
            return topRecordingsForArtistWithHttpInfo(artistMbid);
        }

        /**
         * Execute topRecordingsForArtist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<TopRecordingsForArtistInner>> _callback) throws ApiException {
            return topRecordingsForArtistAsync(artistMbid, _callback);
        }
    }

    /**
     * Get a list of all recordings ever pinned by a user with given user_name in descending order of the time they were originally pinned.
     * 
     * @param artistMbid  (required)
     * @return APItopRecordingsForArtistRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
     </table>
     */
    public APItopRecordingsForArtistRequest topRecordingsForArtist(UUID artistMbid) {
        return new APItopRecordingsForArtistRequest(artistMbid);
    }
    private okhttp3.Call topReleaseGroupForArtistCall(UUID artistMbid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/popularity/top-release-groups-for-artist/{artist_mbid}"
            .replace("{" + "artist_mbid" + "}", localVarApiClient.escapeString(artistMbid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topReleaseGroupForArtistValidateBeforeCall(UUID artistMbid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'artistMbid' is set
        if (artistMbid == null) {
            throw new ApiException("Missing the required parameter 'artistMbid' when calling topReleaseGroupForArtist(Async)");
        }

        return topReleaseGroupForArtistCall(artistMbid, _callback);

    }


    private ApiResponse<List<TopReleaseGroupsForArtistInner>> topReleaseGroupForArtistWithHttpInfo(UUID artistMbid) throws ApiException {
        okhttp3.Call localVarCall = topReleaseGroupForArtistValidateBeforeCall(artistMbid, null);
        Type localVarReturnType = new TypeToken<List<TopReleaseGroupsForArtistInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call topReleaseGroupForArtistAsync(UUID artistMbid, final ApiCallback<List<TopReleaseGroupsForArtistInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = topReleaseGroupForArtistValidateBeforeCall(artistMbid, _callback);
        Type localVarReturnType = new TypeToken<List<TopReleaseGroupsForArtistInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItopReleaseGroupForArtistRequest {
        private final UUID artistMbid;

        private APItopReleaseGroupForArtistRequest(UUID artistMbid) {
            this.artistMbid = artistMbid;
        }

        /**
         * Build call for topReleaseGroupForArtist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return topReleaseGroupForArtistCall(artistMbid, _callback);
        }

        /**
         * Execute topReleaseGroupForArtist request
         * @return List&lt;TopReleaseGroupsForArtistInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public List<TopReleaseGroupsForArtistInner> execute() throws ApiException {
            ApiResponse<List<TopReleaseGroupsForArtistInner>> localVarResp = topReleaseGroupForArtistWithHttpInfo(artistMbid);
            return localVarResp.getData();
        }

        /**
         * Execute topReleaseGroupForArtist request with HTTP info returned
         * @return ApiResponse&lt;List&lt;TopReleaseGroupsForArtistInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<TopReleaseGroupsForArtistInner>> executeWithHttpInfo() throws ApiException {
            return topReleaseGroupForArtistWithHttpInfo(artistMbid);
        }

        /**
         * Execute topReleaseGroupForArtist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<TopReleaseGroupsForArtistInner>> _callback) throws ApiException {
            return topReleaseGroupForArtistAsync(artistMbid, _callback);
        }
    }

    /**
     * Get the top release groups by listen count for a given artist.
     * 
     * @param artistMbid  (required)
     * @return APItopReleaseGroupForArtistRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid query parameters, see error message for details. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
     </table>
     */
    public APItopReleaseGroupForArtistRequest topReleaseGroupForArtist(UUID artistMbid) {
        return new APItopReleaseGroupForArtistRequest(artistMbid);
    }
}
