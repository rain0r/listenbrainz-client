/*
 * ListenBrainz Swagger - OpenAPI 3.0
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.hihn.listenbrainz;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.hihn.listenbrainz.PlaylistTrackInnerExtension;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.hihn.listenbrainz.JSON;

/**
 * PlaylistTrackInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class PlaylistTrackInner {
  public static final String SERIALIZED_NAME_ALBUM = "album";
  @SerializedName(SERIALIZED_NAME_ALBUM)
  private String album;

  public static final String SERIALIZED_NAME_CREATOR = "creator";
  @SerializedName(SERIALIZED_NAME_CREATOR)
  private String creator;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_EXTENSION = "extension";
  @SerializedName(SERIALIZED_NAME_EXTENSION)
  private PlaylistTrackInnerExtension extension;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private List<String> identifier = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public PlaylistTrackInner() {
  }

  public PlaylistTrackInner album(String album) {
    this.album = album;
    return this;
  }

  /**
   * Get album
   * @return album
   */
  @javax.annotation.Nullable
  public String getAlbum() {
    return album;
  }

  public void setAlbum(String album) {
    this.album = album;
  }


  public PlaylistTrackInner creator(String creator) {
    this.creator = creator;
    return this;
  }

  /**
   * Get creator
   * @return creator
   */
  @javax.annotation.Nullable
  public String getCreator() {
    return creator;
  }

  public void setCreator(String creator) {
    this.creator = creator;
  }


  public PlaylistTrackInner duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nullable
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public PlaylistTrackInner extension(PlaylistTrackInnerExtension extension) {
    this.extension = extension;
    return this;
  }

  /**
   * Get extension
   * @return extension
   */
  @javax.annotation.Nullable
  public PlaylistTrackInnerExtension getExtension() {
    return extension;
  }

  public void setExtension(PlaylistTrackInnerExtension extension) {
    this.extension = extension;
  }


  public PlaylistTrackInner identifier(List<String> identifier) {
    this.identifier = identifier;
    return this;
  }

  public PlaylistTrackInner addIdentifierItem(String identifierItem) {
    if (this.identifier == null) {
      this.identifier = new ArrayList<>();
    }
    this.identifier.add(identifierItem);
    return this;
  }

  /**
   * Get identifier
   * @return identifier
   */
  @javax.annotation.Nullable
  public List<String> getIdentifier() {
    return identifier;
  }

  public void setIdentifier(List<String> identifier) {
    this.identifier = identifier;
  }


  public PlaylistTrackInner title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlaylistTrackInner playlistTrackInner = (PlaylistTrackInner) o;
    return Objects.equals(this.album, playlistTrackInner.album) &&
        Objects.equals(this.creator, playlistTrackInner.creator) &&
        Objects.equals(this.duration, playlistTrackInner.duration) &&
        Objects.equals(this.extension, playlistTrackInner.extension) &&
        Objects.equals(this.identifier, playlistTrackInner.identifier) &&
        Objects.equals(this.title, playlistTrackInner.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(album, creator, duration, extension, identifier, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlaylistTrackInner {\n");
    sb.append("    album: ").append(toIndentedString(album)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("album");
    openapiFields.add("creator");
    openapiFields.add("duration");
    openapiFields.add("extension");
    openapiFields.add("identifier");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlaylistTrackInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlaylistTrackInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlaylistTrackInner is not found in the empty JSON string", PlaylistTrackInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlaylistTrackInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlaylistTrackInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("album") != null && !jsonObj.get("album").isJsonNull()) && !jsonObj.get("album").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `album` to be a primitive type in the JSON string but got `%s`", jsonObj.get("album").toString()));
      }
      if ((jsonObj.get("creator") != null && !jsonObj.get("creator").isJsonNull()) && !jsonObj.get("creator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creator").toString()));
      }
      // validate the optional field `extension`
      if (jsonObj.get("extension") != null && !jsonObj.get("extension").isJsonNull()) {
        PlaylistTrackInnerExtension.validateJsonElement(jsonObj.get("extension"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("identifier") != null && !jsonObj.get("identifier").isJsonNull() && !jsonObj.get("identifier").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifier` to be an array in the JSON string but got `%s`", jsonObj.get("identifier").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlaylistTrackInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlaylistTrackInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlaylistTrackInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlaylistTrackInner.class));

       return (TypeAdapter<T>) new TypeAdapter<PlaylistTrackInner>() {
           @Override
           public void write(JsonWriter out, PlaylistTrackInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlaylistTrackInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlaylistTrackInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlaylistTrackInner
   * @throws IOException if the JSON string is invalid with respect to PlaylistTrackInner
   */
  public static PlaylistTrackInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlaylistTrackInner.class);
  }

  /**
   * Convert an instance of PlaylistTrackInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

