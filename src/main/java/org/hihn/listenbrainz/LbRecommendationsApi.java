/*
 * ListenBrainz Swagger - OpenAPI 3.0
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.hihn.listenbrainz;

import org.hihn.listenbrainz.ApiCallback;
import org.hihn.listenbrainz.ApiClient;
import org.hihn.listenbrainz.ApiException;
import org.hihn.listenbrainz.ApiResponse;
import org.hihn.listenbrainz.Configuration;
import org.hihn.listenbrainz.Pair;
import org.hihn.listenbrainz.ProgressRequestBody;
import org.hihn.listenbrainz.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.hihn.listenbrainz.DeleteFeedbackRequest;
import org.hihn.listenbrainz.FeedbackGivenBy;
import org.hihn.listenbrainz.RecordingRecommendations;
import org.hihn.listenbrainz.RecordingsFeedbackGivenBy;
import org.hihn.listenbrainz.SubmitFeedbackRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LbRecommendationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LbRecommendationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LbRecommendationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteFeedbackCall(DeleteFeedbackRequest deleteFeedbackRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteFeedbackRequest;

        // create path and map variables
        String localVarPath = "/1/recommendations/feedback/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFeedbackValidateBeforeCall(DeleteFeedbackRequest deleteFeedbackRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteFeedbackRequest' is set
        if (deleteFeedbackRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteFeedbackRequest' when calling deleteFeedback(Async)");
        }

        return deleteFeedbackCall(deleteFeedbackRequest, _callback);

    }


    private ApiResponse<Void> deleteFeedbackWithHttpInfo(DeleteFeedbackRequest deleteFeedbackRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteFeedbackValidateBeforeCall(deleteFeedbackRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteFeedbackAsync(DeleteFeedbackRequest deleteFeedbackRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFeedbackValidateBeforeCall(deleteFeedbackRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteFeedbackRequest {
        private final DeleteFeedbackRequest deleteFeedbackRequest;

        private APIdeleteFeedbackRequest(DeleteFeedbackRequest deleteFeedbackRequest) {
            this.deleteFeedbackRequest = deleteFeedbackRequest;
        }

        /**
         * Build call for deleteFeedback
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteFeedbackCall(deleteFeedbackRequest, _callback);
        }

        /**
         * Execute deleteFeedback request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteFeedbackWithHttpInfo(deleteFeedbackRequest);
        }

        /**
         * Execute deleteFeedback request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteFeedbackWithHttpInfo(deleteFeedbackRequest);
        }

        /**
         * Execute deleteFeedback request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteFeedbackAsync(deleteFeedbackRequest, _callback);
        }
    }

    /**
     * Delete feedback for a user. A user token (found on https://listenbrainz.org/settings/ ) must be provided in the Authorization header! Each request should contain only one recording mbid in the payload.
     * 
     * @param deleteFeedbackRequest  (required)
     * @return APIdeleteFeedbackRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteFeedbackRequest deleteFeedback(DeleteFeedbackRequest deleteFeedbackRequest) {
        return new APIdeleteFeedbackRequest(deleteFeedbackRequest);
    }
    private okhttp3.Call feedbackGivenByCall(String userName, String rating, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/recommendations/feedback/user/{user_name}"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rating", rating));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call feedbackGivenByValidateBeforeCall(String userName, String rating, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling feedbackGivenBy(Async)");
        }

        return feedbackGivenByCall(userName, rating, count, offset, _callback);

    }


    private ApiResponse<FeedbackGivenBy> feedbackGivenByWithHttpInfo(String userName, String rating, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = feedbackGivenByValidateBeforeCall(userName, rating, count, offset, null);
        Type localVarReturnType = new TypeToken<FeedbackGivenBy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call feedbackGivenByAsync(String userName, String rating, Integer count, Integer offset, final ApiCallback<FeedbackGivenBy> _callback) throws ApiException {

        okhttp3.Call localVarCall = feedbackGivenByValidateBeforeCall(userName, rating, count, offset, _callback);
        Type localVarReturnType = new TypeToken<FeedbackGivenBy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIfeedbackGivenByRequest {
        private final String userName;
        private String rating;
        private Integer count;
        private Integer offset;

        private APIfeedbackGivenByRequest(String userName) {
            this.userName = userName;
        }

        /**
         * Set rating
         * @param rating Optional, refer to db/model/recommendation_feedback.py for allowed rating values. (optional)
         * @return APIfeedbackGivenByRequest
         */
        public APIfeedbackGivenByRequest rating(String rating) {
            this.rating = rating;
            return this;
        }

        /**
         * Set count
         * @param count Optional, number of recording mbids to return. (optional, default to 25)
         * @return APIfeedbackGivenByRequest
         */
        public APIfeedbackGivenByRequest count(Integer count) {
            this.count = count;
            return this;
        }

        /**
         * Set offset
         * @param offset Optional, number of mbids to skip from the beginning, for pagination. Ex. An offset of 5 means the 5 mbids will be skipped. (optional, default to 25)
         * @return APIfeedbackGivenByRequest
         */
        public APIfeedbackGivenByRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Build call for feedbackGivenBy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Recommendations for the user haven&#39;t been generated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return feedbackGivenByCall(userName, rating, count, offset, _callback);
        }

        /**
         * Execute feedbackGivenBy request
         * @return FeedbackGivenBy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Recommendations for the user haven&#39;t been generated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public FeedbackGivenBy execute() throws ApiException {
            ApiResponse<FeedbackGivenBy> localVarResp = feedbackGivenByWithHttpInfo(userName, rating, count, offset);
            return localVarResp.getData();
        }

        /**
         * Execute feedbackGivenBy request with HTTP info returned
         * @return ApiResponse&lt;FeedbackGivenBy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Recommendations for the user haven&#39;t been generated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FeedbackGivenBy> executeWithHttpInfo() throws ApiException {
            return feedbackGivenByWithHttpInfo(userName, rating, count, offset);
        }

        /**
         * Execute feedbackGivenBy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Recommendations for the user haven&#39;t been generated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FeedbackGivenBy> _callback) throws ApiException {
            return feedbackGivenByAsync(userName, rating, count, offset, _callback);
        }
    }

    /**
     * Get feedback given by user &#39;user_name&#39;.
     * 
     * @param userName The MusicBrainz ID of the user whose timeline is being requested. (required)
     * @return APIfeedbackGivenByRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Recommendations for the user haven&#39;t been generated, empty response will be returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIfeedbackGivenByRequest feedbackGivenBy(String userName) {
        return new APIfeedbackGivenByRequest(userName);
    }
    private okhttp3.Call recordingRecommendationsCall(String userName, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/cf/recommendation/user/{user_name}/recording"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recordingRecommendationsValidateBeforeCall(String userName, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling recordingRecommendations(Async)");
        }

        return recordingRecommendationsCall(userName, count, offset, _callback);

    }


    private ApiResponse<RecordingRecommendations> recordingRecommendationsWithHttpInfo(String userName, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = recordingRecommendationsValidateBeforeCall(userName, count, offset, null);
        Type localVarReturnType = new TypeToken<RecordingRecommendations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call recordingRecommendationsAsync(String userName, Integer count, Integer offset, final ApiCallback<RecordingRecommendations> _callback) throws ApiException {

        okhttp3.Call localVarCall = recordingRecommendationsValidateBeforeCall(userName, count, offset, _callback);
        Type localVarReturnType = new TypeToken<RecordingRecommendations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIrecordingRecommendationsRequest {
        private final String userName;
        private Integer count;
        private Integer offset;

        private APIrecordingRecommendationsRequest(String userName) {
            this.userName = userName;
        }

        /**
         * Set count
         * @param count Optional, number of recording mbids to return. (optional, default to 25)
         * @return APIrecordingRecommendationsRequest
         */
        public APIrecordingRecommendationsRequest count(Integer count) {
            this.count = count;
            return this;
        }

        /**
         * Set offset
         * @param offset Optional, number of mbids to skip from the beginning, for pagination. Ex. An offset of 5 means the 5 mbids will be skipped. (optional, default to 25)
         * @return APIrecordingRecommendationsRequest
         */
        public APIrecordingRecommendationsRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Build call for recordingRecommendations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, you have data! </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Recommendations for the user haven&#39;t been generated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return recordingRecommendationsCall(userName, count, offset, _callback);
        }

        /**
         * Execute recordingRecommendations request
         * @return RecordingRecommendations
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, you have data! </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Recommendations for the user haven&#39;t been generated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public RecordingRecommendations execute() throws ApiException {
            ApiResponse<RecordingRecommendations> localVarResp = recordingRecommendationsWithHttpInfo(userName, count, offset);
            return localVarResp.getData();
        }

        /**
         * Execute recordingRecommendations request with HTTP info returned
         * @return ApiResponse&lt;RecordingRecommendations&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, you have data! </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Recommendations for the user haven&#39;t been generated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecordingRecommendations> executeWithHttpInfo() throws ApiException {
            return recordingRecommendationsWithHttpInfo(userName, count, offset);
        }

        /**
         * Execute recordingRecommendations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful query, you have data! </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> Recommendations for the user haven&#39;t been generated, empty response will be returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecordingRecommendations> _callback) throws ApiException {
            return recordingRecommendationsAsync(userName, count, offset, _callback);
        }
    }

    /**
     * Get recommendations sorted on rating and ratings for user &#39;user_name&#39;.
     * 
     * @param userName The MusicBrainz ID of the user whose timeline is being requested. (required)
     * @return APIrecordingRecommendationsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful query, you have data! </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Recommendations for the user haven&#39;t been generated, empty response will be returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIrecordingRecommendationsRequest recordingRecommendations(String userName) {
        return new APIrecordingRecommendationsRequest(userName);
    }
    private okhttp3.Call recordingsFeedbackGivenByCall(String userName, List<UUID> mbids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/recommendations/feedback/user/{user_name}/recordings"
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mbids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "mbids", mbids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recordingsFeedbackGivenByValidateBeforeCall(String userName, List<UUID> mbids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling recordingsFeedbackGivenBy(Async)");
        }

        // verify the required parameter 'mbids' is set
        if (mbids == null) {
            throw new ApiException("Missing the required parameter 'mbids' when calling recordingsFeedbackGivenBy(Async)");
        }

        return recordingsFeedbackGivenByCall(userName, mbids, _callback);

    }


    private ApiResponse<RecordingsFeedbackGivenBy> recordingsFeedbackGivenByWithHttpInfo(String userName, List<UUID> mbids) throws ApiException {
        okhttp3.Call localVarCall = recordingsFeedbackGivenByValidateBeforeCall(userName, mbids, null);
        Type localVarReturnType = new TypeToken<RecordingsFeedbackGivenBy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call recordingsFeedbackGivenByAsync(String userName, List<UUID> mbids, final ApiCallback<RecordingsFeedbackGivenBy> _callback) throws ApiException {

        okhttp3.Call localVarCall = recordingsFeedbackGivenByValidateBeforeCall(userName, mbids, _callback);
        Type localVarReturnType = new TypeToken<RecordingsFeedbackGivenBy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIrecordingsFeedbackGivenByRequest {
        private final String userName;
        private final List<UUID> mbids;

        private APIrecordingsFeedbackGivenByRequest(String userName, List<UUID> mbids) {
            this.userName = userName;
            this.mbids = mbids;
        }

        /**
         * Build call for recordingsFeedbackGivenBy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return recordingsFeedbackGivenByCall(userName, mbids, _callback);
        }

        /**
         * Execute recordingsFeedbackGivenBy request
         * @return RecordingsFeedbackGivenBy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public RecordingsFeedbackGivenBy execute() throws ApiException {
            ApiResponse<RecordingsFeedbackGivenBy> localVarResp = recordingsFeedbackGivenByWithHttpInfo(userName, mbids);
            return localVarResp.getData();
        }

        /**
         * Execute recordingsFeedbackGivenBy request with HTTP info returned
         * @return ApiResponse&lt;RecordingsFeedbackGivenBy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecordingsFeedbackGivenBy> executeWithHttpInfo() throws ApiException {
            return recordingsFeedbackGivenByWithHttpInfo(userName, mbids);
        }

        /**
         * Execute recordingsFeedbackGivenBy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecordingsFeedbackGivenBy> _callback) throws ApiException {
            return recordingsFeedbackGivenByAsync(userName, mbids, _callback);
        }
    }

    /**
     * Get feedback given by user &#39;user_name&#39; for the list of recordings supplied.
     * 
     * @param userName The MusicBrainz ID of the user whose timeline is being requested. (required)
     * @param mbids Comma separated list of recording_mbids for which feedback records are to be fetched. (required)
     * @return APIrecordingsFeedbackGivenByRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIrecordingsFeedbackGivenByRequest recordingsFeedbackGivenBy(String userName, List<UUID> mbids) {
        return new APIrecordingsFeedbackGivenByRequest(userName, mbids);
    }
    private okhttp3.Call submitFeedbackCall(SubmitFeedbackRequest submitFeedbackRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = submitFeedbackRequest;

        // create path and map variables
        String localVarPath = "/1/recommendation/feedback/submit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitFeedbackValidateBeforeCall(SubmitFeedbackRequest submitFeedbackRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'submitFeedbackRequest' is set
        if (submitFeedbackRequest == null) {
            throw new ApiException("Missing the required parameter 'submitFeedbackRequest' when calling submitFeedback(Async)");
        }

        return submitFeedbackCall(submitFeedbackRequest, _callback);

    }


    private ApiResponse<Void> submitFeedbackWithHttpInfo(SubmitFeedbackRequest submitFeedbackRequest) throws ApiException {
        okhttp3.Call localVarCall = submitFeedbackValidateBeforeCall(submitFeedbackRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call submitFeedbackAsync(SubmitFeedbackRequest submitFeedbackRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitFeedbackValidateBeforeCall(submitFeedbackRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIsubmitFeedbackRequest {
        private final SubmitFeedbackRequest submitFeedbackRequest;

        private APIsubmitFeedbackRequest(SubmitFeedbackRequest submitFeedbackRequest) {
            this.submitFeedbackRequest = submitFeedbackRequest;
        }

        /**
         * Build call for submitFeedback
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return submitFeedbackCall(submitFeedbackRequest, _callback);
        }

        /**
         * Execute submitFeedback request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            submitFeedbackWithHttpInfo(submitFeedbackRequest);
        }

        /**
         * Execute submitFeedback request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return submitFeedbackWithHttpInfo(submitFeedbackRequest);
        }

        /**
         * Execute submitFeedback request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return submitFeedbackAsync(submitFeedbackRequest, _callback);
        }
    }

    /**
     * Submit recommendation feedback. A user token (found on https://listenbrainz.org/settings/ ) must be provided in the Authorization header! Each request should contain only one feedback in the payload.
     * 
     * @param submitFeedbackRequest  (required)
     * @return APIsubmitFeedbackRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Feedback accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
     </table>
     */
    public APIsubmitFeedbackRequest submitFeedback(SubmitFeedbackRequest submitFeedbackRequest) {
        return new APIsubmitFeedbackRequest(submitFeedbackRequest);
    }
}
