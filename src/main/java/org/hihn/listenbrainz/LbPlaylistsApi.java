/*
 * ListenBrainz Swagger - OpenAPI 3.0
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.hihn.listenbrainz;

import org.hihn.listenbrainz.ApiCallback;
import org.hihn.listenbrainz.ApiClient;
import org.hihn.listenbrainz.ApiException;
import org.hihn.listenbrainz.ApiResponse;
import org.hihn.listenbrainz.Configuration;
import org.hihn.listenbrainz.Pair;
import org.hihn.listenbrainz.ProgressRequestBody;
import org.hihn.listenbrainz.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.hihn.listenbrainz.CreatePlaylist200Response;
import org.hihn.listenbrainz.CreatePlaylistRequest;
import org.hihn.listenbrainz.ItemDeleteRequest;
import org.hihn.listenbrainz.MoveItemRequest;
import org.hihn.listenbrainz.Playlist;
import org.hihn.listenbrainz.Playlists;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LbPlaylistsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LbPlaylistsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LbPlaylistsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call appendRecordingsCall(UUID playlistMbid, Integer offset, Playlist playlist, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = playlist;

        // create path and map variables
        String localVarPath = "/1/playlist/{playlist_mbid}/item/add/{offset}"
            .replace("{" + "playlist_mbid" + "}", localVarApiClient.escapeString(playlistMbid.toString()))
            .replace("{" + "offset" + "}", localVarApiClient.escapeString(offset.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appendRecordingsValidateBeforeCall(UUID playlistMbid, Integer offset, Playlist playlist, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistMbid' is set
        if (playlistMbid == null) {
            throw new ApiException("Missing the required parameter 'playlistMbid' when calling appendRecordings(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling appendRecordings(Async)");
        }

        // verify the required parameter 'playlist' is set
        if (playlist == null) {
            throw new ApiException("Missing the required parameter 'playlist' when calling appendRecordings(Async)");
        }

        return appendRecordingsCall(playlistMbid, offset, playlist, _callback);

    }


    private ApiResponse<Void> appendRecordingsWithHttpInfo(UUID playlistMbid, Integer offset, Playlist playlist) throws ApiException {
        okhttp3.Call localVarCall = appendRecordingsValidateBeforeCall(playlistMbid, offset, playlist, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call appendRecordingsAsync(UUID playlistMbid, Integer offset, Playlist playlist, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appendRecordingsValidateBeforeCall(playlistMbid, offset, playlist, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIappendRecordingsRequest {
        private final UUID playlistMbid;
        private final Integer offset;
        private final Playlist playlist;

        private APIappendRecordingsRequest(UUID playlistMbid, Integer offset, Playlist playlist) {
            this.playlistMbid = playlistMbid;
            this.offset = offset;
            this.playlist = playlist;
        }

        /**
         * Build call for appendRecordings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. The requesting user was not allowed to carry out this operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return appendRecordingsCall(playlistMbid, offset, playlist, _callback);
        }

        /**
         * Execute appendRecordings request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. The requesting user was not allowed to carry out this operation. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            appendRecordingsWithHttpInfo(playlistMbid, offset, playlist);
        }

        /**
         * Execute appendRecordings request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. The requesting user was not allowed to carry out this operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return appendRecordingsWithHttpInfo(playlistMbid, offset, playlist);
        }

        /**
         * Execute appendRecordings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. The requesting user was not allowed to carry out this operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return appendRecordingsAsync(playlistMbid, offset, playlist, _callback);
        }
    }

    /**
     * Append recordings to an existing playlist by posting a playlist with one of more recordings in it. The playlist must be in JSPF format with MusicBrainz extensions, which is defined here: https://musicbrainz.org/doc/jspf .  If the offset is provided in the URL, then the recordings will be added at that offset, otherwise they will be added at the end of the playlist.
     * 
     * @param playlistMbid The playlist mbid to append to. (required)
     * @param offset Offset. (required)
     * @param playlist  (required)
     * @return APIappendRecordingsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Playlist accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON sent, see error message for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The requesting user was not allowed to carry out this operation. </td><td>  -  </td></tr>
     </table>
     */
    public APIappendRecordingsRequest appendRecordings(UUID playlistMbid, Integer offset, Playlist playlist) {
        return new APIappendRecordingsRequest(playlistMbid, offset, playlist);
    }
    private okhttp3.Call copyPlaylistCall(UUID playlistMbid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/playlist/{playlist_mbid}/copy"
            .replace("{" + "playlist_mbid" + "}", localVarApiClient.escapeString(playlistMbid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copyPlaylistValidateBeforeCall(UUID playlistMbid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistMbid' is set
        if (playlistMbid == null) {
            throw new ApiException("Missing the required parameter 'playlistMbid' when calling copyPlaylist(Async)");
        }

        return copyPlaylistCall(playlistMbid, _callback);

    }


    private ApiResponse<Void> copyPlaylistWithHttpInfo(UUID playlistMbid) throws ApiException {
        okhttp3.Call localVarCall = copyPlaylistValidateBeforeCall(playlistMbid, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call copyPlaylistAsync(UUID playlistMbid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = copyPlaylistValidateBeforeCall(playlistMbid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIcopyPlaylistRequest {
        private final UUID playlistMbid;

        private APIcopyPlaylistRequest(UUID playlistMbid) {
            this.playlistMbid = playlistMbid;
        }

        /**
         * Build call for copyPlaylist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist copied. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. The requesting user was not allowed to carry out this operation. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Playlist not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return copyPlaylistCall(playlistMbid, _callback);
        }

        /**
         * Execute copyPlaylist request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist copied. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. The requesting user was not allowed to carry out this operation. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Playlist not found. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            copyPlaylistWithHttpInfo(playlistMbid);
        }

        /**
         * Execute copyPlaylist request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist copied. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. The requesting user was not allowed to carry out this operation. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Playlist not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return copyPlaylistWithHttpInfo(playlistMbid);
        }

        /**
         * Execute copyPlaylist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist copied. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. The requesting user was not allowed to carry out this operation. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Playlist not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return copyPlaylistAsync(playlistMbid, _callback);
        }
    }

    /**
     * Copy a playlist - the new playlist will be given the name “Copy of &lt;playlist_name&gt;”. POST body data does not need to contain anything.
     * 
     * @param playlistMbid The playlist mbid to append to. (required)
     * @return APIcopyPlaylistRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Playlist copied. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The requesting user was not allowed to carry out this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Playlist not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIcopyPlaylistRequest copyPlaylist(UUID playlistMbid) {
        return new APIcopyPlaylistRequest(playlistMbid);
    }
    private okhttp3.Call createPlaylistCall(CreatePlaylistRequest createPlaylistRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPlaylistRequest;

        // create path and map variables
        String localVarPath = "/1/playlist/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPlaylistValidateBeforeCall(CreatePlaylistRequest createPlaylistRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createPlaylistRequest' is set
        if (createPlaylistRequest == null) {
            throw new ApiException("Missing the required parameter 'createPlaylistRequest' when calling createPlaylist(Async)");
        }

        return createPlaylistCall(createPlaylistRequest, _callback);

    }


    private ApiResponse<CreatePlaylist200Response> createPlaylistWithHttpInfo(CreatePlaylistRequest createPlaylistRequest) throws ApiException {
        okhttp3.Call localVarCall = createPlaylistValidateBeforeCall(createPlaylistRequest, null);
        Type localVarReturnType = new TypeToken<CreatePlaylist200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPlaylistAsync(CreatePlaylistRequest createPlaylistRequest, final ApiCallback<CreatePlaylist200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPlaylistValidateBeforeCall(createPlaylistRequest, _callback);
        Type localVarReturnType = new TypeToken<CreatePlaylist200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreatePlaylistRequest {
        private final CreatePlaylistRequest createPlaylistRequest;

        private APIcreatePlaylistRequest(CreatePlaylistRequest createPlaylistRequest) {
            this.createPlaylistRequest = createPlaylistRequest;
        }

        /**
         * Build call for createPlaylist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The submitting user is not allowed to create playlists for other users. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createPlaylistCall(createPlaylistRequest, _callback);
        }

        /**
         * Execute createPlaylist request
         * @return CreatePlaylist200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The submitting user is not allowed to create playlists for other users. </td><td>  -  </td></tr>
         </table>
         */
        public CreatePlaylist200Response execute() throws ApiException {
            ApiResponse<CreatePlaylist200Response> localVarResp = createPlaylistWithHttpInfo(createPlaylistRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createPlaylist request with HTTP info returned
         * @return ApiResponse&lt;CreatePlaylist200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The submitting user is not allowed to create playlists for other users. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreatePlaylist200Response> executeWithHttpInfo() throws ApiException {
            return createPlaylistWithHttpInfo(createPlaylistRequest);
        }

        /**
         * Execute createPlaylist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The submitting user is not allowed to create playlists for other users. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreatePlaylist200Response> _callback) throws ApiException {
            return createPlaylistAsync(createPlaylistRequest, _callback);
        }
    }

    /**
     * Create a playlist
     * Create a playlist. The playlist must be in JSPF format with MusicBrainz extensions, which is defined here: https://musicbrainz.org/doc/jspf . To create an empty playlist, you can send an empty playlist with only the title field filled out. If you would like to create a playlist populated with recordings, each of the track items in the playlist must have an identifier element that contains the MusicBrainz recording that includes the recording MBID.  When creating a playlist, only the playlist title and the track identifier elements will be used - all other elements in the posted JSPF wil be ignored.  If a created_for field is found and the user is not an approved playlist bot, then a 403 forbidden will be raised.
     * @param createPlaylistRequest  (required)
     * @return APIcreatePlaylistRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Playlist accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The submitting user is not allowed to create playlists for other users. </td><td>  -  </td></tr>
     </table>
     */
    public APIcreatePlaylistRequest createPlaylist(CreatePlaylistRequest createPlaylistRequest) {
        return new APIcreatePlaylistRequest(createPlaylistRequest);
    }
    private okhttp3.Call deletePlaylistCall(UUID playlistMbid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/playlist/{playlist_mbid}/delete"
            .replace("{" + "playlist_mbid" + "}", localVarApiClient.escapeString(playlistMbid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePlaylistValidateBeforeCall(UUID playlistMbid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistMbid' is set
        if (playlistMbid == null) {
            throw new ApiException("Missing the required parameter 'playlistMbid' when calling deletePlaylist(Async)");
        }

        return deletePlaylistCall(playlistMbid, _callback);

    }


    private ApiResponse<Void> deletePlaylistWithHttpInfo(UUID playlistMbid) throws ApiException {
        okhttp3.Call localVarCall = deletePlaylistValidateBeforeCall(playlistMbid, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePlaylistAsync(UUID playlistMbid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePlaylistValidateBeforeCall(playlistMbid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeletePlaylistRequest {
        private final UUID playlistMbid;

        private APIdeletePlaylistRequest(UUID playlistMbid) {
            this.playlistMbid = playlistMbid;
        }

        /**
         * Build call for deletePlaylist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The requesting user was not allowed to carry out this operation. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Playlist not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePlaylistCall(playlistMbid, _callback);
        }

        /**
         * Execute deletePlaylist request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The requesting user was not allowed to carry out this operation. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Playlist not found. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePlaylistWithHttpInfo(playlistMbid);
        }

        /**
         * Execute deletePlaylist request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The requesting user was not allowed to carry out this operation. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Playlist not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePlaylistWithHttpInfo(playlistMbid);
        }

        /**
         * Execute deletePlaylist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist deleted. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The requesting user was not allowed to carry out this operation. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Playlist not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePlaylistAsync(playlistMbid, _callback);
        }
    }

    /**
     * Delete a playlist.
     * POST body data does not need to contain anything.
     * @param playlistMbid The playlist mbid to fetch. (required)
     * @return APIdeletePlaylistRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Playlist deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The requesting user was not allowed to carry out this operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Playlist not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIdeletePlaylistRequest deletePlaylist(UUID playlistMbid) {
        return new APIdeletePlaylistRequest(playlistMbid);
    }
    private okhttp3.Call editPlaylistCall(UUID playlistMbid, CreatePlaylistRequest createPlaylistRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPlaylistRequest;

        // create path and map variables
        String localVarPath = "/1/playlist/edit/{playlist_mbid}"
            .replace("{" + "playlist_mbid" + "}", localVarApiClient.escapeString(playlistMbid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editPlaylistValidateBeforeCall(UUID playlistMbid, CreatePlaylistRequest createPlaylistRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistMbid' is set
        if (playlistMbid == null) {
            throw new ApiException("Missing the required parameter 'playlistMbid' when calling editPlaylist(Async)");
        }

        // verify the required parameter 'createPlaylistRequest' is set
        if (createPlaylistRequest == null) {
            throw new ApiException("Missing the required parameter 'createPlaylistRequest' when calling editPlaylist(Async)");
        }

        return editPlaylistCall(playlistMbid, createPlaylistRequest, _callback);

    }


    private ApiResponse<Void> editPlaylistWithHttpInfo(UUID playlistMbid, CreatePlaylistRequest createPlaylistRequest) throws ApiException {
        okhttp3.Call localVarCall = editPlaylistValidateBeforeCall(playlistMbid, createPlaylistRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call editPlaylistAsync(UUID playlistMbid, CreatePlaylistRequest createPlaylistRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = editPlaylistValidateBeforeCall(playlistMbid, createPlaylistRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIeditPlaylistRequest {
        private final UUID playlistMbid;
        private final CreatePlaylistRequest createPlaylistRequest;

        private APIeditPlaylistRequest(UUID playlistMbid, CreatePlaylistRequest createPlaylistRequest) {
            this.playlistMbid = playlistMbid;
            this.createPlaylistRequest = createPlaylistRequest;
        }

        /**
         * Build call for editPlaylist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The submitting user is not allowed to create playlists for other users. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return editPlaylistCall(playlistMbid, createPlaylistRequest, _callback);
        }

        /**
         * Execute editPlaylist request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The submitting user is not allowed to create playlists for other users. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            editPlaylistWithHttpInfo(playlistMbid, createPlaylistRequest);
        }

        /**
         * Execute editPlaylist request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The submitting user is not allowed to create playlists for other users. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return editPlaylistWithHttpInfo(playlistMbid, createPlaylistRequest);
        }

        /**
         * Execute editPlaylist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The submitting user is not allowed to create playlists for other users. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return editPlaylistAsync(playlistMbid, createPlaylistRequest, _callback);
        }
    }

    /**
     * Create a playlist. The playlist must be in JSPF format with MusicBrainz extensions, which is defined here: https://musicbrainz.org/doc/jspf . To create an empty playlist, you can send an empty playlist with only the title field filled out. If you would like to create a playlist populated with recordings, each of the track items in the playlist must have an identifier element that contains the MusicBrainz recording that includes the recording MBID.  When creating a playlist, only the playlist title and the track identifier elements will be used - all other elements in the posted JSPF wil be ignored.  If a created_for field is found and the user is not an approved playlist bot, then a 403 forbidden will be raised.
     * 
     * @param playlistMbid The playlist mbid to edit. (required)
     * @param createPlaylistRequest  (required)
     * @return APIeditPlaylistRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Playlist accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The submitting user is not allowed to create playlists for other users. </td><td>  -  </td></tr>
     </table>
     */
    public APIeditPlaylistRequest editPlaylist(UUID playlistMbid, CreatePlaylistRequest createPlaylistRequest) {
        return new APIeditPlaylistRequest(playlistMbid, createPlaylistRequest);
    }
    private okhttp3.Call fetchPlaylistCall(UUID playlistMbid, Boolean fetchMetadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/playlist/{playlist_mbid}"
            .replace("{" + "playlist_mbid" + "}", localVarApiClient.escapeString(playlistMbid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fetchMetadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetch_metadata", fetchMetadata));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchPlaylistValidateBeforeCall(UUID playlistMbid, Boolean fetchMetadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistMbid' is set
        if (playlistMbid == null) {
            throw new ApiException("Missing the required parameter 'playlistMbid' when calling fetchPlaylist(Async)");
        }

        return fetchPlaylistCall(playlistMbid, fetchMetadata, _callback);

    }


    private ApiResponse<CreatePlaylistRequest> fetchPlaylistWithHttpInfo(UUID playlistMbid, Boolean fetchMetadata) throws ApiException {
        okhttp3.Call localVarCall = fetchPlaylistValidateBeforeCall(playlistMbid, fetchMetadata, null);
        Type localVarReturnType = new TypeToken<CreatePlaylistRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call fetchPlaylistAsync(UUID playlistMbid, Boolean fetchMetadata, final ApiCallback<CreatePlaylistRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchPlaylistValidateBeforeCall(playlistMbid, fetchMetadata, _callback);
        Type localVarReturnType = new TypeToken<CreatePlaylistRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIfetchPlaylistRequest {
        private final UUID playlistMbid;
        private Boolean fetchMetadata;

        private APIfetchPlaylistRequest(UUID playlistMbid) {
            this.playlistMbid = playlistMbid;
        }

        /**
         * Set fetchMetadata
         * @param fetchMetadata Optional, pass value ‘false&#39; to skip lookup up recording metadata. (optional)
         * @return APIfetchPlaylistRequest
         */
        public APIfetchPlaylistRequest fetchMetadata(Boolean fetchMetadata) {
            this.fetchMetadata = fetchMetadata;
            return this;
        }

        /**
         * Build call for fetchPlaylist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Playlist not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return fetchPlaylistCall(playlistMbid, fetchMetadata, _callback);
        }

        /**
         * Execute fetchPlaylist request
         * @return CreatePlaylistRequest
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Playlist not found. </td><td>  -  </td></tr>
         </table>
         */
        public CreatePlaylistRequest execute() throws ApiException {
            ApiResponse<CreatePlaylistRequest> localVarResp = fetchPlaylistWithHttpInfo(playlistMbid, fetchMetadata);
            return localVarResp.getData();
        }

        /**
         * Execute fetchPlaylist request with HTTP info returned
         * @return ApiResponse&lt;CreatePlaylistRequest&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Playlist not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreatePlaylistRequest> executeWithHttpInfo() throws ApiException {
            return fetchPlaylistWithHttpInfo(playlistMbid, fetchMetadata);
        }

        /**
         * Execute fetchPlaylist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Playlist not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreatePlaylistRequest> _callback) throws ApiException {
            return fetchPlaylistAsync(playlistMbid, fetchMetadata, _callback);
        }
    }

    /**
     * Fetch the given playlist.
     * 
     * @param playlistMbid The playlist mbid to fetch. (required)
     * @return APIfetchPlaylistRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Playlist not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIfetchPlaylistRequest fetchPlaylist(UUID playlistMbid) {
        return new APIfetchPlaylistRequest(playlistMbid);
    }
    private okhttp3.Call itemDeleteCall(UUID playlistMbid, ItemDeleteRequest itemDeleteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = itemDeleteRequest;

        // create path and map variables
        String localVarPath = "/1/playlist/{playlist_mbid}/item/delete"
            .replace("{" + "playlist_mbid" + "}", localVarApiClient.escapeString(playlistMbid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itemDeleteValidateBeforeCall(UUID playlistMbid, ItemDeleteRequest itemDeleteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistMbid' is set
        if (playlistMbid == null) {
            throw new ApiException("Missing the required parameter 'playlistMbid' when calling itemDelete(Async)");
        }

        // verify the required parameter 'itemDeleteRequest' is set
        if (itemDeleteRequest == null) {
            throw new ApiException("Missing the required parameter 'itemDeleteRequest' when calling itemDelete(Async)");
        }

        return itemDeleteCall(playlistMbid, itemDeleteRequest, _callback);

    }


    private ApiResponse<Void> itemDeleteWithHttpInfo(UUID playlistMbid, ItemDeleteRequest itemDeleteRequest) throws ApiException {
        okhttp3.Call localVarCall = itemDeleteValidateBeforeCall(playlistMbid, itemDeleteRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call itemDeleteAsync(UUID playlistMbid, ItemDeleteRequest itemDeleteRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = itemDeleteValidateBeforeCall(playlistMbid, itemDeleteRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIitemDeleteRequest {
        private final UUID playlistMbid;
        private final ItemDeleteRequest itemDeleteRequest;

        private APIitemDeleteRequest(UUID playlistMbid, ItemDeleteRequest itemDeleteRequest) {
            this.playlistMbid = playlistMbid;
            this.itemDeleteRequest = itemDeleteRequest;
        }

        /**
         * Build call for itemDelete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The requesting user was not allowed to carry out this operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return itemDeleteCall(playlistMbid, itemDeleteRequest, _callback);
        }

        /**
         * Execute itemDelete request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The requesting user was not allowed to carry out this operation. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            itemDeleteWithHttpInfo(playlistMbid, itemDeleteRequest);
        }

        /**
         * Execute itemDelete request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The requesting user was not allowed to carry out this operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return itemDeleteWithHttpInfo(playlistMbid, itemDeleteRequest);
        }

        /**
         * Execute itemDelete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Playlist accepted. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The requesting user was not allowed to carry out this operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return itemDeleteAsync(playlistMbid, itemDeleteRequest, _callback);
        }
    }

    /**
     * Delete an item in a playlist.
     * To delete an item in a playlist, the POST data needs to specify the recording MBID and current index of the track to delete, and how many tracks from that position should be moved deleted.
     * @param playlistMbid The playlist mbid to fetch. (required)
     * @param itemDeleteRequest  (required)
     * @return APIitemDeleteRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Playlist accepted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON sent. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid authorization. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The requesting user was not allowed to carry out this operation. </td><td>  -  </td></tr>
     </table>
     */
    public APIitemDeleteRequest itemDelete(UUID playlistMbid, ItemDeleteRequest itemDeleteRequest) {
        return new APIitemDeleteRequest(playlistMbid, itemDeleteRequest);
    }
    private okhttp3.Call moveItemCall(UUID playlistMbid, MoveItemRequest moveItemRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = moveItemRequest;

        // create path and map variables
        String localVarPath = "/1/playlist/{playlist_mbid}/item/move"
            .replace("{" + "playlist_mbid" + "}", localVarApiClient.escapeString(playlistMbid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveItemValidateBeforeCall(UUID playlistMbid, MoveItemRequest moveItemRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistMbid' is set
        if (playlistMbid == null) {
            throw new ApiException("Missing the required parameter 'playlistMbid' when calling moveItem(Async)");
        }

        // verify the required parameter 'moveItemRequest' is set
        if (moveItemRequest == null) {
            throw new ApiException("Missing the required parameter 'moveItemRequest' when calling moveItem(Async)");
        }

        return moveItemCall(playlistMbid, moveItemRequest, _callback);

    }


    private ApiResponse<Void> moveItemWithHttpInfo(UUID playlistMbid, MoveItemRequest moveItemRequest) throws ApiException {
        okhttp3.Call localVarCall = moveItemValidateBeforeCall(playlistMbid, moveItemRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call moveItemAsync(UUID playlistMbid, MoveItemRequest moveItemRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveItemValidateBeforeCall(playlistMbid, moveItemRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APImoveItemRequest {
        private final UUID playlistMbid;
        private final MoveItemRequest moveItemRequest;

        private APImoveItemRequest(UUID playlistMbid, MoveItemRequest moveItemRequest) {
            this.playlistMbid = playlistMbid;
            this.moveItemRequest = moveItemRequest;
        }

        /**
         * Build call for moveItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Move operation succeeded. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. The requesting user was not allowed to carry out this operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return moveItemCall(playlistMbid, moveItemRequest, _callback);
        }

        /**
         * Execute moveItem request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Move operation succeeded. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. The requesting user was not allowed to carry out this operation. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            moveItemWithHttpInfo(playlistMbid, moveItemRequest);
        }

        /**
         * Execute moveItem request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Move operation succeeded. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. The requesting user was not allowed to carry out this operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return moveItemWithHttpInfo(playlistMbid, moveItemRequest);
        }

        /**
         * Execute moveItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Move operation succeeded. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid JSON sent, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. The requesting user was not allowed to carry out this operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return moveItemAsync(playlistMbid, moveItemRequest, _callback);
        }
    }

    /**
     * To move an item in a playlist, the POST data needs to specify the recording MBID and current index of the track to move (from), where to move it to (to) and how many tracks from that position should be moved (count).
     * 
     * @param playlistMbid The playlist mbid to append to. (required)
     * @param moveItemRequest  (required)
     * @return APImoveItemRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Move operation succeeded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON sent, see error message for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The requesting user was not allowed to carry out this operation. </td><td>  -  </td></tr>
     </table>
     */
    public APImoveItemRequest moveItem(UUID playlistMbid, MoveItemRequest moveItemRequest) {
        return new APImoveItemRequest(playlistMbid, moveItemRequest);
    }
    private okhttp3.Call playlistsCreatedForUserCall(String playlistUserName, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/user/{playlist_user_name}/playlists/createdfor"
            .replace("{" + "playlist_user_name" + "}", localVarApiClient.escapeString(playlistUserName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playlistsCreatedForUserValidateBeforeCall(String playlistUserName, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistUserName' is set
        if (playlistUserName == null) {
            throw new ApiException("Missing the required parameter 'playlistUserName' when calling playlistsCreatedForUser(Async)");
        }

        return playlistsCreatedForUserCall(playlistUserName, count, offset, _callback);

    }


    private ApiResponse<Playlists> playlistsCreatedForUserWithHttpInfo(String playlistUserName, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = playlistsCreatedForUserValidateBeforeCall(playlistUserName, count, offset, null);
        Type localVarReturnType = new TypeToken<Playlists>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call playlistsCreatedForUserAsync(String playlistUserName, Integer count, Integer offset, final ApiCallback<Playlists> _callback) throws ApiException {

        okhttp3.Call localVarCall = playlistsCreatedForUserValidateBeforeCall(playlistUserName, count, offset, _callback);
        Type localVarReturnType = new TypeToken<Playlists>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIplaylistsCreatedForUserRequest {
        private final String playlistUserName;
        private Integer count;
        private Integer offset;

        private APIplaylistsCreatedForUserRequest(String playlistUserName) {
            this.playlistUserName = playlistUserName;
        }

        /**
         * Set count
         * @param count  (optional, default to 25)
         * @return APIplaylistsCreatedForUserRequest
         */
        public APIplaylistsCreatedForUserRequest count(Integer count) {
            this.count = count;
            return this;
        }

        /**
         * Set offset
         * @param offset  (optional)
         * @return APIplaylistsCreatedForUserRequest
         */
        public APIplaylistsCreatedForUserRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Build call for playlistsCreatedForUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return playlistsCreatedForUserCall(playlistUserName, count, offset, _callback);
        }

        /**
         * Execute playlistsCreatedForUser request
         * @return Playlists
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public Playlists execute() throws ApiException {
            ApiResponse<Playlists> localVarResp = playlistsCreatedForUserWithHttpInfo(playlistUserName, count, offset);
            return localVarResp.getData();
        }

        /**
         * Execute playlistsCreatedForUser request with HTTP info returned
         * @return ApiResponse&lt;Playlists&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Playlists> executeWithHttpInfo() throws ApiException {
            return playlistsCreatedForUserWithHttpInfo(playlistUserName, count, offset);
        }

        /**
         * Execute playlistsCreatedForUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Playlists> _callback) throws ApiException {
            return playlistsCreatedForUserAsync(playlistUserName, count, offset, _callback);
        }
    }

    /**
     * Fetch playlist metadata in JSPF format without recordings that have been created for the user.
     * 
     * @param playlistUserName  (required)
     * @return APIplaylistsCreatedForUserRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIplaylistsCreatedForUserRequest playlistsCreatedForUser(String playlistUserName) {
        return new APIplaylistsCreatedForUserRequest(playlistUserName);
    }
    private okhttp3.Call playlistsForUserCall(String playlistUserName, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/user/{playlist_user_name}/playlists"
            .replace("{" + "playlist_user_name" + "}", localVarApiClient.escapeString(playlistUserName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playlistsForUserValidateBeforeCall(String playlistUserName, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistUserName' is set
        if (playlistUserName == null) {
            throw new ApiException("Missing the required parameter 'playlistUserName' when calling playlistsForUser(Async)");
        }

        return playlistsForUserCall(playlistUserName, count, offset, _callback);

    }


    private ApiResponse<Playlists> playlistsForUserWithHttpInfo(String playlistUserName, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = playlistsForUserValidateBeforeCall(playlistUserName, count, offset, null);
        Type localVarReturnType = new TypeToken<Playlists>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call playlistsForUserAsync(String playlistUserName, Integer count, Integer offset, final ApiCallback<Playlists> _callback) throws ApiException {

        okhttp3.Call localVarCall = playlistsForUserValidateBeforeCall(playlistUserName, count, offset, _callback);
        Type localVarReturnType = new TypeToken<Playlists>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIplaylistsForUserRequest {
        private final String playlistUserName;
        private Integer count;
        private Integer offset;

        private APIplaylistsForUserRequest(String playlistUserName) {
            this.playlistUserName = playlistUserName;
        }

        /**
         * Set count
         * @param count  (optional, default to 25)
         * @return APIplaylistsForUserRequest
         */
        public APIplaylistsForUserRequest count(Integer count) {
            this.count = count;
            return this;
        }

        /**
         * Set offset
         * @param offset  (optional)
         * @return APIplaylistsForUserRequest
         */
        public APIplaylistsForUserRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Build call for playlistsForUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return playlistsForUserCall(playlistUserName, count, offset, _callback);
        }

        /**
         * Execute playlistsForUser request
         * @return Playlists
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public Playlists execute() throws ApiException {
            ApiResponse<Playlists> localVarResp = playlistsForUserWithHttpInfo(playlistUserName, count, offset);
            return localVarResp.getData();
        }

        /**
         * Execute playlistsForUser request with HTTP info returned
         * @return ApiResponse&lt;Playlists&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Playlists> executeWithHttpInfo() throws ApiException {
            return playlistsForUserWithHttpInfo(playlistUserName, count, offset);
        }

        /**
         * Execute playlistsForUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Playlists> _callback) throws ApiException {
            return playlistsForUserAsync(playlistUserName, count, offset, _callback);
        }
    }

    /**
     * Fetch playlist metadata in JSPF format without recordings for the given user.
     * 
     * @param playlistUserName  (required)
     * @return APIplaylistsForUserRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested user was not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIplaylistsForUserRequest playlistsForUser(String playlistUserName) {
        return new APIplaylistsForUserRequest(playlistUserName);
    }
    private okhttp3.Call playlistsForUserCollaboratorCall(String playlistUserName, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/user/{playlist_user_name}/playlists/collaborator"
            .replace("{" + "playlist_user_name" + "}", localVarApiClient.escapeString(playlistUserName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playlistsForUserCollaboratorValidateBeforeCall(String playlistUserName, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistUserName' is set
        if (playlistUserName == null) {
            throw new ApiException("Missing the required parameter 'playlistUserName' when calling playlistsForUserCollaborator(Async)");
        }

        return playlistsForUserCollaboratorCall(playlistUserName, count, offset, _callback);

    }


    private ApiResponse<Playlists> playlistsForUserCollaboratorWithHttpInfo(String playlistUserName, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = playlistsForUserCollaboratorValidateBeforeCall(playlistUserName, count, offset, null);
        Type localVarReturnType = new TypeToken<Playlists>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call playlistsForUserCollaboratorAsync(String playlistUserName, Integer count, Integer offset, final ApiCallback<Playlists> _callback) throws ApiException {

        okhttp3.Call localVarCall = playlistsForUserCollaboratorValidateBeforeCall(playlistUserName, count, offset, _callback);
        Type localVarReturnType = new TypeToken<Playlists>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIplaylistsForUserCollaboratorRequest {
        private final String playlistUserName;
        private Integer count;
        private Integer offset;

        private APIplaylistsForUserCollaboratorRequest(String playlistUserName) {
            this.playlistUserName = playlistUserName;
        }

        /**
         * Set count
         * @param count  (optional, default to 25)
         * @return APIplaylistsForUserCollaboratorRequest
         */
        public APIplaylistsForUserCollaboratorRequest count(Integer count) {
            this.count = count;
            return this;
        }

        /**
         * Set offset
         * @param offset  (optional)
         * @return APIplaylistsForUserCollaboratorRequest
         */
        public APIplaylistsForUserCollaboratorRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Build call for playlistsForUserCollaborator
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return playlistsForUserCollaboratorCall(playlistUserName, count, offset, _callback);
        }

        /**
         * Execute playlistsForUserCollaborator request
         * @return Playlists
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public Playlists execute() throws ApiException {
            ApiResponse<Playlists> localVarResp = playlistsForUserCollaboratorWithHttpInfo(playlistUserName, count, offset);
            return localVarResp.getData();
        }

        /**
         * Execute playlistsForUserCollaborator request with HTTP info returned
         * @return ApiResponse&lt;Playlists&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Playlists> executeWithHttpInfo() throws ApiException {
            return playlistsForUserCollaboratorWithHttpInfo(playlistUserName, count, offset);
        }

        /**
         * Execute playlistsForUserCollaborator request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Playlists> _callback) throws ApiException {
            return playlistsForUserCollaboratorAsync(playlistUserName, count, offset, _callback);
        }
    }

    /**
     * Fetch playlist metadata in JSPF format without recordings for which a user is a collaborator. If a playlist is private, it will only be returned if the caller is authorized to edit that playlist.
     * 
     * @param playlistUserName  (required)
     * @return APIplaylistsForUserCollaboratorRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found. </td><td>  -  </td></tr>
     </table>
     */
    public APIplaylistsForUserCollaboratorRequest playlistsForUserCollaborator(String playlistUserName) {
        return new APIplaylistsForUserCollaboratorRequest(playlistUserName);
    }
    private okhttp3.Call searchPlaylistsCall(String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/playlist/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchPlaylistsValidateBeforeCall(String query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchPlaylists(Async)");
        }

        return searchPlaylistsCall(query, _callback);

    }


    private ApiResponse<Playlists> searchPlaylistsWithHttpInfo(String query) throws ApiException {
        okhttp3.Call localVarCall = searchPlaylistsValidateBeforeCall(query, null);
        Type localVarReturnType = new TypeToken<Playlists>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchPlaylistsAsync(String query, final ApiCallback<Playlists> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchPlaylistsValidateBeforeCall(query, _callback);
        Type localVarReturnType = new TypeToken<Playlists>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsearchPlaylistsRequest {
        private final String query;

        private APIsearchPlaylistsRequest(String query) {
            this.query = query;
        }

        /**
         * Build call for searchPlaylists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query string, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchPlaylistsCall(query, _callback);
        }

        /**
         * Execute searchPlaylists request
         * @return Playlists
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query string, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
         </table>
         */
        public Playlists execute() throws ApiException {
            ApiResponse<Playlists> localVarResp = searchPlaylistsWithHttpInfo(query);
            return localVarResp.getData();
        }

        /**
         * Execute searchPlaylists request with HTTP info returned
         * @return ApiResponse&lt;Playlists&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query string, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Playlists> executeWithHttpInfo() throws ApiException {
            return searchPlaylistsWithHttpInfo(query);
        }

        /**
         * Execute searchPlaylists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid query string, see error message for details. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Playlists> _callback) throws ApiException {
            return searchPlaylistsAsync(query, _callback);
        }
    }

    /**
     * Search for playlists by name or description. The search query must be at least 3 characters long.
     * 
     * @param query  (required)
     * @return APIsearchPlaylistsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Yay, you have data! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid query string, see error message for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid authorization. See error message for details. </td><td>  -  </td></tr>
     </table>
     */
    public APIsearchPlaylistsRequest searchPlaylists(String query) {
        return new APIsearchPlaylistsRequest(query);
    }
}
