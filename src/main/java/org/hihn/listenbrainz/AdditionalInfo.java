/*
 * ListenBrainz Swagger - OpenAPI 3.0
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.hihn.listenbrainz;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.hihn.listenbrainz.JSON;

/**
 * AdditionalInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-28T21:54:13.371331+02:00[Europe/Berlin]", comments = "Generator version: 7.7.0")
public class AdditionalInfo {
  public static final String SERIALIZED_NAME_MEDIA_PLAYER = "media_player";
  @SerializedName(SERIALIZED_NAME_MEDIA_PLAYER)
  private String mediaPlayer;

  public static final String SERIALIZED_NAME_MEDIA_PLAYER_VERSION = "media_player_version";
  @SerializedName(SERIALIZED_NAME_MEDIA_PLAYER_VERSION)
  private String mediaPlayerVersion;

  public static final String SERIALIZED_NAME_SUBMISSION_CLIENT = "submission_client";
  @SerializedName(SERIALIZED_NAME_SUBMISSION_CLIENT)
  private String submissionClient;

  public static final String SERIALIZED_NAME_SUBMISSION_CLIENT_VERSION = "submission_client_version";
  @SerializedName(SERIALIZED_NAME_SUBMISSION_CLIENT_VERSION)
  private String submissionClientVersion;

  public static final String SERIALIZED_NAME_MUSIC_SERVICE = "music_service";
  @SerializedName(SERIALIZED_NAME_MUSIC_SERVICE)
  private String musicService;

  public static final String SERIALIZED_NAME_MUSIC_SERVICE_NAME = "music_service_name";
  @SerializedName(SERIALIZED_NAME_MUSIC_SERVICE_NAME)
  private String musicServiceName;

  public static final String SERIALIZED_NAME_ORIGIN_URL = "origin_url";
  @SerializedName(SERIALIZED_NAME_ORIGIN_URL)
  private String originUrl;

  public static final String SERIALIZED_NAME_RELEASE_MBID = "release_mbid";
  @SerializedName(SERIALIZED_NAME_RELEASE_MBID)
  private UUID releaseMbid;

  public static final String SERIALIZED_NAME_ARTIST_MBIDS = "artist_mbids";
  @SerializedName(SERIALIZED_NAME_ARTIST_MBIDS)
  private List<UUID> artistMbids = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECORDING_MBID = "recording_mbid";
  @SerializedName(SERIALIZED_NAME_RECORDING_MBID)
  private UUID recordingMbid;

  public static final String SERIALIZED_NAME_RECORDING_MSID = "recording_msid";
  @SerializedName(SERIALIZED_NAME_RECORDING_MSID)
  private UUID recordingMsid;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_DURATION_MS = "duration_ms";
  @SerializedName(SERIALIZED_NAME_DURATION_MS)
  private Integer durationMs;

  public static final String SERIALIZED_NAME_TRACKNUMBER = "tracknumber";
  @SerializedName(SERIALIZED_NAME_TRACKNUMBER)
  private Integer tracknumber;

  public static final String SERIALIZED_NAME_RELEASE_GROUP_MBID = "release_group_mbid";
  @SerializedName(SERIALIZED_NAME_RELEASE_GROUP_MBID)
  private UUID releaseGroupMbid;

  public static final String SERIALIZED_NAME_TRACK_MBID = "track_mbid";
  @SerializedName(SERIALIZED_NAME_TRACK_MBID)
  private UUID trackMbid;

  public static final String SERIALIZED_NAME_WORK_MBIDS = "work_mbids";
  @SerializedName(SERIALIZED_NAME_WORK_MBIDS)
  private List<UUID> workMbids = new ArrayList<>();

  public static final String SERIALIZED_NAME_ISRC = "isrc";
  @SerializedName(SERIALIZED_NAME_ISRC)
  private String isrc;

  public static final String SERIALIZED_NAME_SPOTIFY_ID = "spotify_id";
  @SerializedName(SERIALIZED_NAME_SPOTIFY_ID)
  private String spotifyId;

  public static final String SERIALIZED_NAME_DISCNUMBER = "discnumber";
  @SerializedName(SERIALIZED_NAME_DISCNUMBER)
  private Integer discnumber;

  public static final String SERIALIZED_NAME_LISTENING_FROM = "listening_from";
  @SerializedName(SERIALIZED_NAME_LISTENING_FROM)
  private String listeningFrom;

  public static final String SERIALIZED_NAME_RELEASE_ARTIST_NAME = "release_artist_name";
  @SerializedName(SERIALIZED_NAME_RELEASE_ARTIST_NAME)
  private String releaseArtistName;

  public static final String SERIALIZED_NAME_RELEASE_ARTIST_NAMES = "release_artist_names";
  @SerializedName(SERIALIZED_NAME_RELEASE_ARTIST_NAMES)
  private List<String> releaseArtistNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPOTIFY_ALBUM_ARTIST_IDS = "spotify_album_artist_ids";
  @SerializedName(SERIALIZED_NAME_SPOTIFY_ALBUM_ARTIST_IDS)
  private List<String> spotifyAlbumArtistIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPOTIFY_ALBUM_ID = "spotify_album_id";
  @SerializedName(SERIALIZED_NAME_SPOTIFY_ALBUM_ID)
  private String spotifyAlbumId;

  public static final String SERIALIZED_NAME_SPOTIFY_ARTIST_IDS = "spotify_artist_ids";
  @SerializedName(SERIALIZED_NAME_SPOTIFY_ARTIST_IDS)
  private List<String> spotifyArtistIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_YOUTUBE_ID = "youtube_id";
  @SerializedName(SERIALIZED_NAME_YOUTUBE_ID)
  private String youtubeId;

  public static final String SERIALIZED_NAME_ALBUMARTIST = "albumartist";
  @SerializedName(SERIALIZED_NAME_ALBUMARTIST)
  private String albumartist;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public AdditionalInfo() {
  }

  public AdditionalInfo mediaPlayer(String mediaPlayer) {
    this.mediaPlayer = mediaPlayer;
    return this;
  }

  /**
   * Get mediaPlayer
   * @return mediaPlayer
   */
  @javax.annotation.Nullable
  public String getMediaPlayer() {
    return mediaPlayer;
  }

  public void setMediaPlayer(String mediaPlayer) {
    this.mediaPlayer = mediaPlayer;
  }


  public AdditionalInfo mediaPlayerVersion(String mediaPlayerVersion) {
    this.mediaPlayerVersion = mediaPlayerVersion;
    return this;
  }

  /**
   * Get mediaPlayerVersion
   * @return mediaPlayerVersion
   */
  @javax.annotation.Nullable
  public String getMediaPlayerVersion() {
    return mediaPlayerVersion;
  }

  public void setMediaPlayerVersion(String mediaPlayerVersion) {
    this.mediaPlayerVersion = mediaPlayerVersion;
  }


  public AdditionalInfo submissionClient(String submissionClient) {
    this.submissionClient = submissionClient;
    return this;
  }

  /**
   * Get submissionClient
   * @return submissionClient
   */
  @javax.annotation.Nullable
  public String getSubmissionClient() {
    return submissionClient;
  }

  public void setSubmissionClient(String submissionClient) {
    this.submissionClient = submissionClient;
  }


  public AdditionalInfo submissionClientVersion(String submissionClientVersion) {
    this.submissionClientVersion = submissionClientVersion;
    return this;
  }

  /**
   * Get submissionClientVersion
   * @return submissionClientVersion
   */
  @javax.annotation.Nullable
  public String getSubmissionClientVersion() {
    return submissionClientVersion;
  }

  public void setSubmissionClientVersion(String submissionClientVersion) {
    this.submissionClientVersion = submissionClientVersion;
  }


  public AdditionalInfo musicService(String musicService) {
    this.musicService = musicService;
    return this;
  }

  /**
   * Get musicService
   * @return musicService
   */
  @javax.annotation.Nullable
  public String getMusicService() {
    return musicService;
  }

  public void setMusicService(String musicService) {
    this.musicService = musicService;
  }


  public AdditionalInfo musicServiceName(String musicServiceName) {
    this.musicServiceName = musicServiceName;
    return this;
  }

  /**
   * Get musicServiceName
   * @return musicServiceName
   */
  @javax.annotation.Nullable
  public String getMusicServiceName() {
    return musicServiceName;
  }

  public void setMusicServiceName(String musicServiceName) {
    this.musicServiceName = musicServiceName;
  }


  public AdditionalInfo originUrl(String originUrl) {
    this.originUrl = originUrl;
    return this;
  }

  /**
   * Get originUrl
   * @return originUrl
   */
  @javax.annotation.Nullable
  public String getOriginUrl() {
    return originUrl;
  }

  public void setOriginUrl(String originUrl) {
    this.originUrl = originUrl;
  }


  public AdditionalInfo releaseMbid(UUID releaseMbid) {
    this.releaseMbid = releaseMbid;
    return this;
  }

  /**
   * Get releaseMbid
   * @return releaseMbid
   */
  @javax.annotation.Nullable
  public UUID getReleaseMbid() {
    return releaseMbid;
  }

  public void setReleaseMbid(UUID releaseMbid) {
    this.releaseMbid = releaseMbid;
  }


  public AdditionalInfo artistMbids(List<UUID> artistMbids) {
    this.artistMbids = artistMbids;
    return this;
  }

  public AdditionalInfo addArtistMbidsItem(UUID artistMbidsItem) {
    if (this.artistMbids == null) {
      this.artistMbids = new ArrayList<>();
    }
    this.artistMbids.add(artistMbidsItem);
    return this;
  }

  /**
   * Get artistMbids
   * @return artistMbids
   */
  @javax.annotation.Nullable
  public List<UUID> getArtistMbids() {
    return artistMbids;
  }

  public void setArtistMbids(List<UUID> artistMbids) {
    this.artistMbids = artistMbids;
  }


  public AdditionalInfo recordingMbid(UUID recordingMbid) {
    this.recordingMbid = recordingMbid;
    return this;
  }

  /**
   * Get recordingMbid
   * @return recordingMbid
   */
  @javax.annotation.Nullable
  public UUID getRecordingMbid() {
    return recordingMbid;
  }

  public void setRecordingMbid(UUID recordingMbid) {
    this.recordingMbid = recordingMbid;
  }


  public AdditionalInfo recordingMsid(UUID recordingMsid) {
    this.recordingMsid = recordingMsid;
    return this;
  }

  /**
   * Get recordingMsid
   * @return recordingMsid
   */
  @javax.annotation.Nullable
  public UUID getRecordingMsid() {
    return recordingMsid;
  }

  public void setRecordingMsid(UUID recordingMsid) {
    this.recordingMsid = recordingMsid;
  }


  public AdditionalInfo tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public AdditionalInfo addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public AdditionalInfo duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nullable
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public AdditionalInfo durationMs(Integer durationMs) {
    this.durationMs = durationMs;
    return this;
  }

  /**
   * Get durationMs
   * @return durationMs
   */
  @javax.annotation.Nullable
  public Integer getDurationMs() {
    return durationMs;
  }

  public void setDurationMs(Integer durationMs) {
    this.durationMs = durationMs;
  }


  public AdditionalInfo tracknumber(Integer tracknumber) {
    this.tracknumber = tracknumber;
    return this;
  }

  /**
   * Get tracknumber
   * @return tracknumber
   */
  @javax.annotation.Nullable
  public Integer getTracknumber() {
    return tracknumber;
  }

  public void setTracknumber(Integer tracknumber) {
    this.tracknumber = tracknumber;
  }


  public AdditionalInfo releaseGroupMbid(UUID releaseGroupMbid) {
    this.releaseGroupMbid = releaseGroupMbid;
    return this;
  }

  /**
   * Get releaseGroupMbid
   * @return releaseGroupMbid
   */
  @javax.annotation.Nullable
  public UUID getReleaseGroupMbid() {
    return releaseGroupMbid;
  }

  public void setReleaseGroupMbid(UUID releaseGroupMbid) {
    this.releaseGroupMbid = releaseGroupMbid;
  }


  public AdditionalInfo trackMbid(UUID trackMbid) {
    this.trackMbid = trackMbid;
    return this;
  }

  /**
   * Get trackMbid
   * @return trackMbid
   */
  @javax.annotation.Nullable
  public UUID getTrackMbid() {
    return trackMbid;
  }

  public void setTrackMbid(UUID trackMbid) {
    this.trackMbid = trackMbid;
  }


  public AdditionalInfo workMbids(List<UUID> workMbids) {
    this.workMbids = workMbids;
    return this;
  }

  public AdditionalInfo addWorkMbidsItem(UUID workMbidsItem) {
    if (this.workMbids == null) {
      this.workMbids = new ArrayList<>();
    }
    this.workMbids.add(workMbidsItem);
    return this;
  }

  /**
   * Get workMbids
   * @return workMbids
   */
  @javax.annotation.Nullable
  public List<UUID> getWorkMbids() {
    return workMbids;
  }

  public void setWorkMbids(List<UUID> workMbids) {
    this.workMbids = workMbids;
  }


  public AdditionalInfo isrc(String isrc) {
    this.isrc = isrc;
    return this;
  }

  /**
   * Get isrc
   * @return isrc
   */
  @javax.annotation.Nullable
  public String getIsrc() {
    return isrc;
  }

  public void setIsrc(String isrc) {
    this.isrc = isrc;
  }


  public AdditionalInfo spotifyId(String spotifyId) {
    this.spotifyId = spotifyId;
    return this;
  }

  /**
   * Get spotifyId
   * @return spotifyId
   */
  @javax.annotation.Nullable
  public String getSpotifyId() {
    return spotifyId;
  }

  public void setSpotifyId(String spotifyId) {
    this.spotifyId = spotifyId;
  }


  public AdditionalInfo discnumber(Integer discnumber) {
    this.discnumber = discnumber;
    return this;
  }

  /**
   * Get discnumber
   * @return discnumber
   */
  @javax.annotation.Nullable
  public Integer getDiscnumber() {
    return discnumber;
  }

  public void setDiscnumber(Integer discnumber) {
    this.discnumber = discnumber;
  }


  public AdditionalInfo listeningFrom(String listeningFrom) {
    this.listeningFrom = listeningFrom;
    return this;
  }

  /**
   * Get listeningFrom
   * @return listeningFrom
   */
  @javax.annotation.Nullable
  public String getListeningFrom() {
    return listeningFrom;
  }

  public void setListeningFrom(String listeningFrom) {
    this.listeningFrom = listeningFrom;
  }


  public AdditionalInfo releaseArtistName(String releaseArtistName) {
    this.releaseArtistName = releaseArtistName;
    return this;
  }

  /**
   * Get releaseArtistName
   * @return releaseArtistName
   */
  @javax.annotation.Nullable
  public String getReleaseArtistName() {
    return releaseArtistName;
  }

  public void setReleaseArtistName(String releaseArtistName) {
    this.releaseArtistName = releaseArtistName;
  }


  public AdditionalInfo releaseArtistNames(List<String> releaseArtistNames) {
    this.releaseArtistNames = releaseArtistNames;
    return this;
  }

  public AdditionalInfo addReleaseArtistNamesItem(String releaseArtistNamesItem) {
    if (this.releaseArtistNames == null) {
      this.releaseArtistNames = new ArrayList<>();
    }
    this.releaseArtistNames.add(releaseArtistNamesItem);
    return this;
  }

  /**
   * Get releaseArtistNames
   * @return releaseArtistNames
   */
  @javax.annotation.Nullable
  public List<String> getReleaseArtistNames() {
    return releaseArtistNames;
  }

  public void setReleaseArtistNames(List<String> releaseArtistNames) {
    this.releaseArtistNames = releaseArtistNames;
  }


  public AdditionalInfo spotifyAlbumArtistIds(List<String> spotifyAlbumArtistIds) {
    this.spotifyAlbumArtistIds = spotifyAlbumArtistIds;
    return this;
  }

  public AdditionalInfo addSpotifyAlbumArtistIdsItem(String spotifyAlbumArtistIdsItem) {
    if (this.spotifyAlbumArtistIds == null) {
      this.spotifyAlbumArtistIds = new ArrayList<>();
    }
    this.spotifyAlbumArtistIds.add(spotifyAlbumArtistIdsItem);
    return this;
  }

  /**
   * Get spotifyAlbumArtistIds
   * @return spotifyAlbumArtistIds
   */
  @javax.annotation.Nullable
  public List<String> getSpotifyAlbumArtistIds() {
    return spotifyAlbumArtistIds;
  }

  public void setSpotifyAlbumArtistIds(List<String> spotifyAlbumArtistIds) {
    this.spotifyAlbumArtistIds = spotifyAlbumArtistIds;
  }


  public AdditionalInfo spotifyAlbumId(String spotifyAlbumId) {
    this.spotifyAlbumId = spotifyAlbumId;
    return this;
  }

  /**
   * Get spotifyAlbumId
   * @return spotifyAlbumId
   */
  @javax.annotation.Nullable
  public String getSpotifyAlbumId() {
    return spotifyAlbumId;
  }

  public void setSpotifyAlbumId(String spotifyAlbumId) {
    this.spotifyAlbumId = spotifyAlbumId;
  }


  public AdditionalInfo spotifyArtistIds(List<String> spotifyArtistIds) {
    this.spotifyArtistIds = spotifyArtistIds;
    return this;
  }

  public AdditionalInfo addSpotifyArtistIdsItem(String spotifyArtistIdsItem) {
    if (this.spotifyArtistIds == null) {
      this.spotifyArtistIds = new ArrayList<>();
    }
    this.spotifyArtistIds.add(spotifyArtistIdsItem);
    return this;
  }

  /**
   * Get spotifyArtistIds
   * @return spotifyArtistIds
   */
  @javax.annotation.Nullable
  public List<String> getSpotifyArtistIds() {
    return spotifyArtistIds;
  }

  public void setSpotifyArtistIds(List<String> spotifyArtistIds) {
    this.spotifyArtistIds = spotifyArtistIds;
  }


  public AdditionalInfo youtubeId(String youtubeId) {
    this.youtubeId = youtubeId;
    return this;
  }

  /**
   * Get youtubeId
   * @return youtubeId
   */
  @javax.annotation.Nullable
  public String getYoutubeId() {
    return youtubeId;
  }

  public void setYoutubeId(String youtubeId) {
    this.youtubeId = youtubeId;
  }


  public AdditionalInfo albumartist(String albumartist) {
    this.albumartist = albumartist;
    return this;
  }

  /**
   * Get albumartist
   * @return albumartist
   */
  @javax.annotation.Nullable
  public String getAlbumartist() {
    return albumartist;
  }

  public void setAlbumartist(String albumartist) {
    this.albumartist = albumartist;
  }


  public AdditionalInfo comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public AdditionalInfo date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdditionalInfo additionalInfo = (AdditionalInfo) o;
    return Objects.equals(this.mediaPlayer, additionalInfo.mediaPlayer) &&
        Objects.equals(this.mediaPlayerVersion, additionalInfo.mediaPlayerVersion) &&
        Objects.equals(this.submissionClient, additionalInfo.submissionClient) &&
        Objects.equals(this.submissionClientVersion, additionalInfo.submissionClientVersion) &&
        Objects.equals(this.musicService, additionalInfo.musicService) &&
        Objects.equals(this.musicServiceName, additionalInfo.musicServiceName) &&
        Objects.equals(this.originUrl, additionalInfo.originUrl) &&
        Objects.equals(this.releaseMbid, additionalInfo.releaseMbid) &&
        Objects.equals(this.artistMbids, additionalInfo.artistMbids) &&
        Objects.equals(this.recordingMbid, additionalInfo.recordingMbid) &&
        Objects.equals(this.recordingMsid, additionalInfo.recordingMsid) &&
        Objects.equals(this.tags, additionalInfo.tags) &&
        Objects.equals(this.duration, additionalInfo.duration) &&
        Objects.equals(this.durationMs, additionalInfo.durationMs) &&
        Objects.equals(this.tracknumber, additionalInfo.tracknumber) &&
        Objects.equals(this.releaseGroupMbid, additionalInfo.releaseGroupMbid) &&
        Objects.equals(this.trackMbid, additionalInfo.trackMbid) &&
        Objects.equals(this.workMbids, additionalInfo.workMbids) &&
        Objects.equals(this.isrc, additionalInfo.isrc) &&
        Objects.equals(this.spotifyId, additionalInfo.spotifyId) &&
        Objects.equals(this.discnumber, additionalInfo.discnumber) &&
        Objects.equals(this.listeningFrom, additionalInfo.listeningFrom) &&
        Objects.equals(this.releaseArtistName, additionalInfo.releaseArtistName) &&
        Objects.equals(this.releaseArtistNames, additionalInfo.releaseArtistNames) &&
        Objects.equals(this.spotifyAlbumArtistIds, additionalInfo.spotifyAlbumArtistIds) &&
        Objects.equals(this.spotifyAlbumId, additionalInfo.spotifyAlbumId) &&
        Objects.equals(this.spotifyArtistIds, additionalInfo.spotifyArtistIds) &&
        Objects.equals(this.youtubeId, additionalInfo.youtubeId) &&
        Objects.equals(this.albumartist, additionalInfo.albumartist) &&
        Objects.equals(this.comment, additionalInfo.comment) &&
        Objects.equals(this.date, additionalInfo.date);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mediaPlayer, mediaPlayerVersion, submissionClient, submissionClientVersion, musicService, musicServiceName, originUrl, releaseMbid, artistMbids, recordingMbid, recordingMsid, tags, duration, durationMs, tracknumber, releaseGroupMbid, trackMbid, workMbids, isrc, spotifyId, discnumber, listeningFrom, releaseArtistName, releaseArtistNames, spotifyAlbumArtistIds, spotifyAlbumId, spotifyArtistIds, youtubeId, albumartist, comment, date);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdditionalInfo {\n");
    sb.append("    mediaPlayer: ").append(toIndentedString(mediaPlayer)).append("\n");
    sb.append("    mediaPlayerVersion: ").append(toIndentedString(mediaPlayerVersion)).append("\n");
    sb.append("    submissionClient: ").append(toIndentedString(submissionClient)).append("\n");
    sb.append("    submissionClientVersion: ").append(toIndentedString(submissionClientVersion)).append("\n");
    sb.append("    musicService: ").append(toIndentedString(musicService)).append("\n");
    sb.append("    musicServiceName: ").append(toIndentedString(musicServiceName)).append("\n");
    sb.append("    originUrl: ").append(toIndentedString(originUrl)).append("\n");
    sb.append("    releaseMbid: ").append(toIndentedString(releaseMbid)).append("\n");
    sb.append("    artistMbids: ").append(toIndentedString(artistMbids)).append("\n");
    sb.append("    recordingMbid: ").append(toIndentedString(recordingMbid)).append("\n");
    sb.append("    recordingMsid: ").append(toIndentedString(recordingMsid)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    durationMs: ").append(toIndentedString(durationMs)).append("\n");
    sb.append("    tracknumber: ").append(toIndentedString(tracknumber)).append("\n");
    sb.append("    releaseGroupMbid: ").append(toIndentedString(releaseGroupMbid)).append("\n");
    sb.append("    trackMbid: ").append(toIndentedString(trackMbid)).append("\n");
    sb.append("    workMbids: ").append(toIndentedString(workMbids)).append("\n");
    sb.append("    isrc: ").append(toIndentedString(isrc)).append("\n");
    sb.append("    spotifyId: ").append(toIndentedString(spotifyId)).append("\n");
    sb.append("    discnumber: ").append(toIndentedString(discnumber)).append("\n");
    sb.append("    listeningFrom: ").append(toIndentedString(listeningFrom)).append("\n");
    sb.append("    releaseArtistName: ").append(toIndentedString(releaseArtistName)).append("\n");
    sb.append("    releaseArtistNames: ").append(toIndentedString(releaseArtistNames)).append("\n");
    sb.append("    spotifyAlbumArtistIds: ").append(toIndentedString(spotifyAlbumArtistIds)).append("\n");
    sb.append("    spotifyAlbumId: ").append(toIndentedString(spotifyAlbumId)).append("\n");
    sb.append("    spotifyArtistIds: ").append(toIndentedString(spotifyArtistIds)).append("\n");
    sb.append("    youtubeId: ").append(toIndentedString(youtubeId)).append("\n");
    sb.append("    albumartist: ").append(toIndentedString(albumartist)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("media_player");
    openapiFields.add("media_player_version");
    openapiFields.add("submission_client");
    openapiFields.add("submission_client_version");
    openapiFields.add("music_service");
    openapiFields.add("music_service_name");
    openapiFields.add("origin_url");
    openapiFields.add("release_mbid");
    openapiFields.add("artist_mbids");
    openapiFields.add("recording_mbid");
    openapiFields.add("recording_msid");
    openapiFields.add("tags");
    openapiFields.add("duration");
    openapiFields.add("duration_ms");
    openapiFields.add("tracknumber");
    openapiFields.add("release_group_mbid");
    openapiFields.add("track_mbid");
    openapiFields.add("work_mbids");
    openapiFields.add("isrc");
    openapiFields.add("spotify_id");
    openapiFields.add("discnumber");
    openapiFields.add("listening_from");
    openapiFields.add("release_artist_name");
    openapiFields.add("release_artist_names");
    openapiFields.add("spotify_album_artist_ids");
    openapiFields.add("spotify_album_id");
    openapiFields.add("spotify_artist_ids");
    openapiFields.add("youtube_id");
    openapiFields.add("albumartist");
    openapiFields.add("comment");
    openapiFields.add("date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdditionalInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdditionalInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdditionalInfo is not found in the empty JSON string", AdditionalInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdditionalInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdditionalInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("media_player") != null && !jsonObj.get("media_player").isJsonNull()) && !jsonObj.get("media_player").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `media_player` to be a primitive type in the JSON string but got `%s`", jsonObj.get("media_player").toString()));
      }
      if ((jsonObj.get("media_player_version") != null && !jsonObj.get("media_player_version").isJsonNull()) && !jsonObj.get("media_player_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `media_player_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("media_player_version").toString()));
      }
      if ((jsonObj.get("submission_client") != null && !jsonObj.get("submission_client").isJsonNull()) && !jsonObj.get("submission_client").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `submission_client` to be a primitive type in the JSON string but got `%s`", jsonObj.get("submission_client").toString()));
      }
      if ((jsonObj.get("submission_client_version") != null && !jsonObj.get("submission_client_version").isJsonNull()) && !jsonObj.get("submission_client_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `submission_client_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("submission_client_version").toString()));
      }
      if ((jsonObj.get("music_service") != null && !jsonObj.get("music_service").isJsonNull()) && !jsonObj.get("music_service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `music_service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("music_service").toString()));
      }
      if ((jsonObj.get("music_service_name") != null && !jsonObj.get("music_service_name").isJsonNull()) && !jsonObj.get("music_service_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `music_service_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("music_service_name").toString()));
      }
      if ((jsonObj.get("origin_url") != null && !jsonObj.get("origin_url").isJsonNull()) && !jsonObj.get("origin_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin_url").toString()));
      }
      if ((jsonObj.get("release_mbid") != null && !jsonObj.get("release_mbid").isJsonNull()) && !jsonObj.get("release_mbid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release_mbid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release_mbid").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("artist_mbids") != null && !jsonObj.get("artist_mbids").isJsonNull() && !jsonObj.get("artist_mbids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `artist_mbids` to be an array in the JSON string but got `%s`", jsonObj.get("artist_mbids").toString()));
      }
      if ((jsonObj.get("recording_mbid") != null && !jsonObj.get("recording_mbid").isJsonNull()) && !jsonObj.get("recording_mbid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recording_mbid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recording_mbid").toString()));
      }
      if ((jsonObj.get("recording_msid") != null && !jsonObj.get("recording_msid").isJsonNull()) && !jsonObj.get("recording_msid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recording_msid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recording_msid").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("release_group_mbid") != null && !jsonObj.get("release_group_mbid").isJsonNull()) && !jsonObj.get("release_group_mbid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release_group_mbid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release_group_mbid").toString()));
      }
      if ((jsonObj.get("track_mbid") != null && !jsonObj.get("track_mbid").isJsonNull()) && !jsonObj.get("track_mbid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `track_mbid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("track_mbid").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("work_mbids") != null && !jsonObj.get("work_mbids").isJsonNull() && !jsonObj.get("work_mbids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `work_mbids` to be an array in the JSON string but got `%s`", jsonObj.get("work_mbids").toString()));
      }
      if ((jsonObj.get("isrc") != null && !jsonObj.get("isrc").isJsonNull()) && !jsonObj.get("isrc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isrc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isrc").toString()));
      }
      if ((jsonObj.get("spotify_id") != null && !jsonObj.get("spotify_id").isJsonNull()) && !jsonObj.get("spotify_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spotify_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spotify_id").toString()));
      }
      if ((jsonObj.get("listening_from") != null && !jsonObj.get("listening_from").isJsonNull()) && !jsonObj.get("listening_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listening_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listening_from").toString()));
      }
      if ((jsonObj.get("release_artist_name") != null && !jsonObj.get("release_artist_name").isJsonNull()) && !jsonObj.get("release_artist_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release_artist_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release_artist_name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("release_artist_names") != null && !jsonObj.get("release_artist_names").isJsonNull() && !jsonObj.get("release_artist_names").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `release_artist_names` to be an array in the JSON string but got `%s`", jsonObj.get("release_artist_names").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("spotify_album_artist_ids") != null && !jsonObj.get("spotify_album_artist_ids").isJsonNull() && !jsonObj.get("spotify_album_artist_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `spotify_album_artist_ids` to be an array in the JSON string but got `%s`", jsonObj.get("spotify_album_artist_ids").toString()));
      }
      if ((jsonObj.get("spotify_album_id") != null && !jsonObj.get("spotify_album_id").isJsonNull()) && !jsonObj.get("spotify_album_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spotify_album_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spotify_album_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("spotify_artist_ids") != null && !jsonObj.get("spotify_artist_ids").isJsonNull() && !jsonObj.get("spotify_artist_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `spotify_artist_ids` to be an array in the JSON string but got `%s`", jsonObj.get("spotify_artist_ids").toString()));
      }
      if ((jsonObj.get("youtube_id") != null && !jsonObj.get("youtube_id").isJsonNull()) && !jsonObj.get("youtube_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `youtube_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("youtube_id").toString()));
      }
      if ((jsonObj.get("albumartist") != null && !jsonObj.get("albumartist").isJsonNull()) && !jsonObj.get("albumartist").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `albumartist` to be a primitive type in the JSON string but got `%s`", jsonObj.get("albumartist").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdditionalInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdditionalInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdditionalInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdditionalInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AdditionalInfo>() {
           @Override
           public void write(JsonWriter out, AdditionalInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdditionalInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdditionalInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdditionalInfo
   * @throws IOException if the JSON string is invalid with respect to AdditionalInfo
   */
  public static AdditionalInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdditionalInfo.class);
  }

  /**
   * Convert an instance of AdditionalInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

