/*
 * ListenBrainz Swagger - OpenAPI 3.0
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.hihn.listenbrainz;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.hihn.listenbrainz.TopArtistsForUserPayloadArtistsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.hihn.listenbrainz.JSON;

/**
 * ArtistMapForUserPayloadArtistMapInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class ArtistMapForUserPayloadArtistMapInner {
  public static final String SERIALIZED_NAME_ARTIST_COUNT = "artist_count";
  @SerializedName(SERIALIZED_NAME_ARTIST_COUNT)
  private Integer artistCount;

  public static final String SERIALIZED_NAME_ARTISTS = "artists";
  @SerializedName(SERIALIZED_NAME_ARTISTS)
  private List<TopArtistsForUserPayloadArtistsInner> artists = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_LISTEN_COUNT = "listen_count";
  @SerializedName(SERIALIZED_NAME_LISTEN_COUNT)
  private Integer listenCount;

  public ArtistMapForUserPayloadArtistMapInner() {
  }

  public ArtistMapForUserPayloadArtistMapInner artistCount(Integer artistCount) {
    this.artistCount = artistCount;
    return this;
  }

  /**
   * Get artistCount
   * @return artistCount
   */
  @javax.annotation.Nullable
  public Integer getArtistCount() {
    return artistCount;
  }

  public void setArtistCount(Integer artistCount) {
    this.artistCount = artistCount;
  }


  public ArtistMapForUserPayloadArtistMapInner artists(List<TopArtistsForUserPayloadArtistsInner> artists) {
    this.artists = artists;
    return this;
  }

  public ArtistMapForUserPayloadArtistMapInner addArtistsItem(TopArtistsForUserPayloadArtistsInner artistsItem) {
    if (this.artists == null) {
      this.artists = new ArrayList<>();
    }
    this.artists.add(artistsItem);
    return this;
  }

  /**
   * Get artists
   * @return artists
   */
  @javax.annotation.Nullable
  public List<TopArtistsForUserPayloadArtistsInner> getArtists() {
    return artists;
  }

  public void setArtists(List<TopArtistsForUserPayloadArtistsInner> artists) {
    this.artists = artists;
  }


  public ArtistMapForUserPayloadArtistMapInner country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public ArtistMapForUserPayloadArtistMapInner listenCount(Integer listenCount) {
    this.listenCount = listenCount;
    return this;
  }

  /**
   * Get listenCount
   * @return listenCount
   */
  @javax.annotation.Nullable
  public Integer getListenCount() {
    return listenCount;
  }

  public void setListenCount(Integer listenCount) {
    this.listenCount = listenCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArtistMapForUserPayloadArtistMapInner artistMapForUserPayloadArtistMapInner = (ArtistMapForUserPayloadArtistMapInner) o;
    return Objects.equals(this.artistCount, artistMapForUserPayloadArtistMapInner.artistCount) &&
        Objects.equals(this.artists, artistMapForUserPayloadArtistMapInner.artists) &&
        Objects.equals(this.country, artistMapForUserPayloadArtistMapInner.country) &&
        Objects.equals(this.listenCount, artistMapForUserPayloadArtistMapInner.listenCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artistCount, artists, country, listenCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArtistMapForUserPayloadArtistMapInner {\n");
    sb.append("    artistCount: ").append(toIndentedString(artistCount)).append("\n");
    sb.append("    artists: ").append(toIndentedString(artists)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    listenCount: ").append(toIndentedString(listenCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("artist_count");
    openapiFields.add("artists");
    openapiFields.add("country");
    openapiFields.add("listen_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ArtistMapForUserPayloadArtistMapInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ArtistMapForUserPayloadArtistMapInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArtistMapForUserPayloadArtistMapInner is not found in the empty JSON string", ArtistMapForUserPayloadArtistMapInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ArtistMapForUserPayloadArtistMapInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ArtistMapForUserPayloadArtistMapInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("artists") != null && !jsonObj.get("artists").isJsonNull()) {
        JsonArray jsonArrayartists = jsonObj.getAsJsonArray("artists");
        if (jsonArrayartists != null) {
          // ensure the json data is an array
          if (!jsonObj.get("artists").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `artists` to be an array in the JSON string but got `%s`", jsonObj.get("artists").toString()));
          }

          // validate the optional field `artists` (array)
          for (int i = 0; i < jsonArrayartists.size(); i++) {
            TopArtistsForUserPayloadArtistsInner.validateJsonElement(jsonArrayartists.get(i));
          };
        }
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArtistMapForUserPayloadArtistMapInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArtistMapForUserPayloadArtistMapInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArtistMapForUserPayloadArtistMapInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArtistMapForUserPayloadArtistMapInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ArtistMapForUserPayloadArtistMapInner>() {
           @Override
           public void write(JsonWriter out, ArtistMapForUserPayloadArtistMapInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ArtistMapForUserPayloadArtistMapInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ArtistMapForUserPayloadArtistMapInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ArtistMapForUserPayloadArtistMapInner
   * @throws IOException if the JSON string is invalid with respect to ArtistMapForUserPayloadArtistMapInner
   */
  public static ArtistMapForUserPayloadArtistMapInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArtistMapForUserPayloadArtistMapInner.class);
  }

  /**
   * Convert an instance of ArtistMapForUserPayloadArtistMapInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

